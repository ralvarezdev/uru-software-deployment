{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Despliegue de Software","text":"<p>En la presente documentaci\u00f3n, se explica todo lo relacionado con el despliegue de software, en particular, los temas visto durante la materia de Despliegue de Software del curso de Ingenier\u00eda en Computaci\u00f3n de la Universidad Rafael Urdaneta (URU) durante el trimestre 2025-B.</p> Universidad Rafael Urdaneta"},{"location":"index.html#integrantes","title":"Integrantes","text":"<p>A continuaci\u00f3n, se presenta la lista de los integrantes del equipo que ha colaborado en la creaci\u00f3n de esta documentaci\u00f3n:</p> <ul> <li>Victoria Acosta, Victoriaag6.</li> <li>Ram\u00f3n \u00c1lvarez, ralvarezdev.</li> <li>Idiar Chac\u00edn, idiarj.</li> <li>Carlos Fern\u00e1ndez, carlosfernandezdev.</li> <li>Angelina Pineda, Ange1023.</li> <li>Valeria Salcedo, valeriasalcedo.</li> </ul>"},{"location":"index.html#indice","title":"\u00cdndice","text":"<ol> <li>Almacenamiento<ol> <li>RAID<ol> <li>Tipos de RAID<ol> <li>RAID 0</li> <li>RAID 1</li> <li>RAID 5</li> <li>RAID 6</li> <li>RAID 10</li> <li>RAID 50</li> <li>RAID 60</li> </ol> </li> <li>Hot Swap</li> <li>Controladoras RAID<ol> <li>Por Software</li> <li>Por Hardware</li> </ol> </li> </ol> </li> </ol> </li> <li>Virtualizaci\u00f3n<ol> <li>Contenedores<ol> <li>Docker</li> </ol> </li> <li>M\u00e1quinas Virtuales (VM)<ol> <li>Definici\u00f3n</li> <li>Prop\u00f3sito General</li> <li>Componentes T\u00e9cnicos</li> <li>Tipos de Hipervisores</li> <li>Gesti\u00f3n y Uso</li> <li>Formatos de Disco Virtual</li> <li>Casos de Uso</li> </ol> </li> <li>Servidores Virtuales (VPS)<ol> <li>\u00bfQu\u00e9 es un Servidor Virtual?</li> <li>\u00bfC\u00f3mo Funciona un VPS?</li> <li>Tipos de Servidores Virtuales</li> <li>Hipervisores Utilizados en VPS</li> <li>Usos Comunes del VPS</li> <li>Ventajas del VPS</li> <li>Comparaci\u00f3n con Otros Modelos de Hosting</li> <li>Herramientas de Gesti\u00f3n y Paneles</li> <li>Notas T\u00e9cnicas</li> </ol> </li> <li>Empaquetadores<ol> <li>Vite</li> </ol> </li> </ol> </li> <li>Sistemas de Gesti\u00f3n<ol> <li>PM2</li> <li>CMS</li> </ol> </li> <li>Redes<ol> <li>Dominio</li> <li>IP P\u00fablica</li> <li>Port Forwarding</li> <li>Protocolos<ol> <li>Seguridad<ol> <li>SSL/TLS</li> </ol> </li> </ol> </li> <li>Seguridad<ol> <li>Firewall<ol> <li>UFW</li> </ol> </li> </ol> </li> <li>Hosting<ol> <li>Apache</li> <li>Nginx<ol> <li>\u00bfQu\u00e9 es Nginx?</li> <li>\u00bfPara qu\u00e9 Sirve Nginx?</li> <li>Arquitectura de Nginx</li> <li>Casos de Uso Comunes</li> <li>Balanceo de Carga</li> <li>Algoritmos Soportados</li> <li>Soporte para HTTPS (TLS/SSL)</li> <li>Ventajas de Nginx</li> <li>Diferencias con Apache</li> </ol> </li> <li>Seguridad</li> <li>Virtual Host</li> </ol> </li> </ol> </li> </ol>"},{"location":"concepts/bundlers/vite.html","title":"Vite: Documentaci\u00f3n Detallada","text":""},{"location":"concepts/bundlers/vite.html#que-es-vite","title":"\u00bfQu\u00e9 es Vite?","text":"<p>Vite (pronunciado /vit/, que significa \"r\u00e1pido\" en franc\u00e9s) es una herramienta de construcci\u00f3n y servidor de desarrollo frontend creada por Evan You, el autor de Vue.js. Vite est\u00e1 dise\u00f1ada para proporcionar una experiencia de desarrollo moderna, m\u00e1s r\u00e1pida y eficiente en comparaci\u00f3n con herramientas tradicionales como Webpack.</p> <p>Vite consta de dos partes principales:</p> <ol> <li>Servidor de desarrollo ultra-r\u00e1pido con hot module replacement (HMR).</li> <li>Build tool basada en Rollup para producci\u00f3n.</li> </ol> Logo de Vite"},{"location":"concepts/bundlers/vite.html#para-que-sirve-vite","title":"\u00bfPara qu\u00e9 sirve Vite?","text":"<ul> <li>Desarrollar aplicaciones frontend modernas (con frameworks como React, Vue, Svelte, Lit, etc.).</li> <li>Compilar proyectos escritos en TypeScript, JSX, TSX, SCSS, PostCSS, etc.</li> <li>Proveer un flujo de desarrollo con recarga r\u00e1pida (HMR).</li> <li>Realizar construcciones de producci\u00f3n altamente optimizadas.</li> </ul>"},{"location":"concepts/bundlers/vite.html#como-funciona-vite","title":"\u00bfC\u00f3mo funciona Vite?","text":""},{"location":"concepts/bundlers/vite.html#en-desarrollo","title":"En desarrollo:","text":"<ul> <li>Utiliza ES Modules nativos del navegador para cargar archivos de forma directa.</li> <li>Usa esbuild, una herramienta escrita en Go, para transpilar TypeScript/JSX hasta 10-100x m\u00e1s r\u00e1pido que Babel.</li> <li>Solo transpila/transforma el c\u00f3digo cuando es solicitado por el navegador, lo que acelera el arranque.</li> </ul>"},{"location":"concepts/bundlers/vite.html#en-produccion","title":"En producci\u00f3n:","text":"<ul> <li>Usa Rollup para construir un bundle optimizado.</li> <li>Aplica code-splitting, tree shaking, lazy loading, y m\u00e1s.</li> </ul>"},{"location":"concepts/bundlers/vite.html#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ul> <li>Arranque instant\u00e1neo del servidor de desarrollo.</li> <li>Hot Module Replacement (HMR) r\u00e1pido.</li> <li>Soporte listo para usar para frameworks modernos.</li> <li>Soporte para TypeScript, JSX, CSS, JSON, y m\u00e1s sin configuraci\u00f3n adicional.</li> <li>Plugins compatibles con Rollup y sistema de plugins propio.</li> <li>Compatible con pruebas usando Vitest, Playwright o Cypress.</li> </ul>"},{"location":"concepts/bundlers/vite.html#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>npm create vite@latest\n# o\nyarn create vite\n# o\npnpm create vite\n</code></pre> <p>Luego sigue el prompt para seleccionar un framework (React, Vue, Svelte, etc.).</p>"},{"location":"concepts/bundlers/vite.html#estructura-tipica-proyecto-vite","title":"Estructura t\u00edpica de un proyecto Vite","text":"<pre><code>my-app/\n\u251c\u2500 public/\n\u2502  \u2514\u2500 favicon.svg\n\u251c\u2500 src/\n\u2502  \u251c\u2500 main.ts\n\u2502  \u2514\u2500 App.vue\n\u251c\u2500 index.html\n\u251c\u2500 vite.config.ts\n\u251c\u2500 package.json\n\u2514\u2500 tsconfig.json\n</code></pre>"},{"location":"concepts/bundlers/vite.html#casos-de-uso","title":"Casos de uso","text":""},{"location":"concepts/bundlers/vite.html#aplicaciones-spa-modernas","title":"1. Aplicaciones SPA modernas","text":"<p>Ideal para proyectos con React, Vue, Svelte, Preact, Lit, etc., que buscan velocidad y simplicidad.</p>"},{"location":"concepts/bundlers/vite.html#proyectos-multiples-entradas","title":"2. Proyectos con m\u00faltiples entradas","text":"<p>Vite permite m\u00faltiples p\u00e1ginas y entradas usando configuraciones en <code>vite.config.js</code>.</p>"},{"location":"concepts/bundlers/vite.html#component-libraries","title":"3. Component libraries","text":"<p>Es excelente para construir librer\u00edas de componentes (e.g., usando VitePress o Storybook con Vite).</p>"},{"location":"concepts/bundlers/vite.html#desarrollo-prototipos-rapidos","title":"4. Desarrollo de prototipos r\u00e1pidos","text":"<p>Gracias a su inicio instant\u00e1neo y configuraci\u00f3n m\u00ednima, Vite es ideal para prototipado.</p>"},{"location":"concepts/bundlers/vite.html#migraciones-desde-webpack","title":"5. Migraciones desde Webpack","text":"<p>Muchas aplicaciones est\u00e1n migrando de Webpack a Vite por la diferencia de rendimiento, especialmente en proyectos grandes.</p>"},{"location":"concepts/bundlers/vite.html#configuracion-basica-viteconfigjs","title":"Configuraci\u00f3n b\u00e1sica (<code>vite.config.js</code>)","text":"<pre><code>import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\nexport default defineConfig({\n  plugins: [vue()],\n  server: {\n    port: 3000,\n    open: true,\n  },\n  build: {\n    outDir: 'dist',\n  },\n})\n</code></pre>"},{"location":"concepts/bundlers/vite.html#recursos-utiles","title":"Recursos \u00fatiles","text":"<ul> <li>Sitio oficial: https://vitejs.dev</li> <li>GitHub: https://github.com/vitejs/vite</li> <li>Plantillas oficiales: Vite templates</li> <li>Comparaci\u00f3n con Webpack: https://vitejs.dev/guide/why.html</li> </ul>"},{"location":"concepts/bundlers/vite.html#ventajas","title":"Ventajas","text":"<ul> <li>Velocidad extrema en desarrollo.</li> <li>Configuraci\u00f3n m\u00ednima.</li> <li>Excelente soporte para TypeScript y JSX.</li> <li>Comunidad en crecimiento y ecosistema robusto.</li> </ul>"},{"location":"concepts/bundlers/vite.html#desventajas","title":"Desventajas","text":"<ul> <li>Todav\u00eda es relativamente joven comparado con Webpack.</li> <li>Menos plugins disponibles para casos complejos (aunque est\u00e1 creciendo r\u00e1pidamente).</li> <li>Puede requerir ajustes al migrar proyectos grandes con configuraciones Webpack personalizadas.</li> </ul>"},{"location":"concepts/bundlers/vite.html#conclusion","title":"Conclusi\u00f3n","text":"<p>Vite es una herramienta moderna que resuelve problemas comunes del desarrollo frontend tradicional, especialmente en t\u00e9rminos de velocidad. Su arquitectura basada en ESModules y esbuild ofrece un rendimiento sin igual durante el desarrollo. Para nuevos proyectos o migraciones que buscan eficiencia, Vite es una opci\u00f3n sobresaliente.</p>"},{"location":"concepts/management-systems/cms.html","title":"Sistemas de Gesti\u00f3n de Contenidos (CMS)","text":""},{"location":"concepts/management-systems/cms.html#definicion","title":"Definici\u00f3n","text":"Logo de Wordpress <p>Un CMS (Content Management System) es una plataforma de software que permite a los usuarios crear, editar, organizar y publicar contenido en sitios web sin necesidad de programar manualmente. Facilita la separaci\u00f3n entre el contenido, la estructura del sitio y su presentaci\u00f3n visual.</p>"},{"location":"concepts/management-systems/cms.html#funcionalidades-comunes","title":"Funcionalidades Comunes","text":"<ul> <li>Edici\u00f3n de p\u00e1ginas y art\u00edculos</li> <li>Administraci\u00f3n de archivos multimedia</li> <li>Control de usuarios, roles y permisos</li> <li>Personalizaci\u00f3n mediante temas o plantillas</li> <li>Extensibilidad con m\u00f3dulos o plugins</li> <li>Gesti\u00f3n de men\u00fas, navegaci\u00f3n y estructura</li> <li>Optimizaci\u00f3n para buscadores (SEO)</li> <li>Internacionalizaci\u00f3n (idiomas)</li> <li>Integraci\u00f3n con herramientas externas (CRM, e-commerce, formularios)</li> </ul>"},{"location":"concepts/management-systems/cms.html#clasificacion-por-tipo","title":"Clasificaci\u00f3n por Tipo","text":""},{"location":"concepts/management-systems/cms.html#tradicionales-backend-frontend-acoplado","title":"Tradicionales (Backend + Frontend acoplado)","text":"<ul> <li>WordPress</li> <li>Joomla</li> <li>Drupal</li> <li>TYPO3</li> <li>Magento</li> <li>PrestaShop</li> </ul>"},{"location":"concepts/management-systems/cms.html#headless-cms-frontend-desacoplado","title":"Headless CMS (Frontend desacoplado)","text":"Logo de Netlify <ul> <li>Strapi</li> <li>Sanity</li> <li>Contentful</li> <li>Directus</li> <li>Netlify CMS</li> </ul>"},{"location":"concepts/management-systems/cms.html#saas-cms-como-servicio","title":"SaaS (CMS como servicio)","text":"Logo de Shopify <ul> <li>Wix</li> <li>Webflow</li> <li>Squarespace</li> <li>Shopify</li> </ul>"},{"location":"concepts/management-systems/cms.html#cms-por-lenguaje","title":"CMS por Lenguaje","text":"Lenguaje CMS destacados PHP WordPress, Drupal, Joomla, Magento, PrestaShop JavaScript Ghost (Node.js), Strapi, KeystoneJS Python Wagtail, Django CMS .NET Umbraco, Orchard Core Java Magnolia, OpenCMS Ruby RefineryCMS"},{"location":"concepts/management-systems/cms.html#componentes-tecnicos","title":"Componentes T\u00e9cnicos","text":"<ul> <li>Backend: Administra contenido, usuarios, configuraciones</li> <li>Frontend: Genera la interfaz p\u00fablica</li> <li>Base de datos: Almacena contenido estructurado</li> <li>Sistema de plantillas: Controla la presentaci\u00f3n visual</li> <li>M\u00f3dulos/Plugins: A\u00f1aden funcionalidades espec\u00edficas</li> <li>Editor WYSIWYG: Permite edici\u00f3n visual del contenido</li> <li>Gestor de archivos: Maneja im\u00e1genes, documentos, videos</li> <li>API: Permiten acceso program\u00e1tico al contenido (REST/GraphQL)</li> <li>Seguridad: Control de roles, autenticaci\u00f3n, actualizaci\u00f3n</li> </ul>"},{"location":"concepts/management-systems/cms.html#casos-de-uso-comunes","title":"Casos de Uso Comunes","text":"<ul> <li>Blogs y medios digitales</li> <li>Tiendas en l\u00ednea</li> <li>Portales corporativos</li> <li>Sitios institucionales y acad\u00e9micos</li> <li>Documentaci\u00f3n y bases de conocimiento</li> <li>Landing pages y cat\u00e1logos de productos</li> <li>Aplicaciones SPA con backend headless</li> </ul>"},{"location":"concepts/management-systems/cms.html#comparativa-tecnica","title":"Comparativa T\u00e9cnica","text":"CMS Tipo Lenguaje Base de Datos Frontend integrado API disponible WordPress Tradicional PHP MySQL S\u00ed REST API Drupal Tradicional PHP MySQL S\u00ed REST y GraphQL Joomla Tradicional PHP MySQL S\u00ed Opcional Magento E-commerce PHP MySQL S\u00ed REST y GraphQL Ghost Headless Node.js SQLite / MySQL No REST API Strapi Headless Node.js PostgreSQL, SQLite No REST y GraphQL Contentful Headless SaaS Interna No GraphQL Wagtail Tradicional Python PostgreSQL S\u00ed REST API"},{"location":"concepts/management-systems/cms.html#ventajas-de-usar-un-cms","title":"Ventajas de Usar un CMS","text":"Ventaja Descripci\u00f3n Reducci\u00f3n de tiempo Permite lanzar sitios en menos tiempo No requiere codificaci\u00f3n Usuarios sin conocimientos t\u00e9cnicos pueden gestionar contenido Escalabilidad Algunos CMS soportan miles de p\u00e1ginas y usuarios Personalizaci\u00f3n Uso de plantillas y extensiones adaptables Comunidad y soporte Grandes comunidades con plugins y documentaci\u00f3n Seguridad mejorada Actualizaciones frecuentes y plugins de seguridad disponibles Control de versiones Algunos CMS permiten revisar y restaurar contenido"},{"location":"concepts/management-systems/cms.html#herramientas-relacionadas","title":"Herramientas Relacionadas","text":"<ul> <li>cPanel / Plesk: Paneles de hosting para instalar CMS f\u00e1cilmente</li> <li>Docker / Docker Compose: Para desplegar CMS en contenedores</li> <li>Git / GitHub: Control de versiones de temas o personalizaciones</li> <li>Vercel / Netlify: Despliegue de frontends desacoplados</li> <li>API Clients: Postman, Insomnia (para consumir APIs de CMS headless)</li> </ul>"},{"location":"concepts/management-systems/pm2.html","title":"PM2 - Process Manager para Node.js","text":""},{"location":"concepts/management-systems/pm2.html#que-es-pm2","title":"\u00bfQu\u00e9 es PM2?","text":"<p>PM2 es un administrador de procesos para aplicaciones Node.js (y otros lenguajes), dise\u00f1ado para ejecutar, monitorear y mantener procesos activos en segundo plano. Se usa principalmente en entornos de producci\u00f3n para asegurar que las aplicaciones funcionen de manera estable y continua, incluso tras fallos o reinicios del sistema.</p>"},{"location":"concepts/management-systems/pm2.html#para-que-sirve-pm2","title":"\u00bfPara qu\u00e9 sirve PM2?","text":"Funcionalidad Descripci\u00f3n Ejecuci\u00f3n en segundo plano Permite ejecutar apps Node.js sin dejar la terminal abierta. Reinicio autom\u00e1tico Reinicia apps en caso de errores o fallos. Clustering Ejecuta m\u00faltiples instancias (multi-core). Monitoreo Muestra estado, CPU y RAM por proceso. Logging Guarda logs de salida est\u00e1ndar y errores. Autostart Inicia apps autom\u00e1ticamente al reiniciar el servidor. Ecosystem File Define m\u00faltiples apps y entornos en un archivo centralizado."},{"location":"concepts/management-systems/pm2.html#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>npm install -g pm2\n</code></pre> <p>Requiere tener Node.js instalado previamente.</p>"},{"location":"concepts/management-systems/pm2.html#comandos-basicos","title":"Comandos B\u00e1sicos","text":"<pre><code>pm2 start app.js         # Ejecutar la app\npm2 list                 # Ver procesos activos\npm2 stop app             # Detener un proceso\npm2 restart app          # Reiniciar un proceso\npm2 delete app           # Eliminar un proceso de PM2\npm2 logs                 # Ver logs en tiempo real\npm2 monit                # Monitoreo interactivo en consola\n</code></pre>"},{"location":"concepts/management-systems/pm2.html#modo-cluster","title":"Modo Cl\u00faster","text":"<pre><code>pm2 start app.js -i max\n</code></pre> <ul> <li>Ejecuta la app en modo cl\u00faster, usando todos los n\u00facleos disponibles.</li> <li>Mejora el rendimiento en servidores multi-core.</li> </ul>"},{"location":"concepts/management-systems/pm2.html#ecosystem-file","title":"Ecosystem File","text":"<p>Permite definir configuraci\u00f3n de m\u00faltiples procesos en un solo archivo.</p>"},{"location":"concepts/management-systems/pm2.html#ecosystem-config-js","title":"ecosystem.config.js","text":"<pre><code>module.exports = {\n  apps: [\n    {\n      name: 'api',\n      script: './server.js',\n      instances: 2,\n      exec_mode: 'cluster',\n      env: {\n        NODE_ENV: 'development'\n      },\n      env_production: {\n        NODE_ENV: 'production'\n      }\n    }\n  ]\n};\n</code></pre>"},{"location":"concepts/management-systems/pm2.html#ejecutar-con-ecosystem","title":"Ejecutar con ecosystem","text":"<pre><code>pm2 start ecosystem.config.js --env production\n</code></pre>"},{"location":"concepts/management-systems/pm2.html#autostart-tras-reinicio-servidor","title":"Autostart tras reinicio del servidor","text":""},{"location":"concepts/management-systems/pm2.html#guardar-estado-actual","title":"Guardar estado actual","text":"<pre><code>pm2 save\n</code></pre>"},{"location":"concepts/management-systems/pm2.html#configurar-inicio-automatico","title":"Configurar inicio autom\u00e1tico","text":"<pre><code>pm2 startup\n</code></pre> <p>Este comando devuelve una l\u00ednea que se debe ejecutar para registrar PM2 como servicio del sistema.</p>"},{"location":"concepts/management-systems/pm2.html#logs","title":"Logs","text":"<pre><code>pm2 logs               # Ver todos los logs en tiempo real\npm2 logs app           # Ver logs de una app espec\u00edfica\n</code></pre> <p>Los logs se almacenan por defecto en <code>~/.pm2/logs</code>.</p>"},{"location":"concepts/management-systems/pm2.html#pm2-con-otros-lenguajes","title":"PM2 con otros lenguajes","text":"<p>Tambi\u00e9n se puede ejecutar scripts en otros lenguajes usando el par\u00e1metro <code>--interpreter</code>.</p> <pre><code>pm2 start script.py --interpreter python3\npm2 start script.sh\n</code></pre>"},{"location":"concepts/management-systems/pm2.html#integracion-con-vps","title":"Integraci\u00f3n con Servidores Virtuales (VPS)","text":"<ol> <li>Desplegar la app en el VPS</li> <li>Instalar PM2 globalmente</li> <li>Ejecutar la app con <code>pm2 start</code></li> <li>Guardar configuraci\u00f3n con <code>pm2 save</code></li> <li>Configurar <code>pm2 startup</code> para que inicie autom\u00e1ticamente</li> </ol>"},{"location":"concepts/management-systems/pm2.html#comparacion-con-otros-process-managers","title":"Comparaci\u00f3n con Otros Process Managers","text":"Herramienta Soporte Node.js Clustering Logs Autostart Observabilidad PM2 S\u00ed S\u00ed S\u00ed S\u00ed S\u00ed forever S\u00ed No B\u00e1sico Parcial No systemd Gen\u00e9rico No Medio S\u00ed Limitado nodemon S\u00ed (dev) No No No No"},{"location":"concepts/management-systems/pm2.html#recursos","title":"Recursos","text":"<ul> <li>Sitio oficial: https://pm2.keymetrics.io</li> </ul>"},{"location":"concepts/network/domain.html","title":"Dominio","text":""},{"location":"concepts/network/domain.html#que-es-un-dominio","title":"\u00bfQu\u00e9 es un dominio?","text":"<p>Un dominio es el nombre \u00fanico y legible por humanos que se utiliza para identificar un sitio o servicio en internet. Funciona como una direcci\u00f3n f\u00e1cil de recordar que se traduce internamente a una direcci\u00f3n IP del servidor que aloja tu aplicaci\u00f3n.</p> <p>Ejemplo: - Dominio: <code>www.ejemplo.com</code> - IP asociada: <code>93.184.216.34</code></p>"},{"location":"concepts/network/domain.html#estructura-dominio","title":"Estructura de un dominio","text":"<p>Ejemplo: <code>api.misitio.com</code></p> <ul> <li><code>com</code>: Dominio de nivel superior (TLD)</li> <li><code>misitio</code>: Nombre del dominio (registrado por el usuario)</li> <li><code>api</code>: Subdominio (opcional)</li> </ul>"},{"location":"concepts/network/domain.html#por-que-es-importante","title":"\u00bfPor qu\u00e9 es importante un dominio?","text":""},{"location":"concepts/network/domain.html#1-accesibilidad","title":"1. Accesibilidad","text":"<p>Permite a los usuarios acceder f\u00e1cilmente a tu sistema sin memorizar direcciones IP.</p>"},{"location":"concepts/network/domain.html#2-seguridad-https","title":"2. Seguridad (HTTPS)","text":"<p>Para habilitar certificados SSL y cifrar la conexi\u00f3n (HTTPS), necesitas un dominio.</p>"},{"location":"concepts/network/domain.html#como-conseguir-dominio","title":"Como se puede conseguir un dominio?","text":"<p>Se pueden conseguir en sitios como:</p> <ul> <li>Namecheap</li> <li>GoDaddy</li> <li>Cloudflare Registrar</li> <li>Google Domains (Squarespace)</li> </ul> <p>Ejemplo de dominio registrado: <code>shadedcitadel.xyz</code></p>"},{"location":"concepts/network/domain.html#acceso-a-panel","title":"Acceso al panel DNS del registrador","text":"<p>Debes poder acceder al panel donde se administran los registros DNS del dominio. Este panel puede llamarse:</p> <ul> <li>\"DNS Management\"</li> <li>\"Zone Editor\"</li> <li>\"Advanced DNS Settings\"</li> </ul> <p>Desde all\u00ed podr\u00e1s crear o editar registros tipo A, CNAME, TXT, etc.</p>"},{"location":"concepts/network/domain.html#limpiar-registros","title":"Limpiar registros predeterminados (si existen)","text":"<p>Muchos dominios nuevos vienen con configuraciones por defecto que debes revisar o eliminar para evitar conflictos.</p> <ul> <li>Verifica los registros tipo A y CNAME</li> <li>Elimina entradas innecesarias para <code>@</code> o <code>www</code> si no las vas a usar</li> <li>Aseg\u00farate de tener el control total del enrutamiento del dominio</li> </ul>"},{"location":"concepts/network/port-forwarding.html","title":"Port Forwarding","text":""},{"location":"concepts/network/port-forwarding.html#port-forwarding","title":"\u00bfQu\u00e9 es el Port Forwarding?","text":"<p>Port forwarding (reenv\u00edo de puertos) es una t\u00e9cnica de red utilizada para redirigir solicitudes entrantes desde una IP p\u00fablica y puerto espec\u00edfico hacia una direcci\u00f3n IP interna en una red privada, y opcionalmente a otro puerto.</p> <p>En t\u00e9rminos simples, permite acceder desde el exterior a servicios alojados dentro de una red privada.</p>"},{"location":"concepts/network/port-forwarding.html#para-que-sirve-pf","title":"\u00bfPara qu\u00e9 sirve?","text":"<p>El port forwarding permite:</p> <ul> <li>Acceder remotamente a servidores web, SSH, c\u00e1maras IP, videojuegos, etc.</li> <li>Exponer servicios internos a internet.</li> <li>Habilitar administraci\u00f3n remota.</li> </ul>"},{"location":"concepts/network/port-forwarding.html#ejemplos-uso","title":"Ejemplos de uso","text":"Servicio IP Interna Puerto interno Puerto externo Servidor Web 192.168.1.100 80 80 SSH a Raspberry 192.168.1.101 22 2222 C\u00e1mara IP 192.168.1.50 80 8080"},{"location":"concepts/network/port-forwarding.html#donde-se-configura","title":"\u00bfD\u00f3nde se configura?","text":"<ul> <li>En el router que conecta la red local a Internet.</li> <li>En firewalls locales (iptables, UFW).</li> <li>En servidores o balanceadores cloud (AWS, GCP, Azure).</li> </ul>"},{"location":"concepts/network/port-forwarding.html#como-funciona","title":"\u00bfC\u00f3mo funciona?","text":"<ol> <li>Un cliente externo realiza una solicitud a la IP p\u00fablica del router en un puerto espec\u00edfico.</li> <li>El router tiene una regla de port forwarding que redirige esa solicitud a una IP interna y puerto correspondiente.</li> <li>El servicio local responde y el router reenv\u00eda la respuesta al cliente.</li> </ol>"},{"location":"concepts/network/port-forwarding.html#ejemplo-pf","title":"Ejemplo","text":"<ul> <li>IP p\u00fablica del router: <code>200.45.12.100</code></li> <li>Port forwarding: <code>200.45.12.100:80</code> \u2192 <code>192.168.1.10:3000</code></li> <li>Resultado: cualquier persona accediendo a <code>http://200.45.12.100</code> ser\u00e1 redirigida al servicio Node.js corriendo en la red local.</li> </ul>"},{"location":"concepts/network/port-forwarding.html#tipos-pf","title":"Tipos de Port Forwarding","text":"<ol> <li>Est\u00e1tico: El puerto externo redirige siempre a la misma IP y puerto interno.</li> <li>Din\u00e1mico: Se utiliza generalmente con t\u00faneles SSH, no con routers dom\u00e9sticos.</li> <li>Inverso (Reverse Port Forwarding): Se abre un t\u00fanel desde la red privada hacia una m\u00e1quina externa, \u00fatil si no se puede hacer port forwarding desde el router.</li> </ol>"},{"location":"concepts/network/port-forwarding.html#seguridad-pf","title":"Seguridad","text":"<p>El port forwarding puede ser riesgoso si se mal configura. Recomendaciones:</p> <ul> <li>Solo exponer los puertos necesarios.</li> <li>Usar puertos no est\u00e1ndar cuando sea posible.</li> <li>Configurar firewall (ufw, iptables) para limitar acceso.</li> <li>Utilizar autenticaci\u00f3n fuerte y cifrado (TLS, SSH).</li> <li>Utilizar VPN cuando sea posible. s</li> </ul>"},{"location":"concepts/network/public-ip.html","title":"\u00bfQu\u00e9 es una IP P\u00fablica?","text":"<p>Una IP p\u00fablica es una direcci\u00f3n \u00fanica asignada a un dispositivo o red para permitir el acceso desde cualquier punto de Internet.</p>"},{"location":"concepts/network/public-ip.html#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Asignada por un proveedor de servicios (ISP o nube).</li> <li>Visible desde Internet.</li> <li>Necesaria para recibir tr\u00e1fico externo.</li> </ul>"},{"location":"concepts/network/public-ip.html#ejemplos-ip-publica","title":"Ejemplos:","text":"<ul> <li>IPv4: <code>190.123.45.67</code></li> <li>IPv6: <code>2800:200:e010::1</code></li> </ul>"},{"location":"concepts/network/public-ip.html#para-que-sirve","title":"\u00bfPara qu\u00e9 sirve?","text":"<ul> <li>Identificar y acceder a servidores o redes desde Internet.</li> <li>Recibir solicitudes externas en servicios como HTTP, SSH, VPN, etc.</li> <li>Asociar nombres de dominio a direcciones IP para facilitar el acceso. </li> </ul>"},{"location":"concepts/network/public-ip.html#ip-publica-port-forwarding-dominios","title":"Relaci\u00f3n entre IP P\u00fablica, Port Forwarding y Dominios","text":"<p>Supongamos que tienes un servidor web en tu red local.</p>"},{"location":"concepts/network/public-ip.html#escenarios-ip-publica","title":"Escenario","text":"<ul> <li>Tu proveedor te asigna una IP p\u00fablica: <code>190.123.45.67</code>.</li> <li>Tu aplicaci\u00f3n web corre en <code>192.168.1.10:3000</code> (IP privada).</li> <li>Configuras port forwarding: rediriges el puerto 80 del router hacia <code>192.168.1.10:3000</code>.</li> </ul>"},{"location":"concepts/network/public-ip.html#acceso-ip-publica-dominio","title":"Acceso mediante dominio","text":"<ul> <li>Registras <code>miapp.com</code>.</li> <li>Configuras en el DNS que <code>miapp.com</code> apunte a <code>190.123.45.67</code>.</li> <li>Cuando un usuario entra a <code>http://miapp.com</code>, el flujo es:</li> <li>Resoluci\u00f3n DNS \u2192 IP p\u00fablica</li> <li>El router recibe la solicitud</li> <li>Aplica port forwarding</li> <li>Redirige al servidor interno</li> <li>El servidor responde al usuario</li> </ul>"},{"location":"concepts/network/public-ip.html#diagrama-ip-publica","title":"Diagrama","text":"Diagrama de flujo de acceso a un servicio interno mediante IP p\u00fablica y port forwarding"},{"location":"concepts/network/public-ip.html#conclusion-ip-publica","title":"Conclusi\u00f3n","text":"<p>Las direcciones IP p\u00fablicas son fundamentales para que cualquier dispositivo o red pueda ser accesible desde Internet, funcionando como un punto de entrada visible para el mundo exterior. Sin embargo, en la mayor\u00eda de los entornos, especialmente en redes dom\u00e9sticas o empresariales, los servicios internos no est\u00e1n directamente expuestos. Aqu\u00ed es donde entra en juego el port forwarding, que permite redirigir el tr\u00e1fico entrante desde esa IP p\u00fablica hacia servicios espec\u00edficos dentro de la red local, manteniendo un nivel de aislamiento y control.</p> <p>Tambi\u00e9n, los nombres de dominio desempe\u00f1an un papel esencial al ofrecer una forma mucho m\u00e1s amigable de acceder a estos servicios, ya que en lugar de recordar direcciones IP num\u00e9ricas, los usuarios simplemente pueden escribir un nombre como miapp.com, que ser\u00e1 traducido autom\u00e1ticamente a la IP p\u00fablica correspondiente mediante el sistema DNS.</p> <p>Unidos, estos elementos como la IP p\u00fablica, el port forwarding y los dominios forman una arquitectura b\u00e1sica pero poderosa para publicar aplicaciones y servicios locales en Internet. Esta combinaci\u00f3n es ampliamente utilizada en soluciones de hosting dom\u00e9stico, entornos de desarrollo remoto, aplicaciones autoalojadas, dispositivos IoT y m\u00e1s, proporcionando una forma estructurada, accesible y controlada de hacer visibles los recursos internos al mundo exterior.</p>"},{"location":"concepts/network/hosting/apache.html","title":"Apache","text":""},{"location":"concepts/network/hosting/apache.html#que-es","title":"\u00bfQu\u00e9 es?","text":"<p>Apache HTTP Server (com\u00fanmente llamado Apache) es un servidor web de c\u00f3digo abierto que permite publicar, gestionar y servir contenido a trav\u00e9s del protocolo HTTP (HyperText Transfer Protocol) y su versi\u00f3n segura HTTPS (HTTP sobre SSL/TLS).</p> <p>Es un software multiplataforma que funciona como intermediario entre el servidor donde se alojan los archivos (p\u00e1ginas web, im\u00e1genes, scripts, etc.) y los clientes (navegadores como Chrome, Firefox, etc.), procesando sus solicitudes y entregando las respuestas correspondientes.</p>"},{"location":"concepts/network/hosting/apache.html#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"Protocolos Soportados <p>{#protocolos-soportados}</p> <p>Apache es compatible principalmente con HTTP/1.1 y HTTP/2, protocolos est\u00e1ndar para la transferencia web. Tambi\u00e9n admite extensiones como WebDAV (para edici\u00f3n remota de archivos) y FastCGI (para mejorar el rendimiento con aplicaciones din\u00e1micas). Aunque no est\u00e1 dise\u00f1ado para protocolos como FTP o SMTP, puede combinarse con otros servicios para cubrir esas necesidades. La configuraci\u00f3n de protocolos se realiza mediante directivas en sus archivos de configuraci\u00f3n.</p> Configuraci\u00f3n Flexible <p>{#configuracion-flexible}</p> <p>Apache se configura mediante archivos como <code>httpd.conf</code> (configuraci\u00f3n principal) o <code>.htaccess</code> (reglas por directorio). Estos archivos permiten definir desde puertos de escucha hasta reglas complejas de redirecci\u00f3n. Las directivas como <code>Directory</code> (permisos de acceso) o <code>RewriteRule</code> (URLs amigables) ofrecen granularidad. La posibilidad de usar archivos <code>.htaccess</code> permite ajustes sin reiniciar el servidor, ideal para entornos compartidos donde los usuarios no tienen acceso ra\u00edz.</p> Entorno de Ejecuci\u00f3n <p>{#entorno-de-ejecucion}</p> <p>Para contenido din\u00e1mico, Apache se integra con lenguajes como PHP (v\u00eda <code>mod_php</code>), Python (con <code>mod_wsgi</code>) o Perl (<code>mod_perl</code>). Estos m\u00f3dulos permiten ejecutar scripts directamente en el servidor, generando HTML personalizado antes de enviarlo al cliente. Adem\u00e1s, puede conectarse a bases de datos (MySQL, PostgreSQL) para sitios con almacenamiento persistente. Esta capacidad lo hace apto para CMS como WordPress o frameworks como Laravel.</p> Proxy y Balanceador de Carga <p>{#proxy-balanceador-carga}</p> <p>Como proxy inverso, Apache redirige solicitudes a servidores internos (ej: una app Node.js en otro puerto), ocultando la infraestructura real. Para alta disponibilidad, m\u00f3dulos como <code>mod_proxy_balancer</code> distribuyen el tr\u00e1fico entre m\u00faltiples servidores (load balancing), mejorando la escalabilidad. Aunque no es tan eficiente como Nginx o HAProxy para esta tarea, su facilidad de configuraci\u00f3n lo hace viable para entornos peque\u00f1os o medianos.</p> Seguridad B\u00e1sica <p>{#seguridad-basica}</p> <p>Apache incluye herramientas para proteger sitios web: autenticaci\u00f3n b\u00e1sica/digest (<code>mod_auth</code>), restricciones por IP (<code>Require ip</code>), y cifrado SSL/TLS (v\u00eda <code>mod_ssl</code>). Configuraciones como <code>LimitRequestBody</code> (para evitar ataques DDoS) o <code>Header set X-Content-Type-Options</code> (para mitigar MIME sniffing) a\u00f1aden capas de seguridad. Sin embargo, muchas protecciones avanzadas (como WAFs) requieren m\u00f3dulos adicionales o software externo.</p> Virtual Host <p>{#virtual-host}</p> <p>Apache permite alojar m\u00faltiples sitios web en un mismo servidor f\u00edsico mediante Virtual Hosts. Cada virtual host tiene su propia configuraci\u00f3n independiente, como dominio, directorio ra\u00edz (<code>DocumentRoot</code>), reglas de acceso y SSL, simulando servidores separados.</p>"},{"location":"concepts/network/hosting/apache.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar Apache2, se emplea el siguiente comando:</p> <pre><code>sudo apt install apache2\n</code></pre> <p>Apache2 se configura mediante directivas en archivos de configuraci\u00f3n de texto plano en formato <code>/etc/apache2/</code>. Estas directivas se distribuyen entre los siguientes archivos y directorios:</p>  Archivos  <p>{#archivos}</p> <ul> <li>apache2.conf: El archivo de configuraci\u00f3n principal de Apache2. Contiene configuraciones globales para Apache2.</li> <li>envvars: Archivo donde se establecen las variables de entorno de Apache2.</li> <li>magic: Instrucciones para determinar el tipo MIME seg\u00fan los primeros bytes de un archivo.</li> <li>ports.conf: Contiene las directivas que determinan en qu\u00e9 puertos TCP est\u00e1 escuchando Apache2.</li> </ul>  Directorios  <p>{#directorios}</p> <ul> <li>conf-available: Este directorio contiene los archivos de configuraci\u00f3n disponibles. Todos los archivos que estaban previamente en <code>/etc/apache2/conf.d</code> deben trasladarse a <code>/etc/apache2/conf-available</code>.</li> <li>conf-enabled: Contiene enlaces simb\u00f3licos a los archivos en <code>/etc/apache2/conf-available</code>. Cuando se crea un enlace simb\u00f3lico en un archivo de configuraci\u00f3n, este se habilitar\u00e1 la pr\u00f3xima vez que se reinicie Apache2.</li> <li>mods-available: Este directorio contiene archivos de configuraci\u00f3n para cargar y configurar los m\u00f3dulos. Sin embargo, no todos los m\u00f3dulos tendr\u00e1n archivos de configuraci\u00f3n espec\u00edficos.</li> <li>mods-enabled: Contiene enlaces simb\u00f3licos a los archivos en <code>/etc/apache2/mods-available</code>. Cuando se crea un enlace simb\u00f3lico en un archivo de configuraci\u00f3n de m\u00f3dulo, este se habilitar\u00e1 la pr\u00f3xima vez que se reinicie Apache2.</li> <li>sites-available: Este directorio contiene los archivos de configuraci\u00f3n de los hosts virtuales de Apache2. Estos hosts permiten configurar Apache2 para varios sitios con configuraciones independientes.</li> <li>sites-enabled: Al igual que mods-enabled, sites-enabled contiene enlaces simb\u00f3licos al directorio <code>/etc/apache2/sites-available</code>. De igual forma, cuando se crea un enlace simb\u00f3lico en un archivo de configuraci\u00f3n, el sitio configurado por \u00e9l se activar\u00e1 al reiniciar Apache2.</li> </ul>  Directivas  <p>{#directivas}</p> <p>Para hacer las configuraciones se emplean las Directivas, estas son instrucciones al servidor Apache para controlar su funcionamiento. Una directiva consiste en un nombre seguido de uno o m\u00e1s argumentos. Se escriben en los archivos de configuraci\u00f3n como <code>httpd.conf</code>, <code>apache2.conf</code>, o dentro de bloques como <code>&lt;VirtualHost&gt;</code>, <code>&lt;Directory&gt;</code>, o incluso en archivos <code>.htaccess</code>.</p> <p>Ejemplo de directivas:</p> <pre><code>ServerAdmin webmaster@miweb.com\nDocumentRoot /var/www/html\nDirectoryIndex index.html index.php\nErrorLog ${APACHE_LOG_DIR}/error.log\n</code></pre> <p>Apache2 se entrega con una configuraci\u00f3n predeterminada \u201ccompatible con hosts virtuales\u201d: est\u00e1 configurado con un \u00fanico host virtual predeterminado (usando la directiva <code>VirtualHost</code>) que puede modificarse o usarse tal cual si tiene un solo sitio, o usarse como plantilla para hosts virtuales adicionales si tiene varios sitios.</p> <p>Si no se modifica, el host virtual predeterminado servir\u00e1 como su sitio predeterminado, o los usuarios del sitio ver\u00e1n si la URL que ingresan no coincide con la directiva <code>ServerName</code> de alguno de sus sitios personalizados. Para modificar el host virtual predeterminado, edite el archivo <code>/etc/apache2/sites-available/000-default.conf</code>.</p> <p>Las directivas establecidas para un host virtual solo se aplican a ese host virtual en particular.</p> <p>Para configurar un nuevo host o sitio virtual, se toma como plantilla el archivo <code>000-default.conf</code> en el mismo directorio con el nombre que elija. Por ejemplo: <pre><code>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/mynewsite.conf\n</code></pre></p>  M\u00f3dulos  <p>{#modulos}</p> <p>Los m\u00f3dulos de Apache2 son componentes que extienden las funcionalidades del servidor web Apache. Gracias a su arquitectura modular, Apache permite activar solo los m\u00f3dulos necesarios para cada proyecto, lo que mejora el rendimiento, la seguridad y la flexibilidad del servidor.</p> <p>Estos m\u00f3dulos pueden estar integrados de forma est\u00e1tica en el binario de Apache o cargarse din\u00e1micamente como objetos compartidos (DSO) durante la ejecuci\u00f3n. Cada m\u00f3dulo a\u00f1ade capacidades espec\u00edficas al servidor. Por ejemplo, algunos permiten ejecutar lenguajes como PHP (<code>mod_php</code>), habilitar HTTPS (<code>mod_ssl</code>), comprimir contenido (<code>mod_deflate</code>), o reescribir URLs (<code>mod_rewrite</code>). Otros se encargan de tareas como autenticaci\u00f3n (<code>mod_auth_basic</code>, <code>mod_auth_digest</code>), cach\u00e9 (<code>mod_cache</code>), control de acceso (<code>mod_access_compat</code>), o incluso convertir Apache en un proxy inverso (<code>mod_proxy</code>).</p> <p>Entre los m\u00f3dulos m\u00e1s importantes y com\u00fanmente utilizados est\u00e1n:</p> <ul> <li>mod_rewrite: permite reescribir URLs din\u00e1micamente, ideal para crear URLs amigables.</li> <li>mod_ssl: habilita el soporte para conexiones seguras HTTPS mediante SSL/TLS.</li> <li>mod_proxy: convierte Apache en un proxy o proxy inverso, \u00fatil para redirigir peticiones a otros servidores backend.</li> <li>mod_deflate: comprime el contenido antes de enviarlo al cliente, mejorando la velocidad de carga.</li> <li>mod_php: permite ejecutar scripts PHP directamente desde Apache.</li> <li>mod_auth_basic / mod_auth_digest: proporcionan autenticaci\u00f3n por usuario y contrase\u00f1a.</li> <li>mod_cache: mejora el rendimiento al almacenar contenido en cach\u00e9.</li> <li>mod_status: ofrece una vista en tiempo real del estado del servidor.</li> <li>mod_security: act\u00faa como firewall de aplicaciones web, protegiendo contra ataques como XSS o inyecciones SQL.</li> </ul> <p>La gesti\u00f3n de estos m\u00f3dulos se realiza mediante comandos como <code>a2enmod</code> (para habilitar) y <code>a2dismod</code> (para deshabilitar), y su configuraci\u00f3n se define en archivos como <code>apache2.conf</code>, <code>httpd.conf</code> o dentro de bloques.</p>"},{"location":"concepts/network/hosting/apache.html#servidor-web","title":"Servidor Web","text":"<p>Apache funciona como un intermediario entre los usuarios y los archivos almacenados en un servidor. Cuando un navegador solicita una p\u00e1gina web, Apache procesa esa petici\u00f3n (HTTP request), busca el recurso solicitado (HTML, im\u00e1genes, CSS, etc.) en el sistema de archivos y lo env\u00eda como respuesta (HTTP response).</p> <p>Apache2 puede servir tanto sitios web est\u00e1ticos (HTML, CSS, JS) como sitios din\u00e1micos, pero con una condici\u00f3n importante:</p> <ul> <li>Para sitios din\u00e1micos desarrollados en PHP o Python, Apache puede ejecutar el c\u00f3digo directamente mediante m\u00f3dulos como <code>mod_php</code> o <code>mod_wsgi</code>.</li> <li>En cambio, para aplicaciones desarrolladas en Node.js, Apache no puede ejecutarlas directamente. En estos casos, se utiliza Apache como proxy inverso, redirigiendo las peticiones HTTP al servidor Node.js que corre por separado (por ejemplo, en el puerto 3000).</li> </ul>  Servir un solo sitio web  <p>{#servir-un-solo-sitio-web}</p>  Requisitos previos  <p>{#requisitos-previos}</p> <ul> <li>Tener instalado Apache2 en el servidor Ubuntu con <code>sudo apt install apache2</code>.</li> <li>Tener instalado git (para clonar repositorios de ser necesario).</li> <li>Tener acceso con permisos de superusuario (sudo).</li> <li>Tener listos los archivos est\u00e1ticos (HTML, CSS, JS, im\u00e1genes, etc.).</li> </ul> Paso 1: Crear el directorio donde se almacenar\u00e1n los archivos est\u00e1ticos <p>{#paso-1-directorio-archivos-estaticos}</p> <p>En este directorio se puede clonar el repositorio que contenga los archivos con <code>git clone &lt;link-repositorio&gt;</code>.</p> <pre><code>sudo mkdir -p /var/www/mynewsite.com\n</code></pre> Paso 2: Crear un archivo de configuraci\u00f3n para el virtual host <p>{#paso-2-archivo-configuracion-virtual-host}</p> <p>Siguiendo la sugerencia que propone la documentaci\u00f3n se realiza una copia del archivo que ya trae por defecto Apache y se emplea como plantilla:</p> <pre><code>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/mynewsite.conf\n</code></pre> Paso 3: Configurar apache para servir el directorio del sitio <p>{#paso-3-configurar-apache-directorio-sitio}</p> <p>El bloque <code>&lt;VirtualHost *:80&gt;</code> indica que Apache atender\u00e1 solicitudes HTTP (puerto 80) en cualquier IP disponible del servidor. Dentro de este bloque se definen todas las configuraciones espec\u00edficas para un sitio web.</p> <ul> <li><code>ServerAdmin</code> establece el correo del administrador del sitio. Este correo puede aparecer en p\u00e1ginas de error para que los usuarios lo contacten en caso de problemas.</li> <li><code>ServerName</code> define el nombre de dominio principal que Apache usar\u00e1 para identificar este sitio, por ejemplo, midominio.com. Por su parte, <code>ServerAlias</code> permite a\u00f1adir nombres alternativos, como www.midominio.com, para que tambi\u00e9n apunten al mismo sitio.</li> <li><code>DocumentRoot</code> indica la carpeta donde se encuentran los archivos del sitio (HTML, CSS, im\u00e1genes, etc.). Apache usar\u00e1 esta ruta para buscar el contenido que debe mostrar al usuario.</li> <li><code>ErrorLog</code> y <code>CustomLog</code> especifican d\u00f3nde se almacenar\u00e1n los registros de errores y accesos, respectivamente. Estos archivos ayudan a monitorear el funcionamiento del sitio y detectar problemas.</li> </ul> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerAdmin webmaster@mynewsite\n    ServerName mynewsite\n    ServerAlias www.mynewsite\n    DocumentRoot /var/www/mynewsite\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> Paso 4: Habilitar el sitio y reiniciar apache <p>{#paso-4-habilitar-sitio-reiniciar-apache}</p> <pre><code>sudo a2ensite mynewsite\nsudo systemctl restart apache2.service\n</code></pre>  Servir m\u00e1s de un sitio web  <p>{#servir-mas-de-un-sitio-web}</p> <p>Apache utiliza los Virtual Hosts para manejar m\u00faltiples sitios web en un mismo servidor. Cada <code>&lt;VirtualHost&gt;</code> debe tener un <code>ServerName</code> \u00fanico (o combinado con <code>ServerAlias</code>) para evitar conflictos. Si dos VirtualHosts comparten el mismo <code>ServerName</code> y puerto, Apache usar\u00e1 el primero que encuentre en la configuraci\u00f3n, ignorando el segundo. Es fundamental que cada sitio web tenga su propia configuraci\u00f3n con dominios o subdominios distintos para que Apache pueda enrutar las peticiones correctamente.</p> <p>Adem\u00e1s, los VirtualHosts pueden diferenciarse por puertos (como <code>*:80</code> para HTTP y <code>*:443</code> para HTTPS) o direcciones IP (si el servidor tiene varias). Esto permite, por ejemplo, tener un mismo dominio respondiendo de forma distinta seg\u00fan el protocolo (HTTP vs. HTTPS) o la IP de acceso. Sin embargo, la forma m\u00e1s com\u00fan es usar el mismo puerto (generalmente el 80 o 443) y distinguir los sitios mediante el nombre de dominio en la cabecera Host de la petici\u00f3n HTTP.</p> <p>Cuando Apache recibe una solicitud, sigue este orden para decidir qu\u00e9 VirtualHost usar:</p> <ol> <li>Compara la cabecera Host de la petici\u00f3n con los <code>ServerName</code> y <code>ServerAlias</code> definidos en los VirtualHosts. Si coincide, sirve ese sitio.</li> <li>Si no hay coincidencia, usa el primer VirtualHost definido en la configuraci\u00f3n (por orden de carga en <code>sites-enabled/</code>). Este act\u00faa como \"VirtualHost por defecto\".</li> <li>Si no hay ning\u00fan VirtualHost configurado, Apache usa su configuraci\u00f3n global (generalmente el contenido de <code>/var/www/html</code>).</li> </ol> <p>Para la configuraci\u00f3n se repite el mismo proceso para servir 1 sitio web, es decir, se debe crear un directorio propio y el archivo de configuraci\u00f3n del virtual host. Todos los archivos de conf se deben alojar en <code>/etc/apache2/sites-available</code>.</p>"},{"location":"concepts/network/hosting/apache.html#proxy-inverso","title":"Proxy inverso Directivas Clave y su Configuraci\u00f3n  Configuraci\u00f3n B\u00e1sica de Proxy Inverso en Apache","text":"<p>Un proxy inverso es un servidor que recibe solicitudes de clientes y las redirige a uno o m\u00e1s servidores backend, ocultando la infraestructura real. A diferencia de un proxy tradicional (que protege a los clientes), un proxy inverso protege y gestiona los servidores backend.</p> <p>Casos de uso comunes:</p> <ul> <li>Balanceo de carga: Distribuir tr\u00e1fico entre m\u00faltiples servidores.</li> <li>Terminaci\u00f3n SSL: Manejar HTTPS en el proxy y comunicarse con backends en HTTP.</li> <li>Cach\u00e9 de contenido: Mejorar el rendimiento almacenando respuestas est\u00e1ticas.</li> <li>Seguridad: Ocultar servidores internos y filtrar ataques (DDoS, inyecciones).</li> <li>Enrutamiento basado en rutas: Redirigir <code>/app1</code> a un backend y <code>/app2</code> a otro.</li> </ul> Requisitos previos <p>{#requisitos-previos-proxy}</p> <ul> <li>Servidor con Apache instalado (versi\u00f3n 2.4 o superior recomendada)</li> <li>M\u00f3dulos <code>mod_proxy</code> y <code>mod_proxy_http</code> habilitados</li> <li>Acceso a la configuraci\u00f3n del servidor (generalmente requiere privilegios de root/sudo)</li> </ul>  M\u00f3dulos Requeridos y su Funci\u00f3n <p>{#modulos-requeridos-funcion}</p>  M\u00f3dulos Principales <p>{#modulos-principales}</p> M\u00f3dulo Descripci\u00f3n Uso T\u00edpico <code>mod_proxy</code> N\u00facleo de funcionalidad proxy Habilita capacidades b\u00e1sicas de proxy <code>mod_proxy_http</code> Soporte para HTTP/HTTPS Proxy para aplicaciones web (HTTP backends) <code>mod_proxy_balancer</code> Balanceo de carga Distribuci\u00f3n de tr\u00e1fico entre m\u00faltiples servidores <code>mod_lbmethod_byrequests</code> Algoritmos de balanceo Implementa round-robin y otros m\u00e9todos <code>mod_headers</code> Manipulaci\u00f3n de headers Modificar encabezados HTTP (X-Forwarded-For, etc.) <code>mod_ssl</code> Soporte SSL/TLS Terminaci\u00f3n SSL en el proxy <p>Comando para activarlos:</p> <pre><code>sudo a2enmod proxy proxy_http proxy_balancer lbmethod_byrequests headers ssl\nsudo systemctl restart apache2\n</code></pre> <p>{#directivas-clave-configuracion}</p>  Directivas Fundamentales  <p>{#directivas-fundamentales}</p> Directiva Par\u00e1metros Descripci\u00f3n Ejemplo <code>ProxyPass</code> <code>&lt;ruta&gt; &lt;url-backend&gt;</code> Mapea rutas a servidores backend <code>ProxyPass \"/app\" \"http://backend:8080\"</code> <code>ProxyPassReverse</code> <code>&lt;ruta&gt; &lt;url-backend&gt;</code> Corrige URLs en respuestas del backend <code>ProxyPassReverse \"/app\" \"http://backend:8080\"</code> <code>ProxyPreserveHost</code> <code>On\\|Off</code> Mantiene el header <code>Host</code> original <code>ProxyPreserveHost On</code> <code>ProxyRequests</code> <code>On\\|Off</code> No usar en proxy inverso (solo para proxy forward) <code>ProxyRequests Off</code> <code>ProxyVia</code> <code>On\\|Off\\|Full</code> Controla el header <code>Via</code> en solicitudes <code>ProxyVia On</code>  Directivas Avanzadas  <p>{#directivas-avanzadas}</p> Directiva Uso <code>ProxyTimeout</code> Define timeout para conexiones backend (ej: <code>ProxyTimeout 60</code>) <code>ProxyIOBufferSize</code> Tama\u00f1o del buffer para respuestas (ej: <code>ProxyIOBufferSize 8192</code>) <code>ProxyErrorOverride</code> Permite a Apache manejar errores HTTP del backend <code>RequestHeader</code> Modifica/agrega headers (ej: <code>RequestHeader set X-Forwarded-Proto \"https\"</code>) <p>{#configuracion-basica-proxy-inverso}</p> <p>Edita el archivo de configuraci\u00f3n (generalmente en <code>/etc/apache2/sites-available/000-default.conf</code> o similar):</p>  Ejemplo Completo (Archivo de VirtualHost)  <p>{#ejemplo-completo-virtualhost}</p> <pre><code>&lt;VirtualHost *:80&gt;\n    # Dominio que recibir\u00e1 las peticiones\n    ServerName mi-app.com\n\n    # Activar funcionalidad de proxy\n    ProxyPreserveHost On\n\n    # Redirecci\u00f3n principal al backend\n    ProxyPass \"/\" \"http://localhost:3000/\"\n    ProxyPassReverse \"/\" \"http://localhost:3000/\"\n\n    # Configuraci\u00f3n de logs\n    ErrorLog ${APACHE_LOG_DIR}/mi-app-error.log\n    CustomLog ${APACHE_LOG_DIR}/mi-app-access.log combined\n&lt;/VirtualHost&gt;\n</code></pre>  Activaci\u00f3n del Proxy  <p>{#activacion-proxy}</p> <p><pre><code>ProxyPreserveHost On\n</code></pre> - Funci\u00f3n clave: Mantiene el header <code>Host</code> original de la solicitud del cliente al enviarla al backend.   - Sin esto, el backend recibir\u00eda <code>Host: localhost:3000</code> en lugar de <code>Host: mi-app.com</code>.   - Esencial para aplicaciones que usan host-based routing.</p>  Redirecci\u00f3n al Backend  <p>{#redireccion-backend}</p> <pre><code>ProxyPass \"/\" \"http://localhost:3000/\"\nProxyPassReverse \"/\" \"http://localhost:3000/\"\n</code></pre> Directiva Funci\u00f3n <code>ProxyPass</code> Redirige todas las peticiones (<code>/</code>) al servidor backend en <code>http://localhost:3000/</code>. <code>ProxyPassReverse</code> Corrige URLs en respuestas del backend (como redirecciones HTTP o headers <code>Location</code>). <p>Ejemplo pr\u00e1ctico: - Si el backend devuelve <code>Location: http://localhost:3000/login</code>, el proxy lo reescribir\u00e1 como <code>Location: http://mi-app.com/login</code>.</p>"},{"location":"concepts/network/hosting/apache.html#balanceador-carga","title":"Balanceador de carga","text":"<p>Un balanceador de carga distribuye peticiones entre m\u00faltiples servidores backend para:</p> <ul> <li>Aumentar disponibilidad: Si un servidor falla, otros siguen atendiendo.</li> <li>Mejorar rendimiento: Distribuye el tr\u00e1fico equitativamente.</li> <li>Escalar horizontalmente: A\u00f1adir m\u00e1s servidores bajo demanda.</li> </ul>  M\u00f3dulos Requeridos  <p>{#modulos-requeridos-balanceo}</p> <p>Para activarlos se emplea: </p> <pre><code>sudo a2enmod proxy proxy_http proxy_balancer lbmethod_byrequests\nsudo systemctl restart apache2\n</code></pre> M\u00f3dulo Funci\u00f3n <code>mod_proxy_balancer</code> Soporte para balanceo de carga <code>lbmethod_byrequests</code> Algoritmo de distribuci\u00f3n (round-robin)  Configuraci\u00f3n B\u00e1sica  <p>{#configuracion-basica-balanceo}</p> Ejemplo: Balanceo Round-Robin (por peticiones) <p>{#ejemplo-balanceo-round-robin}</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName mi-app.com\n\n    &lt;Proxy balancer://mycluster&gt;\n        # Servidores backend (m\u00ednimo 2)\n        BalancerMember http://192.168.1.10:8080\n        BalancerMember http://192.168.1.11:8080\n\n        # M\u00e9todo de balanceo (opcional, por defecto es byrequests)\n        ProxySet lbmethod=byrequests\n    &lt;/Proxy&gt;\n\n    ProxyPass \"/\" \"balancer://mycluster/\"\n    ProxyPassReverse \"/\" \"balancer://mycluster/\"\n&lt;/VirtualHost&gt;\n</code></pre> Par\u00e1metros Clave <p>{#parametros-clave}</p> Directiva Descripci\u00f3n <code>BalancerMember</code> Define un servidor backend (IP:puerto). <code>lbmethod=byrequests</code> Distribuye peticiones en orden rotativo (round-robin). <code>ProxyPass</code> Enruta tr\u00e1fico al cluster definido.  Algoritmos de Balanceo  <p>{#algoritmos-balanceo}</p> <p>Apache soporta varios m\u00e9todos:</p> A. Round-Robin (`byrequests`) <p>{#round-robin-byrequests}</p> <p><pre><code>ProxySet lbmethod=byrequests\n</code></pre> - C\u00f3mo funciona: Distribuye peticiones secuencialmente (1\u21922\u21923\u21921\u21922...). - Ideal para: Cargas homog\u00e9neas (servidores con igual capacidad).</p> B. Por Tr\u00e1fico (`bytraffic`) <p>{#por-trafico-bytraffic}</p> <p><pre><code>ProxySet lbmethod=bytraffic\n</code></pre> - C\u00f3mo funciona: Distribuye basado en el ancho de banda usado por cada backend. - Ideal para: Servidores con anchos de banda desiguales.</p> C. Por Ocupaci\u00f3n (`bybusyness`) <p>{#por-ocupacion-bybusyness}</p> <p><pre><code>ProxySet lbmethod=bybusyness\n</code></pre> - C\u00f3mo funciona: Prioriza servidores con menos conexiones activas. - Ideal para: Evitar sobrecarga en servidores lentos.</p> B. Ponderaci\u00f3n de Servidores <p>{#ponderacion-servidores}</p> <p><pre><code>BalancerMember http://backend1:8080 loadfactor=3\nBalancerMember http://backend2:8080 loadfactor=1\n</code></pre> - Efecto: <code>backend1</code> recibir\u00e1 3 veces m\u00e1s tr\u00e1fico que <code>backend2</code>. - Uso t\u00edpico: Servidores con capacidades diferentes.</p> C. Timeouts y Reintentos <p>{#timeouts-reintentos}</p> <pre><code>ProxySet timeout=30 retry=60\n</code></pre> Par\u00e1metro Descripci\u00f3n <code>timeout</code> Tiempo de espera (segundos) para conexi\u00f3n al backend. <code>retry</code> Tiempo (segundos) antes de reintentar con un backend ca\u00eddo.  Monitoreo del Balanceador  <p>{#monitoreo-balanceador}</p>  Interfaz de Estado (Requiere `mod_status`) <p>{#interfaz-estado-mod-status}</p> <p><pre><code>&lt;Location \"/balancer-manager\"&gt;\n    SetHandler balancer-manager\n    Require host ejemplo.com  # Restringir acceso\n&lt;/Location&gt;\n</code></pre> - URL: <code>http://tuserver.com/balancer-manager</code> - Muestra:   - Estado de cada <code>BalancerMember</code>.   - Tr\u00e1fico asignado.   - Errores detectados.</p>"},{"location":"concepts/network/hosting/nginx.html","title":"Nginx","text":""},{"location":"concepts/network/hosting/nginx.html#que-es-nginx","title":"\u00bfQu\u00e9 es Nginx?","text":"Logo de Nginx <p>Nginx es un servidor web de alto rendimiento, de c\u00f3digo abierto, que tambi\u00e9n act\u00faa como:</p> <ul> <li>Proxy inverso</li> <li>Balanceador de carga</li> <li>Servidor de archivos est\u00e1ticos</li> <li>Terminador TLS/SSL</li> <li>Cach\u00e9 de contenido</li> <li>Gateway de aplicaciones</li> </ul> <p>Fue desarrollado por Igor Sysoev en 2004 y es ampliamente utilizado por su eficiencia en la gesti\u00f3n de m\u00faltiples conexiones concurrentes gracias a su arquitectura basada en eventos y no bloqueante.</p>"},{"location":"concepts/network/hosting/nginx.html#para-que-sirve-nginx","title":"\u00bfPara qu\u00e9 Sirve Nginx?","text":"Funcionalidad Descripci\u00f3n Servidor Web Sirve archivos est\u00e1ticos (HTML, CSS, JS, im\u00e1genes). Proxy Inverso Redirige solicitudes al backend (por ejemplo, Node.js, Python, etc.). Balanceador de Carga Distribuye tr\u00e1fico entre varios servidores para mejorar rendimiento. Terminador TLS/SSL Gestiona conexiones HTTPS y maneja certificados. Cach\u00e9 de contenido Guarda respuestas en memoria o disco para acelerar tiempos de carga. Redirecci\u00f3n y Reescritura Permite reescribir URLs o redirigir tr\u00e1fico seg\u00fan reglas. Protecci\u00f3n y Seguridad Controla acceso, oculta tecnolog\u00edas backend y limita el ancho de banda."},{"location":"concepts/network/hosting/nginx.html#arquitectura-de-nginx","title":"Arquitectura de Nginx","text":"<p>Nginx usa un modelo as\u00edncrono y basado en eventos con procesos worker. Esto permite manejar miles de conexiones simult\u00e1neas con pocos recursos:</p> <ul> <li>Proceso maestro: carga configuraci\u00f3n y gestiona procesos worker.</li> <li>Procesos worker: manejan las conexiones de red reales.</li> </ul>"},{"location":"concepts/network/hosting/nginx.html#casos-de-uso-comunes","title":"Casos de Uso Comunes","text":"<ol> <li> <p>Frontend + Backend: Nginx sirve los archivos frontend (React, Angular, Vue) y redirige <code>/api</code> al backend.</p> </li> <li> <p>Microservicios: Redirige peticiones a distintos contenedores o servidores seg\u00fan la ruta o subdominio.</p> </li> <li> <p>Certificados SSL: Nginx maneja TLS/SSL y se comunica con los backends en HTTP.</p> </li> <li> <p>Balanceo de carga: Distribuye tr\u00e1fico entre varios servidores (round-robin, least_conn, ip_hash).</p> </li> <li> <p>Gateway para contenedores: Punto de entrada para servicios en Docker o Kubernetes.</p> </li> </ol>"},{"location":"concepts/network/hosting/nginx.html#ejemplo-de-configuracion-basica-como-proxy-inverso","title":"Ejemplo de configuraci\u00f3n b\u00e1sica como proxy inverso","text":"<pre><code>server {\n    listen 80;\n    server_name midominio.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre>"},{"location":"concepts/network/hosting/nginx.html#balanceo-de-carga","title":"Balanceo de Carga","text":"<pre><code>upstream mi_cluster {\n    server backend1:3000;\n    server backend2:3000;\n}\n\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://mi_cluster;\n    }\n}\n</code></pre>"},{"location":"concepts/network/hosting/nginx.html#algoritmos-soportados","title":"Algoritmos Soportados","text":"<ul> <li><code>round-robin</code> (por defecto)</li> <li><code>least_conn</code></li> <li><code>ip_hash</code></li> </ul>"},{"location":"concepts/network/hosting/nginx.html#soporte-para-https-tls-ssl","title":"Soporte para HTTPS (TLS/SSL)","text":"<pre><code>server {\n    listen 443 ssl;\n    server_name midominio.com;\n\n    ssl_certificate /etc/nginx/ssl/fullchain.pem;\n    ssl_certificate_key /etc/nginx/ssl/privkey.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://localhost:3000;\n    }\n}\n</code></pre>"},{"location":"concepts/network/hosting/nginx.html#ventajas-de-nginx","title":"Ventajas de Nginx","text":"<ul> <li>Altamente eficiente y ligero</li> <li>Escalable con pocos recursos</li> <li>Compatible con HTTP/1.1, HTTP/2 y TLS</li> <li>Popular en entornos de alta demanda (empresas como Netflix, Dropbox, GitHub lo usan)</li> <li>Gran soporte para contenedores (Docker)</li> </ul>"},{"location":"concepts/network/hosting/nginx.html#diferencias-con-apache","title":"Diferencias con Apache","text":"Caracter\u00edstica Nginx Apache Modelo de procesos As\u00edncrono, basado en eventos Multiproceso o multiproceso-thread Rendimiento est\u00e1tico Muy alto Bueno, pero menor que Nginx Reescrituras Menos flexible Muy potente con <code>.htaccess</code> Uso de recursos Bajo Medio/alto"},{"location":"concepts/network/hosting/nginx.html#seguridad","title":"Seguridad","text":"<ul> <li>Compatible con encabezados de seguridad (<code>X-Frame-Options</code>, <code>Content-Security-Policy</code>)</li> <li>Puede limitar ancho de banda por IP o ruta</li> <li>Permite autenticaci\u00f3n b\u00e1sica o con JWT</li> <li>Se integra con firewalls de aplicaciones web (WAFs)</li> </ul>"},{"location":"concepts/network/hosting/virtual-host.html","title":"Virtual Host","text":""},{"location":"concepts/network/hosting/virtual-host.html#que-es-un-virtual-host","title":"\u00bfQu\u00e9 es un Virtual Host?","text":"<p>Un Virtual Host (Host Virtual) es una t\u00e9cnica que permite alojar m\u00faltiples sitios web o dominios en un \u00fanico servidor, utilizando una misma direcci\u00f3n IP. Esto se logra mediante la configuraci\u00f3n del servidor web (como Apache o Nginx) para que responda de manera diferente seg\u00fan el dominio o subdominio solicitado.</p> <p>Existen dos tipos principales de Virtual Hosts:</p>"},{"location":"concepts/network/hosting/virtual-host.html#virtual-host-basado-en-nombre","title":"Virtual Host Basado en Nombre (Name-based Virtual Host)","text":"<p>Este tipo de Virtual Host utiliza el campo Host en la cabecera HTTP para determinar qu\u00e9 sitio web debe servir el servidor. Esto significa que m\u00faltiples dominios pueden compartir una misma direcci\u00f3n IP, ya que el servidor distingue las solicitudes seg\u00fan el nombre de dominio. Por ejemplo, si un servidor tiene configurados sitio1.com y sitio2.com en la misma IP, cuando un usuario accede a sitio1.com, el servidor revisa la cabecera HTTP y sirve el contenido correspondiente.</p> <p>La principal ventaja de este m\u00e9todo es que ahorra direcciones IP, ya que no requiere una IP exclusiva para cada sitio. Adem\u00e1s, simplifica la administraci\u00f3n, especialmente en entornos con muchos dominios. Sin embargo, una limitaci\u00f3n es que no funciona con protocolos antiguos que no env\u00edan la cabecera Host, como algunas conexiones SSL/TLS muy antiguas (aunque hoy en d\u00eda esto es raro debido al uso de SNI - Server Name Indication).</p>"},{"location":"concepts/network/hosting/virtual-host.html#virtual-host-basado-en-ip","title":"Virtual Host Basado en IP (IP-based Virtual Host)","text":"<p>En este caso, cada sitio web tiene asignada una direcci\u00f3n IP \u00fanica, y el servidor responde seg\u00fan la IP a la que se dirige la solicitud. Por ejemplo, si sitio1.com usa la IP 192.168.1.10 y sitio2.com usa 192.168.1.11, el servidor entrega el contenido correspondiente seg\u00fan la IP de destino.</p> <p>La principal ventaja de este enfoque es que es compatible con cualquier protocolo, incluso aquellos que no soportan la cabecera Host (como ciertas configuraciones antiguas de SSL). Sin embargo, su desventaja es que requiere m\u00faltiples direcciones IP, lo que puede ser costoso o complicado en entornos con IPv4 limitadas. Adem\u00e1s, su administraci\u00f3n es menos escalable cuando se manejan muchos dominios.</p>"},{"location":"concepts/network/hosting/virtual-host.html#casos-de-uso","title":"Casos de Uso","text":"<p>Los Virtual Hosts son \u00fatiles en escenarios como:</p> <ul> <li>Hospedar m\u00faltiples sitios en un solo servidor: Ideal para empresas de hosting o desarrolladores que gestionan varios proyectos.</li> <li>Separar entornos (producci\u00f3n, desarrollo, testing): Usando subdominios como <code>dev.misitio.com</code> o <code>test.misitio.com</code>.</li> <li>Optimizar recursos: Evita la necesidad de tener un servidor dedicado para cada sitio web.</li> <li>Sitios multi-idioma o regionales: Ejemplo: <code>es.misitio.com</code>, <code>en.misitio.com</code>.</li> </ul>"},{"location":"concepts/network/hosting/virtual-host.html#que-se-necesita-para-configurar-un-virtual-host","title":"\u00bfQu\u00e9 se necesita para configurar un Virtual Host?","text":"<p>Dependiendo del servidor web, los requisitos y pasos var\u00edan:</p>"},{"location":"concepts/network/hosting/virtual-host.html#en-apache-http-server","title":"En Apache HTTP Server","text":"<ul> <li>Tener Apache instalado.</li> <li>Acceso al archivo de configuraci\u00f3n (<code>httpd.conf</code> o <code>apache2.conf</code>).</li> <li>Permisos para editar archivos en <code>/etc/apache2/sites-available/</code> (en Linux).</li> </ul> <p>Ejemplo de configuraci\u00f3n:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName midominio.com\n    ServerAlias www.midominio.com\n    DocumentRoot /var/www/midominio\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <p>Luego, habilitar el sitio con:</p> <pre><code>sudo a2ensite midominio.conf\nsudo systemctl reload apache2\n</code></pre>"},{"location":"concepts/network/hosting/virtual-host.html#en-nginx","title":"En Nginx","text":"<ul> <li>Tener Nginx instalado.</li> <li>Acceso a <code>/etc/nginx/sites-available/</code>.</li> </ul> <p>Ejemplo de configuraci\u00f3n:</p> <pre><code>server {\n    listen 80;\n    server_name midominio.com www.midominio.com;\n    root /var/www/midominio;\n    index index.html;\n\n    access_log /var/log/nginx/midominio.access.log;\n    error_log /var/log/nginx/midominio.error.log;\n}\n</code></pre> <p>Luego, crear un enlace simb\u00f3lico y reiniciar Nginx:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/midominio /etc/nginx/sites-enabled/\nsudo systemctl restart nginx\n</code></pre>"},{"location":"concepts/network/protocols/security/ssl-tls.html","title":"SSL/TLS","text":""},{"location":"concepts/network/protocols/security/ssl-tls.html#que-es-ssl-tls","title":"\u00bfQu\u00e9 es SSL/TLS?","text":"<p>SSL (Secure Sockets Layer) y TLS (Transport Layer Security) son protocolos criptogr\u00e1ficos dise\u00f1ados para proteger la comunicaci\u00f3n entre dos sistemas a trav\u00e9s de una red, generalmente Internet. TLS es el sucesor de SSL y, aunque muchas veces se utilizan como sin\u00f3nimos, actualmente el protocolo est\u00e1ndar es TLS (en versiones modernas como TLS 1.2 o TLS 1.3), ya que SSL ha quedado obsoleto por razones de seguridad.</p> <p>Estos protocolos aseguran que los datos enviados entre un cliente (como un navegador web) y un servidor no puedan ser le\u00eddos, modificados o interceptados por terceros.</p>"},{"location":"concepts/network/protocols/security/ssl-tls.html#para-que-sirve-ssl-tls","title":"\u00bfPara qu\u00e9 sirve SSL/TLS?","text":"<p>SSL/TLS cumple principalmente con tres objetivos:</p> <ol> <li>Cifrado: Los datos transmitidos est\u00e1n protegidos y no pueden ser le\u00eddos por intermediarios.</li> <li>Autenticaci\u00f3n: Verifica la identidad del servidor (y opcionalmente del cliente) mediante certificados digitales.</li> <li>Integridad: Asegura que los datos no sean alterados durante la transmisi\u00f3n.</li> </ol> <p>En esencia, SSL/TLS proporciona una conexi\u00f3n segura sobre protocolos como HTTP, SMTP, FTP, etc. El ejemplo m\u00e1s com\u00fan es HTTPS, que es HTTP sobre TLS.</p>"},{"location":"concepts/network/protocols/security/ssl-tls.html#casos-de-uso-comunes","title":"Casos de uso comunes","text":"<ul> <li>Navegaci\u00f3n web segura (HTTPS): Protecci\u00f3n de credenciales, formularios, cookies y datos personales.</li> <li>Correos electr\u00f3nicos (SMTPS, IMAPS, POP3S): Cifrado del contenido del correo y autenticaci\u00f3n del servidor de correo.</li> <li>VPNs: Algunas VPN utilizan TLS como parte de su mecanismo de seguridad (como OpenVPN).</li> <li>Conexiones seguras en APIs REST y SOAP: Protecci\u00f3n de comunicaciones entre servicios y aplicaciones.</li> <li>Autenticaci\u00f3n de clientes y servidores mediante certificados digitales: En sistemas corporativos o financieros.</li> <li>Protocolo LDAP seguro (LDAPS): Usado en entornos de directorios para autenticaci\u00f3n segura.</li> </ul>"},{"location":"concepts/network/protocols/security/ssl-tls.html#funcionamiento-general","title":"Funcionamiento general","text":"<ol> <li>Inicio de la conexi\u00f3n: Cliente y servidor inician un \"handshake\" TLS.</li> <li>Intercambio de certificados: El servidor presenta su certificado digital.</li> <li>Verificaci\u00f3n del certificado: El cliente verifica que el certificado es v\u00e1lido y confiable.</li> <li>Negociaci\u00f3n de claves: Se establece una clave compartida para cifrar la sesi\u00f3n.</li> <li>Transmisi\u00f3n cifrada: A partir de ah\u00ed, toda la comunicaci\u00f3n es segura y cifrada.</li> </ol>"},{"location":"concepts/network/protocols/security/ssl-tls.html#conclusion","title":"Conclusi\u00f3n","text":"<p>SSL/TLS es la base de la seguridad en Internet. A trav\u00e9s del cifrado, la autenticaci\u00f3n y la garant\u00eda de integridad, permite establecer canales seguros de comunicaci\u00f3n entre clientes y servidores, lo que es fundamental para proteger informaci\u00f3n sensible como contrase\u00f1as, datos bancarios, archivos privados y m\u00e1s. Aunque el t\u00e9rmino SSL sigue us\u00e1ndose por costumbre, es TLS el protocolo que actualmente mantiene la seguridad de la web moderna, siendo indispensable para cualquier sitio o aplicaci\u00f3n que maneje informaci\u00f3n de usuarios o realice transacciones en l\u00ednea.</p> <p>Desde proteger una simple p\u00e1gina web hasta asegurar sistemas complejos de autenticaci\u00f3n o intercambio de datos entre servicios, TLS es un componente esencial de cualquier arquitectura segura en red.</p>"},{"location":"concepts/network/security/firewall/ufw.html","title":"UFW (Uncomplicated Firewall)","text":""},{"location":"concepts/network/security/firewall/ufw.html#que-es-ufw","title":"\u00bfQu\u00e9 es UFW?","text":"<p>UFW (Uncomplicated Firewall) es una herramienta de firewall dise\u00f1ada para simplificar la configuraci\u00f3n de iptables, el sistema de filtrado de paquetes predeterminado en Linux. Est\u00e1 especialmente pensado para usuarios que no son expertos en seguridad pero necesitan proteger sus sistemas de manera eficiente.</p>"},{"location":"concepts/network/security/firewall/ufw.html#para-que-sirve","title":"\u00bfPara qu\u00e9 sirve?","text":"<ul> <li>Bloquear o permitir conexiones entrantes y salientes.</li> <li>Proteger el sistema contra accesos no autorizados.</li> <li>Configurar reglas b\u00e1sicas de red sin necesidad de manejar iptables directamente.</li> <li>Ideal para servidores y equipos personales con Linux.</li> </ul>"},{"location":"concepts/network/security/firewall/ufw.html#como-funciona","title":"\u00bfC\u00f3mo funciona?","text":"<p>UFW act\u00faa como una capa simplificada sobre iptables, permitiendo definir reglas de firewall con comandos sencillos. Trabaja con los siguientes conceptos b\u00e1sicos:</p> <ul> <li>Reglas de entrada (incoming): Controlan qu\u00e9 conexiones pueden acceder al sistema.</li> <li>Reglas de salida (outgoing): Definen qu\u00e9 conexiones pueden salir del sistema.</li> <li>Perfiles por aplicaci\u00f3n: Algunos servicios (como Apache o SSH) tienen reglas predefinidas.</li> </ul>"},{"location":"concepts/network/security/firewall/ufw.html#comandos-basicos-ufw","title":"Comandos B\u00e1sicos de UFW","text":""},{"location":"concepts/network/security/firewall/ufw.html#instalacion-activacion","title":"Instalaci\u00f3n y Activaci\u00f3n","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install ufw  # Instalar UFW (en Debian/Ubuntu)\nsudo ufw enable                         # Activar el firewall\nsudo ufw disable                        # Desactivar el firewall\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#ver-estado-firewall","title":"Ver estado del firewall","text":"<pre><code>sudo ufw status              # Muestra reglas activas\nsudo ufw status verbose      # Muestra detalles extendidos\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#politicas-por-defecto","title":"Pol\u00edticas por defecto","text":"<pre><code>sudo ufw default deny incoming   # Bloquear todo el tr\u00e1fico entrante\nsudo ufw default allow outgoing  # Permitir todo el tr\u00e1fico saliente\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#permitir-por-puerto-servicio","title":"Permitir tr\u00e1fico por puerto o servicio","text":"<pre><code>sudo ufw allow 22           # SSH\nsudo ufw allow 80           # HTTP\nsudo ufw allow 443          # HTTPS\nsudo ufw allow 3306         # MySQL\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#permitir-desde-ip-especifica","title":"Permitir desde una IP espec\u00edfica","text":"<pre><code>sudo ufw allow from 192.168.1.100\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#permitir-desde-ip-a-puerto-especifico","title":"Permitir desde una IP a un puerto espec\u00edfico","text":"<pre><code>sudo ufw allow from 192.168.1.100 to any port 22\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#permitir-rango-ip","title":"Permitir un rango de IP","text":"<pre><code>sudo ufw allow from 192.168.0.0/24\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#permitir-por-interfaz-red","title":"Permitir por interfaz de red (ej: eth0)","text":"<pre><code>sudo ufw allow in on eth0 to any port 80\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#denegar-trafico","title":"Denegar tr\u00e1fico","text":"<pre><code>sudo ufw deny 3306                  # Bloquear MySQL\nsudo ufw deny from 192.168.1.10     # Bloquear una IP\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#borrar-reglas","title":"Borrar reglas","text":"<pre><code>sudo ufw delete allow 80            # Eliminar regla del puerto 80\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#limitar-conexiones-repetidas","title":"Limitar conexiones repetidas (protecci\u00f3n contra fuerza bruta)","text":"<pre><code>sudo ufw limit ssh                  # Limita intentos de conexi\u00f3n SSH\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#activar-registro-firewall","title":"Activar registro de actividad del firewall","text":"<pre><code>sudo ufw logging on                 # Habilita logs (ubicaci\u00f3n: /var/log/ufw.log)\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#ver-aplicaciones-ufw","title":"Ver aplicaciones reconocidas por UFW","text":"<pre><code>sudo ufw app list                   # Muestra perfiles predefinidos\n</code></pre>"},{"location":"concepts/network/security/firewall/ufw.html#configuracion-servidores-web","title":"Configuraci\u00f3n para Servidores Web","text":""},{"location":"concepts/network/security/firewall/ufw.html#apache","title":"Apache","text":"<p>Perfiles disponibles: - Apache: Puerto 80 (HTTP) - Apache Secure: Puerto 443 (HTTPS) - Apache Full: Puertos 80 y 443 (HTTP + HTTPS)  </p> <p>Ejemplos de uso: <pre><code>sudo ufw allow 'Apache'          # Solo HTTP (puerto 80)\nsudo ufw allow 'Apache Secure'   # Solo HTTPS (puerto 443)\nsudo ufw allow 'Apache Full'     # HTTP y HTTPS (80 y 443)\n</code></pre></p>"},{"location":"concepts/network/security/firewall/ufw.html#nginx","title":"Nginx","text":"<p>Perfiles disponibles: - Nginx HTTP: Puerto 80 (HTTP) - Nginx HTTPS: Puerto 443 (HTTPS) - Nginx Full: Puertos 80 y 443 (HTTP + HTTPS)  </p> <p>Ejemplos de uso: <pre><code>sudo ufw allow 'Nginx HTTP'      # Solo HTTP (puerto 80)\nsudo ufw allow 'Nginx HTTPS'     # Solo HTTPS (puerto 443)\nsudo ufw allow 'Nginx Full'      # HTTP y HTTPS (80 y 443)\n</code></pre></p>"},{"location":"concepts/storage/raid.html","title":"RAID","text":"<p>RAID es un t\u00e9rmino utilizado en inform\u00e1tica, cuyas siglas vienen del ingl\u00e9s Redundant Array of Independent Disks o Matriz Redundante de Discos Independientes [1], es un proceso utilizado para combinar varios discos duros y que estos funcionen de manera coordinada para formar una \u00fanica unidad l\u00f3gica en la que almacenar los datos. El objetivo principal de RAID es mejorar el rendimiento, la disponibilidad y la seguridad de los datos almacenados.</p> <p>A nivel empresarial, es muy utilizado a la hora de configurar el almacenamiento de servidores NAS y aplicaciones. Ofrece mayor tolerancia a fallos y m\u00e1s altos niveles de rendimiento que un solo disco duro o un grupo de discos duros independientes.</p> Servidor configurado con RAID"},{"location":"concepts/storage/raid.html#tipos-de-raid","title":"Tipos de RAID","text":"<p>Algunos de los t\u00e9rminos importantes que conviene conocer son:</p> <ul> <li>Datos de paridad: Estos se distribuyen entre todos los discos f\u00edsicos en el sistema. Si un disco f\u00edsico falla, es posible reconstruirlo desde la paridad y los datos de los discos f\u00edsicos restantes. Los datos de paridad est\u00e1n presentes en RAID 5, 6, 50 y 60.</li> <li>Modo Degradado: Ocurre cuando uno de los discos del RAID se vuelve ilegible, el disco entonces es considerado corrupto y se extrae del RAID. Los datos y la paridad del disco son almacenados en los discos restantes. Este proceso degrada en gran medida el rendimiento del RAID.</li> </ul> <p>B\u00e1sicamente, tenemos dos tipos de configuraciones, como son las siguientes [2]:</p> <ul> <li>Disk mirroring: Es un tipo de configuraci\u00f3n RAID que busca redundancia de datos ante un posible fallo en una de las unidades de almacenamiento, duplicando los datos en dos o m\u00e1s discos. Si uno de los discos falla, el sistema puede seguir funcionando con el otro disco sin p\u00e9rdida de datos.</li> <li>Disk stripping: Esta configuraci\u00f3n RAID que no busca redundancia, sino conseguir mayores velocidades de transferencia de datos, repartiendo los datos entre varios discos.</li> </ul> <p>Note</p> <p>Los tipos de RAID m\u00e1s utilizados en servidores son el RAID1, RAID5, RAID 6 y RAID 10.</p>"},{"location":"concepts/storage/raid.html#raid0","title":"RAID 0","text":"RAID 0 <p>Se necesitan m\u00ednimo 2 discos. Cuenta la suma de tama\u00f1os de todos los discos duros. Un RAID 0, emplea striping y reparte los datos en bloques entre los discos, de forma que cada bloque se almacena en un disco diferente. Por ejemplo, si tenemos 4 discos de 1 TB cada uno, tendremos 4 TB disponibles.</p> <p>Important</p> <p>Se emplear\u00e1 como tama\u00f1o de bloque el m\u00e1s peque\u00f1o de los discos, por lo que si tenemos 4 discos de 1 TB, 2 de 500 GB y 1 de 250 GB, el tama\u00f1o de bloque ser\u00e1 de 250 GB.</p> <p>El inconveniente es que no hay redundancia y tolerancia a fallos, por lo que cualquier fallo o aver\u00eda en uno de los discos conlleva una p\u00e9rdida total de los datos.</p> <p>Sin embargo, ofrece un alto rendimiento en lectura y escritura, ya que los datos se distribuyen entre los discos, permitiendo que las operaciones de lectura y escritura se realicen en paralelo [1].</p>"},{"location":"concepts/storage/raid.html#raid1","title":"RAID 1","text":"RAID 1 <p>Se necesitan m\u00ednimo 2 discos. Es conocido como espejo o mirroring. Duplica todos los datos de la primera unidad de forma sincronizada a una segunda unidad de almacenamiento. De esta forma, si el primer disco se estropea, el sistema seguir\u00e1 funcionando y trabajando con el segundo disco sin problemas y sin perder datos.</p> <p>Important</p> <p>Al igual que en el RAID 0, se emplear\u00e1 como tama\u00f1o de bloque el m\u00e1s peque\u00f1o de los discos, por lo que si tenemos 4 discos de 1 TB, 2 de 500 GB y 1 de 250 GB, el tama\u00f1o de bloque ser\u00e1 de 250 GB.</p> <p>Ofrece una r\u00e1pida recuperaci\u00f3n tras un fallo de la unidad, por tanto, es una de las mejores configuraciones en cuanto a redundancia y tolerancia a fallos. Adem\u00e1s, disponemos de un mayor rendimiento de lectura/escritura, puesto que es posible escribir y leer de los dos discos al mismo tiempo.</p>"},{"location":"concepts/storage/raid.html#raid5","title":"RAID 5","text":"RAID 5 <p>Se necesitan como m\u00ednimo 3 discos, y se puede romper un disco sin perder los datos. Suele ser el RAID m\u00e1s usado en servidores, ya que aporta la velocidad y rendimiento del RAID 0 (uso eficiente de la unidad, alto rendimiento en escritura y lectura) y la seguridad del RAID 1 ante la p\u00e9rdida de datos.</p> <p>Important</p> <p>El espacio disponible ser\u00e1 de N-1, siendo N el n\u00famero de discos del raid. Si utilizamos 5 discos de 1 TB tendremos: <code>5 discos \u2013 1 = 4 discos -&gt; 4 TB disponibles.</code></p> <p>Utiliza la paridad para recuperar los datos. Se dividen los datos en bloques en los diferentes discos, de forma que si hay un fallo en uno de ellos, esa parte de los datos se subsana con los datos almacenados en el resto de los discos, permitiendo al usuario continuar (aunque funciona m\u00e1s lento) con su trabajo.</p>"},{"location":"concepts/storage/raid.html#raid6","title":"RAID 6","text":"RAID 6 <p>Se necesitan como m\u00ednimo 4 discos. Puede tolerar dos fallos de discos duros (N-2).</p> <p>Es similar al RAID 5 e incluye un disco de reserva que entra en funcionamiento una vez que uno de los discos se estropea (en este caso hasta que sustituimos el disco averiado, a todos los efectos tenemos un RAID 5). Proporciona, por tanto, una elevada redundancia de datos y rendimiento de lectura.</p>"},{"location":"concepts/storage/raid.html#raid10","title":"RAID 10 (RAID 1 + RAID 0)","text":"RAID 10 <p>RAID 10, tambi\u00e9n conocido como RAID 1 + 0, es una configuraci\u00f3n avanzada que combina espejo y distribuci\u00f3n de datos para ofrecer alta seguridad y rendimiento simult\u00e1neamente. Funciona agrupando discos duros en pares espejo (RAID 1), donde cada disco tiene una copia id\u00e9ntica del otro, y luego distribuyendo esos pares en paralelo (RAID 0) para acelerar las operaciones de lectura y escritura. Esto permite que el sistema siga funcionando incluso si falla un disco por cada par, lo cual brinda excelente tolerancia a fallos y tiempos de recuperaci\u00f3n r\u00e1pidos. Aunque solo se aprovecha la mitad del espacio total, debido al espejo, la velocidad es comparable a configuraciones enfocadas exclusivamente en rendimiento.</p>"},{"location":"concepts/storage/raid.html#raid50","title":"RAID 50 (RAID 5 + RAID 0)","text":"RAID 50 <p>Se necesitan como m\u00ednimo 6 discos, con la posibilidad de que se puedan estropear hasta 3 discos sin perder datos. Se hace un RAID 5 y sobre ellos un RAID 0. Con el RAID 50 conseguiremos un volumen muy robusto, un mayor rendimiento de lectura en comparaci\u00f3n con el RAID 5 est\u00e1ndar, y un rendimiento de escritura de medio a alto. Presenta las mismas desventajas que el RAID 5 (impacto medio ante los fallos de disco y tiempos de reconstrucci\u00f3n m\u00e1s largos al ser necesario volver a calcular la paridad), y un precio m\u00e1s elevado.</p> <p>Tiene como tolerancia a fallos de 1 disco por cada grupo de discos RAID 5, lo que significa que si se falla un disco en un grupo, el sistema puede seguir funcionando sin p\u00e9rdida de datos. Asimismo, el rendimiento de lectura es alto, ya que los datos se distribuyen entre m\u00faltiples discos, permitiendo que las operaciones de lectura se realicen en paralelo.</p>"},{"location":"concepts/storage/raid.html#raid60","title":"RAID 60 (RAID 6 + RAID 0)","text":"RAID 60 <p>Se necesitan como m\u00ednimo 8 discos, con la posibilidad de que se puedan estropear hasta 4 discos sin perder datos, 2 por cada grupo de discos RAID 6. Es una configuraci\u00f3n avanzada que combina la redundancia del RAID 6 con la velocidad del RAID 0, ofreciendo una alta tolerancia a fallos y un rendimiento optimizado. Se hace un RAID 6 y sobre ellos un RAID 0. Obtenemos un alto rendimiento sobre todo en tareas de lectura. Las desventajas son las mismas a las del RAID6 (rendimiento m\u00e1s bajo en escritura debido a los dos c\u00e1lculos de paridad, y mayor gasto en hardware).</p>"},{"location":"concepts/storage/raid.html#hot-swap","title":"Hot Swap","text":"<p>El Hot Swap es una t\u00e9cnica permite sustituir el disco averiado por uno nuevo, sin necesidad de desconectar o apagar el servidor, para luego poder reconstruir la informaci\u00f3n.</p> Hot Swap <p>Podemos dejarlo configurado de 2 formas:</p> <ol> <li>Tenemos el disco duro de reserva cargado en el RAID, aunque sin utilizar, de manera que si tenemos un fallo de disco duro autom\u00e1ticamente empieza a reconstruir los datos en el disco que ten\u00edamos preparado (RAID 6).</li> <li>No tenemos el disco insertado en el servidor, pero tenemos la capacidad de sustituci\u00f3n en caliente. Esta es una opci\u00f3n algo m\u00e1s arriesgada, que implica tener lo m\u00e1s cerca posible un disco de reserva y reemplazarlo lo antes posible antes de que falle una segunda unidad.</li> </ol>"},{"location":"concepts/storage/raid.html#controladoras-raid","title":"Controladoras RAID","text":"<p>Una controladora RAID es una tarjeta de hardware o una aplicaci\u00f3n de software que se utiliza con el objetivo de gestionar varios discos duros en un mismo servidor.</p>"},{"location":"concepts/storage/raid.html#por-software","title":"Por Software","text":"<p>Los discos se conectan a la placa o a una controladora, y es el procesador y el sistema operativo quienes hacen las operaciones necesarias para controlar el RAID y los discos. F\u00e1cilmente ampliable con la cantidad de discos que se necesiten, realmente la \u00fanica limitaci\u00f3n es la que ofrezca la placa base. Tambi\u00e9n es m\u00e1s f\u00e1cil de configurar. Para aquellos RAID que necesiten m\u00e1s recursos, el rendimiento general del sistema puede verse afectado. Adem\u00e1s, en el caso de que se degrade el RAID, es m\u00e1s complicado volver a recuperarlo y se puede perder informaci\u00f3n.</p>"},{"location":"concepts/storage/raid.html#por-hardware","title":"Por Hardware","text":"Controladora RAID X4TTX Dell PERC H730P <p>A diferencia del RAID por software (que usa los recursos del procesador y la memoria del sistema operativo para gestionar la matriz), la controladora RAID por hardware tiene su propio procesador (CPU), su propia memoria cach\u00e9 (RAM) y su propio firmware. Esto le permite realizar todas las operaciones de RAID (como la lectura/escritura de datos, el c\u00e1lculo de paridad, la reconstrucci\u00f3n de la matriz en caso de fallo de un disco, etc.) de forma independiente del sistema operativo principal y del procesador del servidor.</p>"},{"location":"concepts/storage/raid.html#referencias","title":"Referencias Bibliogr\u00e1ficas","text":"<ol> <li> <p>Fern\u00e1ndez, Y. (5 de junio de 2020). RAID de discos duros: qu\u00e9 son y sus principales tipos. Xataka. https://www.xataka.com/basics/raid-discos-duros-que-son-cuales-son-sus-principales-tipos</p> </li> <li> <p>Garc\u00eda, J. (2 de julio de 2025). Qu\u00e9 es un sistema RAID de discos duros y qu\u00e9 tipos hay. HardZone. https://hardzone.es/tutoriales/montaje/raid-discos-duros/</p> </li> </ol>"},{"location":"concepts/virtualization/virtual-machines.html","title":"M\u00e1quinas Virtuales (VM)","text":""},{"location":"concepts/virtualization/virtual-machines.html#definicion","title":"Definici\u00f3n","text":"Logo de Microsoft Hyper-V <p>Una m\u00e1quina virtual (VM) es una emulaci\u00f3n completa de un sistema operativo que se ejecuta dentro de un entorno virtualizado. Se comporta como un sistema inform\u00e1tico independiente, con hardware simulado por software, sobre una computadora f\u00edsica real (host).</p>"},{"location":"concepts/virtualization/virtual-machines.html#proposito-general","title":"Prop\u00f3sito General","text":"Logo de VMware <p>Las VM est\u00e1n dise\u00f1adas para ejecutar cualquier sistema operativo y software como si fuera un equipo f\u00edsico, con fines de:</p> <ul> <li>Laboratorio de pruebas</li> <li>Desarrollo de software</li> <li>Simulaci\u00f3n de redes</li> <li>Aislamiento de sistemas</li> <li>Seguridad y sandboxing</li> <li>Virtualizaci\u00f3n de escritorios (VDI)</li> </ul>"},{"location":"concepts/virtualization/virtual-machines.html#componentes-tecnicos","title":"Componentes T\u00e9cnicos","text":"<ul> <li>Hipervisor (tipo 1 o 2)</li> <li>Guest OS (sistema operativo invitado)</li> <li>Disco virtual (VMDK, VHD, QCOW2, etc.)</li> <li>CPU, RAM, y adaptadores de red virtuales</li> <li>Controladores de dispositivos virtuales</li> </ul>"},{"location":"concepts/virtualization/virtual-machines.html#tipos-de-hipervisores","title":"Tipos de Hipervisores","text":"Logo de VirtualBox Tipo Ejecutado sobre Ejemplos Tipo 1 Directamente en el hardware (bare metal) VMware ESXi, Microsoft Hyper-V, KVM Tipo 2 Sobre un sistema operativo anfitri\u00f3n VirtualBox, VMware Workstation"},{"location":"concepts/virtualization/virtual-machines.html#gestion-y-uso","title":"Gesti\u00f3n y Uso","text":"<ul> <li>Se pueden crear, modificar, duplicar, exportar</li> <li>Soportan snapshots, clonado, rollback</li> <li>Pueden instalar cualquier sistema operativo compatible</li> <li>Se administran desde una consola local o remota</li> </ul>"},{"location":"concepts/virtualization/virtual-machines.html#formatos-de-disco-virtual","title":"Formatos de Disco Virtual","text":"Formato Usado por Caracter\u00edsticas VMDK VMware Compatible con snapshots VHD/VHDX Hyper-V, Azure Respaldo incremental, cifrado QCOW2 KVM/QEMU Compresi\u00f3n, snapshots, cifrado RAW Gen\u00e9rico (m\u00e1ximo rendimiento) Sin metadatos, r\u00e1pido"},{"location":"concepts/virtualization/virtual-machines.html#casos-de-uso","title":"Casos de Uso","text":"<ul> <li>Laboratorios educativos (ej. redes, hacking \u00e9tico)</li> <li>Testing de m\u00faltiples sistemas operativos</li> <li>Aislamiento de entornos de desarrollo</li> <li>Configuraci\u00f3n de cl\u00fasteres virtualizados</li> <li>Simulaci\u00f3n de infraestructura compleja</li> </ul>"},{"location":"concepts/virtualization/virtual-servers.html","title":"Servidores Virtuales (VPS)","text":""},{"location":"concepts/virtualization/virtual-servers.html#que-es-un-servidor-virtual","title":"\u00bfQu\u00e9 es un Servidor Virtual?","text":"Logo de AWS <p>Un servidor virtual, o VPS (Virtual Private Server), es una instancia de servidor aislada que opera dentro de una m\u00e1quina f\u00edsica compartida mediante tecnolog\u00edas de virtualizaci\u00f3n. Aunque varios servidores virtuales pueden ejecutarse sobre el mismo hardware, cada VPS cuenta con su propio sistema operativo, recursos asignados (CPU, RAM, disco) y configuraciones, funcionando como si fuera un servidor independiente.</p> <p>Important</p> <p>A diferencia de una m\u00e1quina virtual gen\u00e9rica que se usa con fines t\u00e9cnicos o de laboratorio, el VPS est\u00e1 pensado para entornos de producci\u00f3n y servicios online.</p>"},{"location":"concepts/virtualization/virtual-servers.html#como-funciona-un-vps","title":"\u00bfC\u00f3mo Funciona un VPS?","text":"Logo de Linode <p>Un proveedor (como DigitalOcean, AWS o Linode) utiliza un hipervisor para dividir un servidor f\u00edsico en m\u00faltiples VPS. Cada VPS tiene acceso restringido a los recursos asignados, pero se comporta como un servidor completo.</p>"},{"location":"concepts/virtualization/virtual-servers.html#proceso-basico","title":"Proceso b\u00e1sico:","text":"<ol> <li>El hipervisor se instala sobre el hardware f\u00edsico (ESXi, KVM, etc.).</li> <li>Se crean m\u00faltiples VPS, cada uno con su propio sistema operativo.</li> <li>El cliente accede a su VPS mediante SSH o consola remota.</li> <li>Puede instalar software, configurar servicios, o desplegar aplicaciones.</li> <li>Cada VPS es independiente de los dem\u00e1s a nivel de software.</li> </ol>"},{"location":"concepts/virtualization/virtual-servers.html#tipos-de-servidores-virtuales","title":"Tipos de Servidores Virtuales","text":"Logo de Google Cloud"},{"location":"concepts/virtualization/virtual-servers.html#vps","title":"VPS (Virtual Private Server)","text":"<ul> <li>Aislado l\u00f3gicamente dentro de un nodo f\u00edsico.</li> <li>Uso com\u00fan en alojamiento web, API, servicios empresariales.</li> <li>Acceso root y configuraci\u00f3n personalizada.</li> </ul>"},{"location":"concepts/virtualization/virtual-servers.html#servidor-cloud","title":"Servidor Cloud","text":"<ul> <li>Similar al VPS, pero escalable din\u00e1micamente desde la nube.</li> <li>Ofrece alta disponibilidad, balanceo y facturaci\u00f3n por hora.</li> </ul>"},{"location":"concepts/virtualization/virtual-servers.html#servidor-dedicado-virtual","title":"Servidor Dedicado Virtual","text":"<ul> <li>Recursos garantizados m\u00e1s cercanos al servidor dedicado.</li> <li>Mayor rendimiento, ideal para tr\u00e1fico alto o aplicaciones cr\u00edticas.</li> </ul>"},{"location":"concepts/virtualization/virtual-servers.html#contenedores","title":"Contenedores (Docker, LXC)","text":"<ul> <li>Alternativa ligera a un VPS: no es una VM, comparte el kernel del host.</li> <li>Ideal para microservicios, CI/CD, aplicaciones desacopladas.</li> </ul>"},{"location":"concepts/virtualization/virtual-servers.html#hipervisores-utilizados-en-vps","title":"Hipervisores Utilizados en VPS","text":"Tipo Caracter\u00edsticas Ejemplos Tipo 1 Corre directamente sobre el hardware f\u00edsico. VMware ESXi, Hyper-V, KVM Tipo 2 Corre sobre un sistema operativo anfitri\u00f3n. Poco usado en VPS p\u00fablicos <p>Note</p> <p>En la mayor\u00eda de los VPS comerciales se usa KVM o Xen como hipervisor tipo 1.</p>"},{"location":"concepts/virtualization/virtual-servers.html#usos-comunes-del-vps","title":"Usos Comunes del VPS","text":"Logo de DigitalOcean <ul> <li>Alojamiento de sitios web con CMS (WordPress, Joomla, etc.)</li> <li>Servidores de bases de datos (MySQL, PostgreSQL, MongoDB)</li> <li>Servidores de aplicaciones (Node.js, Django, Laravel)</li> <li>Implementaci\u00f3n de API REST</li> <li>Automatizaci\u00f3n de tareas (bots, scrapers, jobs en cron)</li> <li>VPN, correo, DNS y otros servicios de red personalizados</li> </ul>"},{"location":"concepts/virtualization/virtual-servers.html#ventajas-del-vps","title":"Ventajas del VPS","text":"Ventaja Descripci\u00f3n Escalabilidad Se pueden aumentar recursos sin migrar Aislamiento Cada VPS es independiente del resto del sistema Ahorro de costos M\u00e1s econ\u00f3mico que un servidor f\u00edsico dedicado Acceso root Control total del sistema operativo y configuraciones Rendimiento Recursos garantizados frente a hosting compartido Versatilidad Compatible con casi cualquier software o stack"},{"location":"concepts/virtualization/virtual-servers.html#comparacion-con-otros-modelos-de-hosting","title":"Comparaci\u00f3n con Otros Modelos de Hosting","text":"Modelo Recursos Aislamiento Personalizaci\u00f3n Costo VPS Medio Medio-Alto Alto Medio Servidor dedicado Total Total Total Alto Hosting compartido Bajo Bajo Muy limitado Bajo"},{"location":"concepts/virtualization/virtual-servers.html#herramientas-de-gestion-y-paneles","title":"Herramientas de Gesti\u00f3n y Paneles","text":""},{"location":"concepts/virtualization/virtual-servers.html#paneles-de-administracion-opcionales","title":"Paneles de administraci\u00f3n opcionales:","text":"<ul> <li>Webmin / Virtualmin</li> <li>cPanel / WHM (licencia comercial)</li> <li>Plesk</li> <li>CyberPanel</li> <li>ISPConfig</li> </ul>"},{"location":"concepts/virtualization/virtual-servers.html#proveedores-populares-de-vps","title":"Proveedores populares de VPS:","text":"<ul> <li>DigitalOcean</li> <li>Linode</li> <li>Vultr</li> <li>Hetzner</li> <li>AWS Lightsail</li> <li>Google Cloud VM instances</li> <li>Azure Virtual Machines</li> </ul>"},{"location":"concepts/virtualization/virtual-servers.html#notas-tecnicas","title":"Notas T\u00e9cnicas","text":"<ul> <li>En un VPS no tienes acceso al hipervisor, solo al sistema operativo de tu instancia.</li> <li>El rendimiento puede depender de la carga general del nodo f\u00edsico, aunque est\u00e9 garantizado hasta cierto l\u00edmite.</li> <li>Los proveedores ofrecen backups, snapshots, balanceo de carga y monitoreo desde su panel.</li> </ul>"},{"location":"concepts/virtualization/containers/docker.html","title":"Docker","text":"<p>Docker es una plataforma de c\u00f3digo abierto que permite desarrollar, empaquetar, distribuir y ejecutar aplicaciones en contenedores. Un contenedor es una unidad ligera, aut\u00f3noma y port\u00e1til que incluye todo lo necesario para ejecutar una aplicaci\u00f3n: c\u00f3digo, dependencias, librer\u00edas, configuraciones, etc.</p> <p>Docker se basa en caracter\u00edsticas del n\u00facleo de Linux (como cgroups y namespaces) para permitir que m\u00faltiples contenedores se ejecuten en un mismo sistema operativo de manera aislada.</p>"},{"location":"concepts/virtualization/containers/docker.html#para-que-sirve-docker","title":"\u00bfPara qu\u00e9 sirve Docker?","text":"<p>Docker facilita la creaci\u00f3n y despliegue de aplicaciones porque:</p> <ul> <li>Elimina problemas de \"en mi m\u00e1quina funciona\".</li> <li>Proporciona entornos consistentes para desarrollo, testing y producci\u00f3n.</li> <li>Simplifica el despliegue y escalado de aplicaciones.</li> <li>Permite aislamiento y seguridad de procesos.</li> <li>Acelera la integraci\u00f3n y entrega continua (CI/CD).</li> </ul>"},{"location":"concepts/virtualization/containers/docker.html#casos-de-uso-docker","title":"Casos de uso comunes","text":"<ul> <li>Microservicios: cada servicio corre en su contenedor.</li> <li>Entornos de desarrollo reproducibles.</li> <li>Automatizaci\u00f3n de pruebas.</li> <li>Despliegue en la nube.</li> <li>Simulaci\u00f3n de arquitecturas complejas (con <code>Docker Compose</code>).</li> <li>Contenedorizaci\u00f3n de bases de datos, APIs, servicios web.</li> </ul>"},{"location":"concepts/virtualization/containers/docker.html#componentes-clave","title":"Componentes Clave","text":""},{"location":"concepts/virtualization/containers/docker.html#docker-engine","title":"1. Docker Engine","text":"<p>El motor de Docker es el n\u00facleo de Docker. Incluye:</p> <ul> <li>Servidor (dockerd): daemon que gestiona contenedores.</li> <li>CLI (docker): cliente de l\u00ednea de comandos.</li> <li>API REST: permite controlar Docker desde otras herramientas.</li> </ul>"},{"location":"concepts/virtualization/containers/docker.html#imagenes-docker","title":"2. Im\u00e1genes","text":"<p>Las im\u00e1genes Docker son plantillas inmutables que contienen el sistema de archivos y la configuraci\u00f3n de una aplicaci\u00f3n. Se crean a partir de un <code>Dockerfile</code>.</p>"},{"location":"concepts/virtualization/containers/docker.html#contenedores-docker","title":"3. Contenedores","text":"<p>Un contenedor es una instancia en ejecuci\u00f3n de una imagen. Se puede detener, iniciar, reiniciar, destruir, etc.</p> <pre><code>docker run nginx\ndocker ps\ndocker stop &lt;id&gt;\n</code></pre>"},{"location":"concepts/virtualization/containers/docker.html#dockerfile","title":"Dockerfile","text":"<p>Un <code>Dockerfile</code> es un archivo de texto que contiene instrucciones para construir una imagen Docker personalizada.</p>"},{"location":"concepts/virtualization/containers/docker.html#ejemplos-dockerfile","title":"Ejemplo de Dockerfile","text":"<pre><code># Imagen base\nFROM node:18\n\n# Directorio de trabajo dentro del contenedor\nWORKDIR /app\n\n# Copiar dependencias\nCOPY package*.json ./\n\n# Instalar dependencias\nRUN npm install\n\n# Copiar el resto del c\u00f3digo\nCOPY . .\n\n# Puerto expuesto\nEXPOSE 3000\n\n# Comando de inicio\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"concepts/virtualization/containers/docker.html#instrucciones-comunes","title":"Instrucciones comunes","text":"Instrucci\u00f3n Descripci\u00f3n <code>FROM</code> Imagen base (ej: node, python, ubuntu) <code>COPY</code> Copia archivos al contenedor <code>RUN</code> Ejecuta comandos en la creaci\u00f3n <code>CMD</code> Comando por defecto al iniciar el contenedor <code>EXPOSE</code> Indica qu\u00e9 puerto usar\u00e1 la app <code>WORKDIR</code> Cambia el directorio de trabajo"},{"location":"concepts/virtualization/containers/docker.html#docker-compose","title":"Docker Compose","text":"<p>Docker Compose permite definir y ejecutar aplicaciones multicontenedor con un solo archivo YAML (<code>docker-compose.yml</code>). Es ideal para orquestar varios servicios como API, frontend, base de datos, etc.</p>"},{"location":"concepts/virtualization/containers/docker.html#ejemplo-de-archivo-docker-composeyml-ejemplo-docker-compose","title":"Ejemplo de archivo <code>docker-compose.yml {:#ejemplo-docker-compose}</code>","text":"<pre><code>version: '3.9'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\n    depends_on:\n      - db\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: pass\n      POSTGRES_DB: mydb\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n\nvolumes:\n  pgdata:\n</code></pre>"},{"location":"concepts/virtualization/containers/docker.html#comandos-comunes","title":"Comandos comunes","text":"<pre><code>docker-compose up         # Levanta todos los servicios\ndocker-compose down       # Detiene y elimina los contenedores\ndocker-compose build      # Construye im\u00e1genes\ndocker-compose logs       # Muestra logs\ndocker-compose ps         # Lista servicios activos\n</code></pre>"},{"location":"concepts/virtualization/containers/docker.html#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<ul> <li>Usa <code>.dockerignore</code> como <code>.gitignore</code> para evitar copiar archivos innecesarios.</li> <li>Minimiza el n\u00famero de capas (<code>RUN</code> y <code>COPY</code>).</li> <li>Usa im\u00e1genes oficiales y ligeras (por ejemplo: <code>node:alpine</code>).</li> <li>Evita correr como root dentro del contenedor.</li> <li>Utiliza variables de entorno seguras (con archivos <code>.env</code> y <code>secrets</code>).</li> </ul>"},{"location":"concepts/virtualization/containers/docker.html#recursos-adicionales","title":"Recursos adicionales","text":"<ul> <li>Sitio oficial: https://www.docker.com</li> <li>Docker Hub (im\u00e1genes): https://hub.docker.com</li> <li>Documentaci\u00f3n oficial: https://docs.docker.com</li> </ul>"},{"location":"concepts/virtualization/containers/docker.html#conclusiones","title":"Conclusi\u00f3n","text":"<p>Docker es una herramienta esencial en el desarrollo moderno. Su capacidad para contener y aislar aplicaciones facilita el desarrollo, testing, y despliegue en cualquier entorno, desde laptops hasta cl\u00fasteres en la nube.</p>"},{"location":"manual/index.html","title":"Introducci\u00f3n","text":""},{"location":"manual/index.html#objetivo-del-manual","title":"Objetivo del manual","text":"<p>El presente manual tiene como objetivo documentar el proceso de despliegue del sistema JokeAppWeb, incluyendo la configuraci\u00f3n del entorno, la instalaci\u00f3n y ejecuci\u00f3n de los servicios necesarios, la implementaci\u00f3n de medidas de seguridad b\u00e1sicas y la verificaci\u00f3n del funcionamiento del sistema. Este documento busca servir como gu\u00eda t\u00e9cnica para la correcta instalaci\u00f3n y puesta en marcha del sistema en un entorno de servidor.</p>"},{"location":"manual/index.html#alcance-del-sistema","title":"Alcance del sistema","text":"<p>Este manual cubre exclusivamente el proceso de despliegue t\u00e9cnico de la aplicaci\u00f3n JokeAppWeb en un entorno Linux, utilizando <code>git clone</code> para obtener el c\u00f3digo fuente, Docker Compose para levantar los servicios, configuraci\u00f3n del servidor web Nginx como proxy inverso y activaci\u00f3n del firewall con UFW para asegurar el acceso.</p> <p>No se incluye en este documento el desarrollo del c\u00f3digo fuente de la aplicaci\u00f3n, el manual de usuario final, ni la administraci\u00f3n funcional del sistema una vez desplegado.</p>"},{"location":"manual/index.html#publico-objetivo","title":"P\u00fablico objetivo","text":"<p>Este manual est\u00e1 dirigido a personas con perfil t\u00e9cnico, tales como:</p> <ul> <li>Administradores de sistemas</li> <li>Estudiantes de ingenier\u00eda en inform\u00e1tica o carreras afines</li> <li>Profesores y evaluadores del curso de Despliegue de Software</li> <li>Desarrolladores responsables de la puesta en producci\u00f3n del sistema</li> </ul> <p>Se asume que el lector tiene conocimientos b\u00e1sicos de terminal Linux, uso de Docker y configuraci\u00f3n de servidores web.</p>"},{"location":"manual/common-errors.html","title":"Troubleshooting - JokeAppWeb","text":"<p>Esta secci\u00f3n ofrece una gu\u00eda detallada para diagnosticar y resolver los errores m\u00e1s comunes durante la instalaci\u00f3n, despliegue, ejecuci\u00f3n y uso de JokeAppWeb.</p> <p>\u2139 Nota: Aseg\u00farate de haber cumplido con los requisitos del entorno antes de revisar esta secci\u00f3n. Consulta la gu\u00eda de instalaci\u00f3n y despliegue si tienes dudas.</p>"},{"location":"manual/common-errors.html#problemas-en-produccion","title":"Problemas en Producci\u00f3n","text":""},{"location":"manual/common-errors.html#no-se-cargan-los-chistes-al-iniciar-sesion","title":"No se cargan los chistes al iniciar sesi\u00f3n","text":"<p>S\u00edntoma: El usuario accede al sistema exitosamente, pero no se muestran chistes en pantalla o la interfaz permanece vac\u00eda.</p> <p>Posibles causas: - El backend (API) no se encuentra en ejecuci\u00f3n. - La URL base configurada en el frontend no corresponde al servidor real del backend. - Existe un problema de CORS que impide la comunicaci\u00f3n entre cliente y servidor. - La base de datos no contiene registros de chistes.</p> <p>Soluci\u00f3n sugerida: Revisar el estado de los servicios, reiniciar los contenedores si es necesario y verificar que las variables de entorno del frontend est\u00e9n correctamente definidas (en especial <code>VITE_API_URL</code>).</p> <pre><code># Verifica si los contenedores est\u00e1n corriendo\ndocker compose ps\n\n# Reinicia los servicios si es necesario\ndocker compose restart\n</code></pre>"},{"location":"manual/common-errors.html#error-unauthorized-al-intentar-calificar-un-chiste","title":"Error \"Unauthorized\" al intentar calificar un chiste","text":"<p>S\u00edntoma: El sistema devuelve un error 401 (No autorizado) al realizar acciones como dar \"like\" o \"dislike\".</p> <p>Posibles causas: - El token JWT del usuario ha expirado. - El usuario no est\u00e1 correctamente autenticado. - El encabezado <code>Authorization</code> no se est\u00e1 incluyendo en las solicitudes HTTP.</p> <p>Soluci\u00f3n sugerida: Cerrar sesi\u00f3n e iniciar nuevamente. Verificar en herramientas de desarrollador que los headers est\u00e9n siendo enviados correctamente y revisar cualquier mensaje de error en la consola del navegador.</p> <ol> <li>Cierra sesi\u00f3n desde la interfaz de usuario.</li> <li>Vuelve a iniciar sesi\u00f3n.</li> <li>Abre DevTools (F12) \u2192 pesta\u00f1a \"Network\".</li> <li>Realiza una acci\u00f3n como \"like\" o \"dislike\".</li> <li>Haz clic sobre la solicitud.</li> <li>En \"Headers\", verifica que el campo Authorization est\u00e9 presente:    Authorization: Bearer"},{"location":"manual/common-errors.html#problemas-de-despliegue","title":"Problemas de Despliegue","text":""},{"location":"manual/common-errors.html#error-database-connection-refused","title":"Error: \"Database connection refused\"","text":"<p>S\u00edntoma: Durante el arranque del sistema, el backend muestra mensajes de error indicando que no puede establecer conexi\u00f3n con la base de datos PostgreSQL.</p> <p>Posibles causas: - El contenedor de PostgreSQL no se ha iniciado correctamente. - La variable <code>DATABASE_URL</code> contiene errores de sintaxis o credenciales incorrectas. - Hay conflictos con los vol\u00famenes persistentes de Docker.</p> <p>Soluci\u00f3n sugerida: Revisar los logs del contenedor de base de datos, confirmar la configuraci\u00f3n del archivo <code>.env</code> y, si persiste el problema, eliminar los vol\u00famenes de Docker para restaurar el estado inicial.</p> <pre><code># Verifica los logs del contenedor de la base de datos\ndocker compose logs db\n\n# Verifica la variable de entorno DATABASE_URL\ncat backend/.env | grep DATABASE_URL\n</code></pre>"},{"location":"manual/common-errors.html#error-frontend-not-found-404","title":"Error: \"Frontend not found\" (404)","text":"<p>S\u00edntoma: El navegador muestra un error 404 o una p\u00e1gina en blanco al acceder a la aplicaci\u00f3n desplegada.</p> <p>Posibles causas: - El frontend no ha sido compilado antes del despliegue. - Nginx no encuentra los archivos est\u00e1ticos generados por Vite. - El archivo <code>docker-compose.yml</code> o la configuraci\u00f3n de Nginx apunta a rutas incorrectas.</p> <p>Soluci\u00f3n sugerida: Compilar correctamente el frontend, verificar que los archivos est\u00e1ticos est\u00e9n en la ruta esperada y reconstruir el entorno con Docker.</p> <pre><code># Construye el frontend con Vite\ncd frontend\nnpm run build\n\n# Reconstruye los contenedores de Docker\ndocker compose up --build\n</code></pre>"},{"location":"manual/common-errors.html#problemas-comunes-durante-el-desarrollo","title":"Problemas Comunes Durante el Desarrollo","text":""},{"location":"manual/common-errors.html#incidencias-frecuentes-en-entorno-de-desarrollo","title":"Incidencias frecuentes en entorno de desarrollo","text":"Problema Diagn\u00f3stico y soluci\u00f3n sugerida Cambios en React no se reflejan Confirmar que <code>npm run dev</code> est\u00e1 en ejecuci\u00f3n y forzar recarga (Ctrl+F5) El backend no responde Verificar que <code>uvicorn</code> est\u00e1 corriendo y que el puerto no est\u00e9 en uso Problemas con CORS Revisar la configuraci\u00f3n de <code>allow_origins</code> en FastAPI Errores inesperados en navegador Limpiar cach\u00e9 del navegador y borrar cookies <p>Consejo: Ejecutar los servicios de backend y frontend en modo desarrollo puede facilitar el rastreo de errores en tiempo real.</p>"},{"location":"manual/common-errors.html#iniciar-el-frontend-en-modo-desarrollo-npm-run-dev-iniciar-el-backend-fastapi-en-modo-desarrollo-uvicorn-mainapp-reload-port-8000","title":"<pre><code># Iniciar el frontend en modo desarrollo\nnpm run dev\n\n# Iniciar el backend (FastAPI) en modo desarrollo\nuvicorn main:app --reload --port 8000\n</code></pre>","text":""},{"location":"manual/common-errors.html#soluciones-avanzadas","title":"Soluciones Avanzadas","text":""},{"location":"manual/common-errors.html#revision-de-logs","title":"Revisi\u00f3n de logs","text":"<p>Consultar los logs de los servicios es esencial para entender errores ocultos o fallos intermitentes. Es posible revisar logs globales o espec\u00edficos de un servicio.</p> <p>Sugerencia: Hacerlo mientras se reproduce el problema para identificar patrones de error o excepciones.</p> <pre><code># Ver logs en tiempo real de todos los servicios\ndocker compose logs -f\n\n# Ver logs espec\u00edficos del backend\ndocker compose logs backend\n</code></pre>"},{"location":"manual/common-errors.html#reconstruccion-completa-del-entorno","title":"Reconstrucci\u00f3n completa del entorno","text":"<p>Cuando los errores persisten y no pueden resolverse con acciones simples, se recomienda eliminar todos los contenedores, vol\u00famenes e im\u00e1genes, y realizar una reconstrucci\u00f3n completa del stack Docker.</p> <p>Advertencia: Esta acci\u00f3n eliminar\u00e1 datos persistentes, incluyendo registros de usuarios y chistes si no se hace una copia de seguridad previa.</p> <pre><code># Eliminar contenedores, redes y vol\u00famenes\ndocker compose down -v\n\n# Reconstruir todo el entorno desde cero\ndocker compose up --build --force-recreate\n</code></pre>"},{"location":"manual/common-errors.html#recomendaciones-finales","title":"Recomendaciones Finales","text":"<p>Si despu\u00e9s de aplicar las soluciones anteriores el problema contin\u00faa:</p> <ol> <li>Verifica que todos los servicios est\u00e9n activos y escuchando en los puertos correctos.</li> <li>Revisa la consistencia de las variables de entorno en todos los servicios.</li> <li>Consulta la documentaci\u00f3n t\u00e9cnica incluida en el repositorio.</li> <li>Si necesitas soporte adicional, prepara y comparte al equipo t\u00e9cnico:</li> <li>Capturas de pantalla del error.</li> <li>Pasos exactos para reproducir el problema.</li> <li>Fragmentos relevantes de los logs del sistema.</li> </ol>"},{"location":"manual/common-errors.html#confirmar-que-todos-los-contenedores-esten-corriendo-correctamente-docker-compose-ps","title":"<pre><code># Confirmar que todos los contenedores est\u00e9n corriendo correctamente\ndocker compose ps\n</code></pre>","text":"<p>Siguiente paso: Revisa la secci\u00f3n Requisitos del Entorno para confirmar que tu sistema est\u00e1 configurado correctamente.</p>"},{"location":"manual/installation.html","title":"Instalaci\u00f3n","text":""},{"location":"manual/installation.html#preparacion-del-entorno","title":"Preparaci\u00f3n del Entorno","text":"<p>Antes de iniciar el despliegue del sistema, es necesario preparar el entorno en el servidor o m\u00e1quina local que actuar\u00e1 como host. A continuaci\u00f3n, se detallan los pasos para instalar las herramientas necesarias y configurar las variables de entorno requeridas para el funcionamiento de JokeAppWeb.</p>"},{"location":"manual/installation.html#instalacion-de-herramientas-necesarias","title":"Instalaci\u00f3n de herramientas necesarias","text":"<p>Para preparar el entorno de ejecuci\u00f3n del sistema JokeAppWeb, es necesario instalar una serie de herramientas que permitir\u00e1n la orquestaci\u00f3n de servicios, gesti\u00f3n de contenedores, configuraci\u00f3n del firewall, y exposici\u00f3n del sistema a trav\u00e9s de la red. A continuaci\u00f3n, se detallan los pasos necesarios.</p> <p>Se debe contar con privilegios de superusuario para instalar estas herramientas.</p>"},{"location":"manual/installation.html#actualizacion-del-sistema","title":"Actualizaci\u00f3n del sistema","text":"<p>Se recomienda comenzar actualizando el sistema para contar con las \u00faltimas versiones de los paquetes disponibles:</p> <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"manual/installation.html#instalacion-de-git","title":"Instalaci\u00f3n de Git","text":"<p>Git fue el sistema de control de versiones utilizado para gestionar el c\u00f3digo fuente de la aplicaci\u00f3n. Para instalarlo, se ejecut\u00f3:</p> <pre><code>sudo apt install git\n</code></pre>"},{"location":"manual/installation.html#instalacion-de-docker-y-docker-compose","title":"Instalaci\u00f3n de Docker y Docker Compose","text":"<p>Docker es el motor de contenedores que se emplea para ejecutar tanto el backend como la base de datos y otras dependencias de la aplicaci\u00f3n. Se instala usando el script oficial:</p> <pre><code>curl -sSL https://get.docker.com | sh\n</code></pre> <p>Luego, se agrega el usuario actual al grupo docker para evitar usar sudo en cada comando:</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>Importante: se debe cerrar y volver a iniciar sesi\u00f3n para que este cambio tenga efecto.</p> <p>Habilitar el servicio de Docker al arranque del sistema:</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Verificar que Docker est\u00e9 correctamente instalado:</p> <pre><code>docker run hello-world\n</code></pre> <p>Instalar el complemento oficial de Docker Compose (para versiones modernas):</p> <pre><code>sudo apt install docker-compose-plugin\n</code></pre>"},{"location":"manual/installation.html#instalacion-de-nginx","title":"Instalaci\u00f3n de Nginx","text":"<p>Aunque el despliegue externo se realiza mediante t\u00faneles de Cloudflare, se instala Nginx como servidor web auxiliar y para futuras configuraciones de proxy inverso:</p> <pre><code>sudo apt install nginx\nsudo systemctl start nginx\nsudo systemctl enable nginx\n</code></pre>"},{"location":"manual/installation.html#instalacion-de-ufw-firewall","title":"Instalaci\u00f3n de UFW (Firewall)","text":"<p>El firewall UFW se emplea para permitir \u00fanicamente las conexiones necesarias hacia el servidor:</p> <pre><code>sudo apt install ufw\n</code></pre>"},{"location":"manual/installation.html#instalacion-del-cliente-ddns-no-ip","title":"Instalaci\u00f3n del cliente DDNS No-IP","text":"<p>Para mantener el dominio enlazado a una IP p\u00fablica din\u00e1mica, se instala el cliente No-IP:</p> <pre><code>wget --content-disposition https://www.noip.com/download/linux/latest\ntar xf noip-duc_3.3.0.tar.gz\ncd noip-duc_3.3.0/binaries\nsudo apt install ./noip-duc_3.3.0_arm64.deb  \n</code></pre>"},{"location":"manual/installation.html#instalacion-de-cloudflared-cliente-de-tuneles-de-cloudflare","title":"Instalaci\u00f3n de Cloudflared (cliente de t\u00faneles de Cloudflare)","text":"<p>Para exponer de forma segura la aplicaci\u00f3n frontend sin abrir puertos en el router ni configurar certificados SSL manualmente, se emplea Cloudflare Tunnel. El cliente cloudflared se instala de la siguiente manera:</p> <pre><code>curl -L https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-archive-keyring.gpg &gt;/dev/null\necho \"deb [signed-by=/usr/share/keyrings/cloudflare-archive-keyring.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/cloudflared.list\nsudo apt update\nsudo apt install cloudflared -y\n</code></pre>"},{"location":"manual/system-description.html","title":"Descripci\u00f3n del Sistema","text":"<p>JokeAppWeb es una aplicaci\u00f3n web que permite a los usuarios interactuar con una colecci\u00f3n de chistes. A trav\u00e9s de una interfaz intuitiva y din\u00e1mica, el usuario puede generar nuevos chistes de forma aleatoria, reaccionar ante ellos con \"like\" o \"dislike\", y visualizar un ranking de los chistes m\u00e1s valorados. El sistema est\u00e1 orientado a ofrecer una experiencia entretenida y sencilla para usuarios autenticados.</p>"},{"location":"manual/system-description.html#funcionalidades-principales","title":"Funcionalidades principales","text":"<p>Las funcionalidades principales que ofrece la aplicaci\u00f3n son:</p> <ul> <li>Registro de nuevos usuarios.</li> <li>Inicio de sesi\u00f3n (login) y cierre de sesi\u00f3n (logout).</li> <li>Generaci\u00f3n de chistes aleatorios.</li> <li>Calificaci\u00f3n de chistes con \"like\" o \"dislike\".</li> <li>Visualizaci\u00f3n de un ranking basado en la puntuaci\u00f3n de los chistes.</li> </ul>"},{"location":"manual/system-description.html#usuarios-y-roles-del-sistema","title":"Usuarios y roles del sistema","text":"<p>El sistema est\u00e1 dise\u00f1ado para un \u00fanico tipo de usuario:</p> <ul> <li>Usuario autenticado: puede acceder a todas las funcionalidades disponibles tras iniciar sesi\u00f3n, como ver chistes, calificarlos y consultar el ranking.</li> </ul> <p>No se contemplan roles administrativos ni m\u00faltiples niveles de acceso en esta versi\u00f3n.</p>"},{"location":"manual/system-description.html#arquitectura-general-del-sistema","title":"Arquitectura general del sistema","text":"<p>La arquitectura del sistema est\u00e1 basada en una estructura cliente-servidor, compuesta por tres capas principales:</p> <ul> <li>Frontend: Desarrollado con React y empaquetado con Vite, este componente se encarga de la interfaz de usuario y la interacci\u00f3n con el usuario final.</li> <li>Backend: Implementado con FastAPI (Python), expone una API RESTful que gestiona la l\u00f3gica de negocio, autenticaci\u00f3n de usuarios y acceso a la base de datos.</li> <li>Base de datos: Utiliza PostgreSQL para el almacenamiento persistente de usuarios, chistes y sus respectivas calificaciones.</li> </ul> <p>Los tres componentes se orquestan mediante Docker Compose para facilitar el despliegue en entornos controlados, y se integran bajo un mismo servidor a trav\u00e9s de un proxy inverso configurado con Nginx.</p>"},{"location":"manual/system-requirements.html","title":"Requisitos del Sistema","text":"<p>El sistema fue desplegado y probado en un entorno Linux con arquitectura ARM64, espec\u00edficamente sobre una distribuci\u00f3n Ubuntu 25.04. A continuaci\u00f3n, se detallan los requisitos de hardware, software y componentes externos necesarios para replicar el entorno de ejecuci\u00f3n.</p>"},{"location":"manual/system-requirements.html#sistema-operativo","title":"Sistema Operativo","text":"<p>Ubuntu 25.04 (64 bits, arquitectura ARM64)</p> <p>Nota: Tambi\u00e9n puede ser desplegado en otras distribuciones Linux compatibles como Debian, siempre que se instalen las versiones adecuadas de los servicios utilizados.</p>"},{"location":"manual/system-requirements.html#herramientas-y-paquetes-del-sistema-instalados","title":"Herramientas y paquetes del sistema instalados","text":"Paquete Versi\u00f3n Funci\u00f3n docker-ce 5:28.3.2 Motor de contenedores Docker docker-ce-cli 5:28.3.2 Interfaz de l\u00ednea de comandos docker-compose-plugin 2.38.2 Orquestaci\u00f3n de servicios docker-rootless-extras 5:28.3.2 Ejecuci\u00f3n sin privilegios docker-model-plugin 0.1.33 Complemento de Docker nginx 1.26.3 Servidor web y proxy inverso noip-duc 3.3.0 Cliente DDNS de No-IP openssh-server 1:9.9p1 Servidor SSH ufw 0.36.2 Firewall de red"},{"location":"manual/system-requirements.html#puertos-requeridos","title":"Puertos requeridos","text":"<p>Los siguientes puertos deben estar disponibles en el servidor y/o configurados en el router para permitir la operaci\u00f3n completa del sistema:</p> Puerto Uso 22 Acceso SSH desde red local 52318 Puerto interno del servidor web <p>Si se utiliza Cloudflare Tunnel, los puertos 80 y 443 no son necesarios externamente.</p>"},{"location":"manual/system-requirements.html#equipamiento-de-red","title":"Equipamiento de red","text":"<p>Para permitir el acceso desde el exterior, se emple\u00f3 un router Mercusys AC10, el cual permite configurar reglas de port forwarding para exponer puertos internos del servidor hacia el exterior. Esta funcionalidad es necesaria para habilitar servicios como SSH o HTTP desde fuera de la red local.</p>"},{"location":"manual/configuration/Deploymentdiagram.html","title":"Deploymentdiagram","text":""},{"location":"manual/configuration/Deploymentdiagram.html#diagrama-de-despliegue","title":"Diagrama de Despliegue","text":"<p>A continuaci\u00f3n se presenta un diagrama de implementaci\u00f3n UML que representa la arquitectura del sistema JokeAppWeb. El diagrama ilustra c\u00f3mo se distribuyen los componentes (cliente, servidor backend y base de datos), sus entornos de ejecuci\u00f3n y los protocolos utilizados para la comunicaci\u00f3n entre ellos. </p> <p>Este diagrama es \u00fatil para entender el contexto del sistema antes de proceder con la configuraci\u00f3n de red, proxy y servicios.</p>"},{"location":"manual/configuration/nginx.html","title":"Uso de Nginx en la Imagen Docker del Frontend","text":"<p>Para servir la aplicaci\u00f3n frontend, se utiliz\u00f3 Nginx dentro del contenedor Docker de la imagen <code>app-frontend</code>. El <code>Dockerfile</code> de la aplicaci\u00f3n frontend est\u00e1 dividido en dos etapas principales:</p> <ul> <li> <p>Primera etapa (build):     Se utiliza una imagen base de Node.js (<code>node:20</code>) para instalar las dependencias y compilar el proyecto React con Vite, generando los archivos est\u00e1ticos en la carpeta <code>/app/dist</code>.</p> </li> <li> <p>Segunda etapa (producci\u00f3n):     Se usa la imagen base <code>nginx:alpine</code> para servir los archivos est\u00e1ticos. La carpeta <code>/app/dist</code> generada en la etapa de build se copia a la ruta por defecto donde Nginx sirve contenido est\u00e1tico: <code>/usr/share/nginx/html</code>.</p> </li> </ul> <p>Esto garantiza que el frontend sea servido de forma eficiente por Nginx, aprovechando su rendimiento y estabilidad para aplicaciones web est\u00e1ticas.</p>"},{"location":"manual/configuration/nginx.html#configuracion-personalizada-de-nginx","title":"Configuraci\u00f3n Personalizada de Nginx","text":"<p>Se incluye un archivo <code>nginx.conf</code> personalizado dentro del contenedor, copiado en la ruta <code>/etc/nginx/nginx.conf</code>. Este archivo contiene una configuraci\u00f3n b\u00e1sica adaptada para aplicaciones SPA (Single Page Application), permitiendo que las rutas gestionadas por React funcionen correctamente.</p> <p>El contenido principal del archivo <code>nginx.conf</code> es:</p> <pre><code>worker_processes auto;\n\nevents {\n        worker_connections 1024;\n}\n\nhttp {\n        include       mime.types;\n        default_type  application/octet-stream;\n\n        server {\n                listen 80;\n                server_name localhost;\n\n                root /usr/share/nginx/html;\n                index index.html;\n\n                location / {\n                        try_files $uri $uri/ /index.html;\n                }\n        }\n}\n</code></pre> <p>Explicaci\u00f3n t\u00e9cnica:</p> <ul> <li><code>worker_processes auto;</code> y <code>worker_connections 1024;</code> optimizan el manejo de m\u00faltiples conexiones simult\u00e1neas.</li> <li>Se sirve contenido est\u00e1tico desde <code>/usr/share/nginx/html</code>, que contiene los archivos compilados del frontend.</li> <li>La directiva <code>try_files $uri $uri/ /index.html;</code> es fundamental para aplicaciones SPA, ya que redirige todas las rutas que no sean archivos est\u00e1ticos reales hacia <code>index.html</code>, permitiendo que React Router (u otro router del lado cliente) maneje la navegaci\u00f3n.</li> </ul>"},{"location":"manual/configuration/nginx.html#exposicion-de-puertos-y-acceso","title":"Exposici\u00f3n de Puertos y Acceso","text":"<p>Dentro del contenedor, Nginx escucha en el puerto 80. Este puerto est\u00e1 mapeado al puerto 52318 en el host, permitiendo acceder a la aplicaci\u00f3n frontend mediante la URL:</p> <pre><code>http://localhost:52318\n</code></pre> <p>Para exponer la aplicaci\u00f3n frontend de manera segura y con un dominio personalizado, se configur\u00f3 un t\u00fanel de Cloudflare (Cloudflare Tunnel) con un archivo <code>config.yaml</code> que indica que el servicio a exponer p\u00fablicamente est\u00e1 en la URL mencionada</p> <p>Este t\u00fanel redirige el tr\u00e1fico del subdominio de Cloudflare directamente al contenedor que sirve la app con Nginx.</p>"},{"location":"manual/configuration/network/domain.html","title":"Configuraci\u00f3n de red","text":""},{"location":"manual/configuration/network/domain.html#configuracion-de-red-y-acceso-externo","title":"Configuraci\u00f3n de Red y Acceso Externo","text":"<p>En este proyecto se implementaron dos m\u00e9todos para exponer la aplicaci\u00f3n JokeAppWeb a Internet: la configuraci\u00f3n principal mediante Cloudflare Tunnel (recomendada por su seguridad y facilidad de gesti\u00f3n), y una configuraci\u00f3n secundaria basada en port forwarding y DNS din\u00e1mico con No-IP. A continuaci\u00f3n se describen ambos enfoques.</p>"},{"location":"manual/configuration/network/domain.html#1-exposicion-segura-con-cloudflare-tunnel-metodo-principal","title":"1. Exposici\u00f3n Segura con Cloudflare Tunnel (M\u00e9todo Principal)","text":"<p>Para exponer p\u00fablicamente la aplicaci\u00f3n JokeAppWeb de forma segura y profesional a trav\u00e9s de un dominio HTTPS, se configur\u00f3 un t\u00fanel mediante la plataforma Cloudflare, aprovechando las funcionalidades de su servicio Cloudflare Tunnel. Esto permite encapsular el tr\u00e1fico hacia un servidor en red local (detr\u00e1s de NAT o sin IP fija), a trav\u00e9s de una conexi\u00f3n segura, sin necesidad de exponer directamente la IP p\u00fablica ni abrir puertos adicionales.</p>"},{"location":"manual/configuration/network/domain.html#creacion-de-tunel-en-cloudflare","title":"Creaci\u00f3n de t\u00fanel en Cloudflare","text":"<p>La configuraci\u00f3n se realiz\u00f3 en la secci\u00f3n Tunnels del panel de control de Cloudflare, dentro del dominio principal <code>ralvarez.dev</code>, bajo un proyecto llamado <code>deploying-jokes</code>.</p> Configuraci\u00f3n del cloudflare tunnels <p>Cloudflare a\u00f1ade autom\u00e1ticamente un registro DNS tipo CNAME o A que vincula <code>deploying-jokes.ralvarez.dev</code> con el destino configurado. Esto permite acceder desde cualquier navegador a ese subdominio como si fuera una aplicaci\u00f3n en la nube.</p>"},{"location":"manual/configuration/network/domain.html#instalacion-y-configuracion-inicial-de-cloudflared","title":"Instalaci\u00f3n y Configuraci\u00f3n Inicial de Cloudflared","text":"<p>Los pasos principales para instalar y configurar la herramienta cloudflared en el servidor fueron:</p> <p>Actualizar e instalar dependencias:</p> <pre><code>sudo apt update\nsudo apt upgrade -y\nsudo apt install curl lsb-release -y\n</code></pre> <p>Agregar la llave GPG y el repositorio oficial de Cloudflare:</p> <pre><code>curl -L https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-archive-keyring.gpg &gt;/dev/null\necho \"deb [signed-by=/usr/share/keyrings/cloudflare-archive-keyring.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/cloudflared.list\nsudo apt update\n</code></pre> <p>Instalar el paquete cloudflared:</p> <pre><code>sudo apt install cloudflared -y\ncloudflared --version\n</code></pre> <p>Autenticarse con Cloudflare y crear el t\u00fanel:</p> <pre><code>cloudflared tunnel login\ncloudflared tunnel create deploying-jokes\n</code></pre>"},{"location":"manual/configuration/network/domain.html#archivo-configyml","title":"Archivo config.yml","text":"<p>Se cre\u00f3 un archivo de configuraci\u00f3n <code>config.yml</code> en <code>/etc/cloudflared/</code> con la siguiente estructura b\u00e1sica:</p> <pre><code>url: http://localhost:52318\ntunnel: &lt;ID-del-t\u00fanel&gt;\ncredentials-file: /home/admin/.cloudflared/&lt;archivo-de-credenciales&gt;.json\n</code></pre> <ul> <li><code>url</code> indica la direcci\u00f3n local donde la aplicaci\u00f3n est\u00e1 siendo servida, que en este caso es el contenedor frontend accesible en el puerto 52318.</li> <li><code>tunnel</code> es el identificador \u00fanico generado al crear el t\u00fanel.</li> <li><code>credentials-file</code> es la ruta al archivo JSON con las credenciales necesarias para que cloudflared pueda autenticar y ejecutar el t\u00fanel.</li> </ul>"},{"location":"manual/configuration/network/domain.html#configuracion-del-subdominio-en-cloudflare","title":"Configuraci\u00f3n del Subdominio en Cloudflare","text":"<p>En el panel de Cloudflare, se realizaron los siguientes pasos para vincular el t\u00fanel con un dominio p\u00fablico:</p> <ul> <li>Registro DNS: Se cre\u00f3 un registro CNAME para el subdominio <code>deploying-jokes</code> dentro del dominio principal <code>ralvarez.dev</code>. Este CNAME apunta a <code>xxxx.cfargotunnel.com</code> (la URL del t\u00fanel proporcionada por Cloudflare).</li> <li> <p>Enrutamiento del t\u00fanel: Se asoci\u00f3 el t\u00fanel <code>deploying-jokes</code> con el subdominio <code>deploying-jokes.ralvarez.dev</code> usando el comando:</p> <pre><code>cloudflared tunnel route dns deploying-jokes deploying-jokes.ralvarez.dev\n</code></pre> </li> <li> <p>Configuraci\u00f3n del servicio: Se instal\u00f3 y habilit\u00f3 el servicio systemd de cloudflared para que el t\u00fanel inicie autom\u00e1ticamente con el sistema operativo:</p> <pre><code>sudo cloudflared service install --config /etc/cloudflared/config.yml\nsudo systemctl start cloudflared\nsudo systemctl status cloudflared\n</code></pre> </li> </ul>"},{"location":"manual/configuration/network/domain.html#resultado-final","title":"Resultado Final","text":"<p>Gracias a esta configuraci\u00f3n:</p> <ul> <li>El tr\u00e1fico dirigido a <code>https://deploying-jokes.ralvarez.dev/</code> pasa a trav\u00e9s de Cloudflare, que se encarga de gestionar el cifrado HTTPS.</li> <li>Cloudflare Tunnel redirige este tr\u00e1fico al servicio local en <code>http://localhost:52318</code>, que corresponde al contenedor Docker con Nginx sirviendo el frontend.</li> <li>No es necesario abrir puertos externos en el router ni configurar certificados SSL en el servidor local, simplificando la seguridad y el despliegue.</li> </ul>"},{"location":"manual/configuration/network/domain.html#2-exposicion-mediante-port-forwarding-y-dns-dinamico-con-no-ip-metodo-secundario","title":"2. Exposici\u00f3n mediante Port Forwarding y DNS Din\u00e1mico con No-IP (M\u00e9todo Secundario)","text":"<p>Como alternativa, se implement\u00f3 una configuraci\u00f3n tradicional basada en port forwarding y DNS din\u00e1mico, \u00fatil en escenarios donde no se puede utilizar Cloudflare Tunnel.</p>"},{"location":"manual/configuration/network/domain.html#obtencion-de-dominio","title":"Obtenci\u00f3n de dominio","text":"<p>Para efectos de este proyecto, se emple\u00f3 el dominio <code>ralvarez.dev</code> obtenido en Cloudflare como base para el acceso externo y la publicaci\u00f3n segura de la aplicaci\u00f3n, asegurando un control centralizado y profesional sobre el entorno de despliegue.</p> Dominio ralvarez.dev"},{"location":"manual/configuration/network/domain.html#asociacion-de-dominio-dinamico-con-ip-publica-no-ip","title":"Asociaci\u00f3n de dominio din\u00e1mico con IP p\u00fablica (No-IP)","text":"<p>Para permitir el acceso remoto a la aplicaci\u00f3n JokeAppWeb desde fuera de la red local, se realiz\u00f3 la configuraci\u00f3n de un dominio din\u00e1mico mediante la plataforma No-IP, utilizando como dominio principal: <code>ralvarez.dev</code>. Esto facilita el acceso a trav\u00e9s de un nombre de dominio en lugar de una direcci\u00f3n IP p\u00fablica, incluso si esta cambia peri\u00f3dicamente (como suele suceder en conexiones residenciales).</p>"},{"location":"manual/configuration/network/domain.html#instalacion-y-configuracion-del-cliente-no-ip-duc","title":"Instalaci\u00f3n y configuraci\u00f3n del cliente No-IP (DUC)","text":"<p>Para mantener actualizada la IP p\u00fablica asociada al dominio, se instal\u00f3 el cliente oficial de No-IP DUC (Dynamic Update Client) en el servidor. A continuaci\u00f3n, se detallan los pasos ejecutados en un sistema Linux (arquitectura ARM64):</p> <p>Instalaci\u00f3n del cliente DUC</p> <pre><code># Descargar el cliente\nwget --content-disposition https://www.noip.com/download/linux/latest\n\n# Extraer los archivos\ntar xf noip-duc_3.3.0.tar.gz\ncd noip-duc_3.3.0/binaries\n\n# Instalar el paquete .deb (en este caso, para arquitectura ARM64)\nsudo apt install ./noip-duc_3.3.0_arm64.deb\n</code></pre> <p>Uso del cliente DUC</p> <p>Ejecutar el programa para iniciarlo:</p> <pre><code>noip-duc\n</code></pre> <p>Iniciar sesi\u00f3n y enviar actualizaciones autom\u00e1ticas:</p> <pre><code>noip-duc -g all.ddnskey.com --username &lt;DDNS Key Username&gt; --password &lt;DDNS Key Password&gt;\n</code></pre> <p>En este paso se utilizaron las credenciales DDNS para autenticar el cliente y vincular el dominio din\u00e1mico con la IP p\u00fablica del servidor.</p>"},{"location":"manual/configuration/network/domain.html#creacion-de-un-servicio-para-ejecutar-no-ip-duc-automaticamente","title":"Creaci\u00f3n de un servicio para ejecutar No-IP DUC autom\u00e1ticamente","text":"<p>Para asegurar que el cliente DUC de No-IP se inicie autom\u00e1ticamente cada vez que el servidor se reinicie, se cre\u00f3 un servicio personalizado de systemd. Esto garantiza que la IP p\u00fablica se actualice de forma continua sin intervenci\u00f3n manual.</p> <p>Pasos realizados</p> <p>Verificar la ubicaci\u00f3n del ejecutable de noip-duc:</p> <pre><code>which noip-duc\n</code></pre> <p>Crear un nuevo archivo de servicio:</p> <pre><code>sudo nano /etc/systemd/system/noip-duc.service\n</code></pre> <p>Contenido del servicio:</p> <pre><code>[Unit]\nDescription=No-IP Dynamic Update Client\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/noip-duc\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Recargar systemd y habilitar el servicio:</p> <pre><code>sudo systemctl daemon-reexec\nsudo systemctl enable noip-duc\nsudo systemctl start noip-duc\n</code></pre> <p>Esto garantiza que noip-duc se ejecute autom\u00e1ticamente al iniciar el sistema.</p>"},{"location":"manual/configuration/network/domain.html#configuracion-del-router-port-forwarding","title":"Configuraci\u00f3n del router (Port Forwarding)","text":"<p>El servicio No-IP no abre puertos autom\u00e1ticamente, por lo que fue necesario realizar la configuraci\u00f3n manual del router Mercusys AC10 para habilitar el acceso remoto.</p> <p>Port forwarding para acceso SSH</p> <p>Se configur\u00f3 una entrada para redirigir conexiones externas al servicio SSH del servidor:</p> Servicio SSH <p>Esta configuraci\u00f3n permite acceder de forma remota al servidor v\u00eda SSH usando el puerto externo 53479, lo cual es una estrategia \u00fatil y segura al evitar el puerto 22 por defecto.</p> <p>Port forwarding para acceso HTTP</p> <p>Tambi\u00e9n se configur\u00f3 un reenv\u00edo de puerto para publicar un servicio HTTP personalizado:</p> Servicio HTTP <p>Esta configuraci\u00f3n indica que se est\u00e1 publicando un servicio web desde un puerto interno (52318) accesible desde Internet a trav\u00e9s del puerto externo 40842.</p>"},{"location":"manual/configuration/network/domain.html#definicion-de-variable-de-entorno-para-el-puerto-http","title":"Definici\u00f3n de variable de entorno para el puerto HTTP","text":"<p>Para facilitar la gesti\u00f3n y referencia del puerto interno HTTP utilizado en la configuraci\u00f3n del router, se a\u00f1adi\u00f3 una variable de entorno en el servidor ejecutando el siguiente comando:</p> <pre><code>echo 'export HTTP_PORT=52318' &gt;&gt; ~/.bashrc\n</code></pre> <p>Esto permite acceder f\u00e1cilmente al valor del puerto desde scripts y sesiones de terminal, mejorando la mantenibilidad y claridad de la configuraci\u00f3n.</p>"},{"location":"manual/configuration/network/domain.html#verificacion-del-acceso-remoto","title":"Verificaci\u00f3n del acceso remoto","text":"<p>Tras realizar la configuraci\u00f3n de dominio din\u00e1mico, port forwarding y ejecuci\u00f3n del cliente DUC, se realiz\u00f3 una verificaci\u00f3n desde una red externa (por ejemplo, conexi\u00f3n de datos m\u00f3viles), obteniendo resultados exitosos:</p> <ul> <li>Se confirm\u00f3 el enlace de la IP p\u00fablica <code>38.25.235.159</code> al dominio din\u00e1mico configurado.</li> <li>Se comprob\u00f3 el acceso a la aplicaci\u00f3n web mediante el nombre de dominio.</li> <li>Se valid\u00f3 la conectividad remota al servidor v\u00eda SSH usando el puerto externo configurado.</li> <li>La plataforma de No-IP indic\u00f3 que la configuraci\u00f3n DDNS y de red est\u00e1 funcionando correctamente.</li> </ul> Verificaci\u00f3n del acceso remoto <p>Ambos m\u00e9todos permiten exponer la aplicaci\u00f3n a Internet, pero se recomienda el uso de Cloudflare Tunnel como soluci\u00f3n principal por su mayor seguridad, facilidad de gesti\u00f3n y soporte nativo de HTTPS sin necesidad de abrir puertos en el router.</p>"},{"location":"manual/configuration/security/https.html","title":"Configuraci\u00f3n del HTTPS","text":"<p>Uno de los objetivos clave en el despliegue de aplicaciones web modernas es garantizar que las conexiones se realicen a trav\u00e9s de un canal seguro, utilizando el protocolo HTTPS. Tradicionalmente, esto implica la instalaci\u00f3n y configuraci\u00f3n de certificados SSL en el servidor, adem\u00e1s de la apertura del puerto 443 y el mantenimiento peri\u00f3dico de dichos certificados. Sin embargo, en este proyecto, se opt\u00f3 por una soluci\u00f3n m\u00e1s robusta, simple y automatizada: Cloudflare Tunnel.</p> <p>Gracias a la integraci\u00f3n con la plataforma Cloudflare, se logr\u00f3 exponer la aplicaci\u00f3n JokeAppWeb al p\u00fablico a trav\u00e9s del subdominio <code>deploying-jokes.ralvarez.dev</code> utilizando HTTPS sin necesidad de instalar manualmente un certificado SSL en el servidor. Esto es posible porque Cloudflare, al actuar como intermediario entre el usuario y el servidor local, se encarga de gestionar autom\u00e1ticamente la entrega de certificados v\u00e1lidos y de cifrar la comunicaci\u00f3n desde su red hasta el cliente final.</p> <p>Con esta configuraci\u00f3n, ya no es necesario instalar herramientas como Let's Encrypt ni usar Certbot. Tampoco es necesario abrir el puerto 443 en el router ni preocuparse por renovar certificados manualmente. Cloudflare ofrece esta funcionalidad de manera integrada a trav\u00e9s del servicio Cloudflare Tunnel, el cual encapsula el tr\u00e1fico desde el navegador hasta la red local de forma segura.</p> <p>Adem\u00e1s del cifrado HTTPS, esta estrategia aporta otras ventajas importantes, como mayor disponibilidad, protecci\u00f3n ante ataques (DDoS, bots, escaneo de puertos), balanceo de carga, y una capa extra de anonimato al no exponer directamente la IP p\u00fablica del servidor.</p>"},{"location":"manual/configuration/security/ufw.html","title":"Configuraci\u00f3n del Firewall con UFW (Uncomplicated Firewall)","text":"<p>Como parte de las medidas de seguridad del servidor donde se despliega la aplicaci\u00f3n JokeAppWeb, se configur\u00f3 el firewall UFW (Uncomplicated Firewall) para controlar y restringir el acceso a los servicios esenciales del sistema. Esta configuraci\u00f3n ayuda a reducir la exposici\u00f3n a posibles ataques externos, permitiendo \u00fanicamente el tr\u00e1fico necesario.</p>"},{"location":"manual/configuration/security/ufw.html#politica-general-del-firewall","title":"Pol\u00edtica general del firewall","text":"<p>Se definieron pol\u00edticas por defecto que bloquean cualquier intento de conexi\u00f3n entrante, excepto para los puertos expl\u00edcitamente permitidos, mientras que se permite la salida libre de conexiones hacia Internet para mantener la funcionalidad del sistema:</p> <pre><code>sudo ufw default deny incoming\nsudo ufw default allow outgoing\n</code></pre>"},{"location":"manual/configuration/security/ufw.html#puertos-permitidos","title":"Puertos permitidos","text":"<p>Posteriormente, se habilitaron solo los puertos requeridos por los servicios activos, seg\u00fan se detalla a continuaci\u00f3n:</p> <ul> <li>Puerto 22/TCP: acceso SSH tradicional (usado para administraci\u00f3n remota).</li> <li>Puerto 52318/TCP: puerto interno utilizado por la aplicaci\u00f3n web, el cual fue expuesto externamente mediante reglas de reenv\u00edo de puertos en el router.</li> </ul> <pre><code>sudo ufw allow 22/tcp\nsudo ufw allow 52318/tcp\n</code></pre> <p>Esta configuraci\u00f3n tambi\u00e9n se aplica de forma autom\u00e1tica a las interfaces IPv6 si est\u00e1n habilitadas en el sistema.</p>"},{"location":"manual/configuration/security/ufw.html#activacion-del-firewall-y-verificacion","title":"Activaci\u00f3n del firewall y verificaci\u00f3n","text":"<p>Una vez configuradas las reglas, se activ\u00f3 el firewall:</p> <pre><code>sudo ufw enable\n</code></pre> <p>Para verificar el estado actual del firewall y las reglas activas:</p> <pre><code>sudo ufw status numbered\nsudo ufw status verbose\n</code></pre> <p>El resultado fue el siguiente:</p> <pre><code>Status: active\n\n    To                         Action      From\n    --                         ------      ----\n[ 1] 22/tcp                     ALLOW IN    Anywhere\n[ 2] 52318/tcp                  ALLOW IN    Anywhere\n[ 3] 22/tcp (v6)                ALLOW IN    Anywhere (v6)\n[ 4] 52318/tcp (v6)             ALLOW IN    Anywhere (v6)\n</code></pre> <p>Con esta configuraci\u00f3n, el servidor permite \u00fanicamente el acceso necesario para la gesti\u00f3n remota (SSH) y para la aplicaci\u00f3n desplegada, minimizando la superficie de ataque y reforzando la seguridad general del sistema.</p>"}]}