{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Despliegue de Software","text":"<p>En la presente documentaci\u00f3n, se explica todo lo relacionado con el despliegue de software, en particular, los temas visto durante la materia de Despliegue de Software del curso de Ingenier\u00eda en Computaci\u00f3n de la Universidad Rafael Urdaneta (URU) durante el trimestre 2025-B.</p> Universidad Rafael Urdaneta"},{"location":"index.html#integrantes","title":"Integrantes","text":"<p>A continuaci\u00f3n, se presenta la lista de los integrantes del equipo que ha colaborado en la creaci\u00f3n de esta documentaci\u00f3n:</p> <ul> <li>Victoria Acosta, Victoriaag6.</li> <li>Ram\u00f3n \u00c1lvarez, ralvarezdev.</li> <li>Idiar Chac\u00edn, idiarj.</li> <li>Carlos Fern\u00e1ndez, carlosfernandezdev.</li> <li>Angelina Pineda, Ange1023.</li> <li>Valeria Salcedo, valeriasalcedo.</li> </ul>"},{"location":"index.html#indice","title":"\u00cdndice","text":"<ol> <li>Almacenamiento<ol> <li>RAID<ol> <li>Tipos de RAID<ol> <li>RAID 0</li> <li>RAID 1</li> <li>RAID 5</li> <li>RAID 6</li> <li>RAID 10</li> <li>RAID 50</li> <li>RAID 60</li> </ol> </li> <li>Hot Swap</li> <li>Controladoras RAID<ol> <li>Por Software</li> <li>Por Hardware</li> </ol> </li> </ol> </li> </ol> </li> <li>Virtualizaci\u00f3n<ol> <li>Contenedores<ol> <li>Docker</li> </ol> </li> <li>M\u00e1quinas Virtuales (VM)<ol> <li>Definici\u00f3n</li> <li>Prop\u00f3sito General</li> <li>Componentes T\u00e9cnicos</li> <li>Tipos de Hipervisores</li> <li>Gesti\u00f3n y Uso</li> <li>Formatos de Disco Virtual</li> <li>Casos de Uso</li> </ol> </li> <li>Servidores Virtuales (VPS)<ol> <li>\u00bfQu\u00e9 es un Servidor Virtual?</li> <li>\u00bfC\u00f3mo Funciona un VPS?</li> <li>Tipos de Servidores Virtuales</li> <li>Hipervisores Utilizados en VPS</li> <li>Usos Comunes del VPS</li> <li>Ventajas del VPS</li> <li>Comparaci\u00f3n con Otros Modelos de Hosting</li> <li>Herramientas de Gesti\u00f3n y Paneles</li> <li>Notas T\u00e9cnicas</li> </ol> </li> <li>Empaquetadores<ol> <li>Vite</li> </ol> </li> </ol> </li> <li>Sistemas de Gesti\u00f3n<ol> <li>PM2</li> <li>CMS</li> </ol> </li> <li>Redes<ol> <li>Dominio</li> <li>IP P\u00fablica</li> <li>Port Forwarding</li> <li>Protocolos<ol> <li>Seguridad<ol> <li>SSL/TLS</li> </ol> </li> </ol> </li> <li>Seguridad<ol> <li>Firewall<ol> <li>UFW</li> </ol> </li> </ol> </li> <li>Hosting<ol> <li>Apache</li> <li>Nginx<ol> <li>\u00bfQu\u00e9 es Nginx?</li> <li>\u00bfPara qu\u00e9 Sirve Nginx?</li> <li>Arquitectura de Nginx</li> <li>Casos de Uso Comunes</li> <li>Balanceo de Carga</li> <li>Algoritmos Soportados</li> <li>Soporte para HTTPS (TLS/SSL)</li> <li>Ventajas de Nginx</li> <li>Diferencias con Apache</li> </ol> </li> <li>Seguridad</li> <li>Virtual Host</li> </ol> </li> </ol> </li> </ol>"},{"location":"management-systems/cms.html","title":"Sistemas de Gesti\u00f3n de Contenidos (CMS)","text":""},{"location":"management-systems/cms.html#definicion","title":"Definici\u00f3n","text":"<p>Un CMS (Content Management System) es una plataforma de software que permite a los usuarios crear, editar, organizar y publicar contenido en sitios web sin necesidad de programar manualmente. Facilita la separaci\u00f3n entre el contenido, la estructura del sitio y su presentaci\u00f3n visual.</p>"},{"location":"management-systems/cms.html#funcionalidades-comunes","title":"Funcionalidades Comunes","text":"<ul> <li>Edici\u00f3n de p\u00e1ginas y art\u00edculos</li> <li>Administraci\u00f3n de archivos multimedia</li> <li>Control de usuarios, roles y permisos</li> <li>Personalizaci\u00f3n mediante temas o plantillas</li> <li>Extensibilidad con m\u00f3dulos o plugins</li> <li>Gesti\u00f3n de men\u00fas, navegaci\u00f3n y estructura</li> <li>Optimizaci\u00f3n para buscadores (SEO)</li> <li>Internacionalizaci\u00f3n (idiomas)</li> <li>Integraci\u00f3n con herramientas externas (CRM, e-commerce, formularios)</li> </ul>"},{"location":"management-systems/cms.html#clasificacion-por-tipo","title":"Clasificaci\u00f3n por Tipo","text":""},{"location":"management-systems/cms.html#tradicionales-backend-frontend-acoplado","title":"Tradicionales (Backend + Frontend acoplado)","text":"<ul> <li>WordPress</li> <li>Joomla</li> <li>Drupal</li> <li>TYPO3</li> <li>Magento</li> <li>PrestaShop</li> </ul>"},{"location":"management-systems/cms.html#headless-cms-frontend-desacoplado","title":"Headless CMS (Frontend desacoplado)","text":"<ul> <li>Strapi</li> <li>Sanity</li> <li>Contentful</li> <li>Directus</li> <li>Netlify CMS</li> </ul>"},{"location":"management-systems/cms.html#saas-cms-como-servicio","title":"SaaS (CMS como servicio)","text":"<ul> <li>Wix</li> <li>Webflow</li> <li>Squarespace</li> <li>Shopify</li> </ul>"},{"location":"management-systems/cms.html#cms-por-lenguaje","title":"CMS por Lenguaje","text":"Lenguaje CMS destacados PHP WordPress, Drupal, Joomla, Magento, PrestaShop JavaScript Ghost (Node.js), Strapi, KeystoneJS Python Wagtail, Django CMS .NET Umbraco, Orchard Core Java Magnolia, OpenCMS Ruby RefineryCMS"},{"location":"management-systems/cms.html#componentes-tecnicos","title":"Componentes T\u00e9cnicos","text":"<ul> <li>Backend: Administra contenido, usuarios, configuraciones</li> <li>Frontend: Genera la interfaz p\u00fablica</li> <li>Base de datos: Almacena contenido estructurado</li> <li>Sistema de plantillas: Controla la presentaci\u00f3n visual</li> <li>M\u00f3dulos/Plugins: A\u00f1aden funcionalidades espec\u00edficas</li> <li>Editor WYSIWYG: Permite edici\u00f3n visual del contenido</li> <li>Gestor de archivos: Maneja im\u00e1genes, documentos, videos</li> <li>API: Permiten acceso program\u00e1tico al contenido (REST/GraphQL)</li> <li>Seguridad: Control de roles, autenticaci\u00f3n, actualizaci\u00f3n</li> </ul>"},{"location":"management-systems/cms.html#casos-de-uso-comunes","title":"Casos de Uso Comunes","text":"<ul> <li>Blogs y medios digitales</li> <li>Tiendas en l\u00ednea</li> <li>Portales corporativos</li> <li>Sitios institucionales y acad\u00e9micos</li> <li>Documentaci\u00f3n y bases de conocimiento</li> <li>Landing pages y cat\u00e1logos de productos</li> <li>Aplicaciones SPA con backend headless</li> </ul>"},{"location":"management-systems/cms.html#comparativa-tecnica","title":"Comparativa T\u00e9cnica","text":"CMS Tipo Lenguaje Base de Datos Frontend integrado API disponible WordPress Tradicional PHP MySQL S\u00ed REST API Drupal Tradicional PHP MySQL S\u00ed REST y GraphQL Joomla Tradicional PHP MySQL S\u00ed Opcional Magento E-commerce PHP MySQL S\u00ed REST y GraphQL Ghost Headless Node.js SQLite / MySQL No REST API Strapi Headless Node.js PostgreSQL, SQLite No REST y GraphQL Contentful Headless SaaS Interna No GraphQL Wagtail Tradicional Python PostgreSQL S\u00ed REST API"},{"location":"management-systems/cms.html#ventajas-de-usar-un-cms","title":"Ventajas de Usar un CMS","text":"Ventaja Descripci\u00f3n Reducci\u00f3n de tiempo Permite lanzar sitios en menos tiempo No requiere codificaci\u00f3n Usuarios sin conocimientos t\u00e9cnicos pueden gestionar contenido Escalabilidad Algunos CMS soportan miles de p\u00e1ginas y usuarios Personalizaci\u00f3n Uso de plantillas y extensiones adaptables Comunidad y soporte Grandes comunidades con plugins y documentaci\u00f3n Seguridad mejorada Actualizaciones frecuentes y plugins de seguridad disponibles Control de versiones Algunos CMS permiten revisar y restaurar contenido"},{"location":"management-systems/cms.html#herramientas-relacionadas","title":"Herramientas Relacionadas","text":"<ul> <li>cPanel / Plesk: Paneles de hosting para instalar CMS f\u00e1cilmente</li> <li>Docker / Docker Compose: Para desplegar CMS en contenedores</li> <li>Git / GitHub: Control de versiones de temas o personalizaciones</li> <li>Vercel / Netlify: Despliegue de frontends desacoplados</li> <li>API Clients: Postman, Insomnia (para consumir APIs de CMS headless)</li> </ul>"},{"location":"management-systems/pm2.html","title":"PM2 - Process Manager para Node.js","text":""},{"location":"management-systems/pm2.html#que-es-pm2","title":"\u00bfQu\u00e9 es PM2?","text":"<p>PM2 es un administrador de procesos para aplicaciones Node.js (y otros lenguajes), dise\u00f1ado para ejecutar, monitorear y mantener procesos activos en segundo plano. Se usa principalmente en entornos de producci\u00f3n para asegurar que las aplicaciones funcionen de manera estable y continua, incluso tras fallos o reinicios del sistema.</p>"},{"location":"management-systems/pm2.html#para-que-sirve-pm2","title":"\u00bfPara qu\u00e9 sirve PM2?","text":"Funcionalidad Descripci\u00f3n Ejecuci\u00f3n en segundo plano Permite ejecutar apps Node.js sin dejar la terminal abierta. Reinicio autom\u00e1tico Reinicia apps en caso de errores o fallos. Clustering Ejecuta m\u00faltiples instancias (multi-core). Monitoreo Muestra estado, CPU y RAM por proceso. Logging Guarda logs de salida est\u00e1ndar y errores. Autostart Inicia apps autom\u00e1ticamente al reiniciar el servidor. Ecosystem File Define m\u00faltiples apps y entornos en un archivo centralizado."},{"location":"management-systems/pm2.html#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>npm install -g pm2\n</code></pre> <p>Requiere tener Node.js instalado previamente.</p>"},{"location":"management-systems/pm2.html#comandos-basicos","title":"Comandos B\u00e1sicos","text":"<pre><code>pm2 start app.js         # Ejecutar la app\npm2 list                 # Ver procesos activos\npm2 stop app             # Detener un proceso\npm2 restart app          # Reiniciar un proceso\npm2 delete app           # Eliminar un proceso de PM2\npm2 logs                 # Ver logs en tiempo real\npm2 monit                # Monitoreo interactivo en consola\n</code></pre>"},{"location":"management-systems/pm2.html#modo-cluster","title":"Modo Cl\u00faster","text":"<pre><code>pm2 start app.js -i max\n</code></pre> <ul> <li>Ejecuta la app en modo cl\u00faster, usando todos los n\u00facleos disponibles.</li> <li>Mejora el rendimiento en servidores multi-core.</li> </ul>"},{"location":"management-systems/pm2.html#ecosystem-file","title":"Ecosystem File","text":"<p>Permite definir configuraci\u00f3n de m\u00faltiples procesos en un solo archivo.</p>"},{"location":"management-systems/pm2.html#ecosystemconfigjs","title":"ecosystem.config.js","text":"<pre><code>module.exports = {\n  apps: [\n    {\n      name: 'api',\n      script: './server.js',\n      instances: 2,\n      exec_mode: 'cluster',\n      env: {\n        NODE_ENV: 'development'\n      },\n      env_production: {\n        NODE_ENV: 'production'\n      }\n    }\n  ]\n};\n</code></pre>"},{"location":"management-systems/pm2.html#ejecutar-con-ecosystem","title":"Ejecutar con ecosystem","text":"<pre><code>pm2 start ecosystem.config.js --env production\n</code></pre>"},{"location":"management-systems/pm2.html#autostart-tras-reinicio-del-servidor","title":"Autostart tras reinicio del servidor","text":""},{"location":"management-systems/pm2.html#guardar-estado-actual","title":"Guardar estado actual","text":"<pre><code>pm2 save\n</code></pre>"},{"location":"management-systems/pm2.html#configurar-inicio-automatico","title":"Configurar inicio autom\u00e1tico","text":"<pre><code>pm2 startup\n</code></pre> <p>Este comando devuelve una l\u00ednea que se debe ejecutar para registrar PM2 como servicio del sistema.</p>"},{"location":"management-systems/pm2.html#logs","title":"Logs","text":"<pre><code>pm2 logs               # Ver todos los logs en tiempo real\npm2 logs app           # Ver logs de una app espec\u00edfica\n</code></pre> <p>Los logs se almacenan por defecto en <code>~/.pm2/logs</code>.</p>"},{"location":"management-systems/pm2.html#pm2-con-otros-lenguajes","title":"PM2 con otros lenguajes","text":"<p>Tambi\u00e9n se puede ejecutar scripts en otros lenguajes usando el par\u00e1metro <code>--interpreter</code>.</p> <pre><code>pm2 start script.py --interpreter python3\npm2 start script.sh\n</code></pre>"},{"location":"management-systems/pm2.html#integracion-con-servidores-virtuales-vps","title":"Integraci\u00f3n con Servidores Virtuales (VPS)","text":"<ol> <li>Desplegar la app en el VPS</li> <li>Instalar PM2 globalmente</li> <li>Ejecutar la app con <code>pm2 start</code></li> <li>Guardar configuraci\u00f3n con <code>pm2 save</code></li> <li>Configurar <code>pm2 startup</code> para que inicie autom\u00e1ticamente</li> </ol>"},{"location":"management-systems/pm2.html#comparacion-con-otros-process-managers","title":"Comparaci\u00f3n con Otros Process Managers","text":"Herramienta Soporte Node.js Clustering Logs Autostart Observabilidad PM2 S\u00ed S\u00ed S\u00ed S\u00ed S\u00ed forever S\u00ed No B\u00e1sico Parcial No systemd Gen\u00e9rico No Medio S\u00ed Limitado nodemon S\u00ed (dev) No No No No"},{"location":"management-systems/pm2.html#recursos","title":"Recursos","text":"<ul> <li>Sitio oficial: https://pm2.keymetrics.io</li> </ul>"},{"location":"network/hosting/apache.html","title":"Apache","text":""},{"location":"network/hosting/apache.html#que-es","title":"\u00bfQu\u00e9 es?","text":"<p>Apache HTTP Server (com\u00fanmente llamado Apache) es un servidor web de c\u00f3digo abierto que permite publicar, gestionar y servir contenido a trav\u00e9s del protocolo HTTP (HyperText Transfer Protocol) y su versi\u00f3n segura HTTPS (HTTP sobre SSL/TLS).</p> <p>Es un software multiplataforma que funciona como intermediario entre el servidor donde se alojan los archivos (p\u00e1ginas web, im\u00e1genes, scripts, etc.) y los clientes (navegadores como Chrome, Firefox, etc.), procesando sus solicitudes y entregando las respuestas correspondientes.</p>"},{"location":"network/hosting/apache.html#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"Protocolos Soportados <p>Apache es compatible principalmente con HTTP/1.1 y HTTP/2, protocolos est\u00e1ndar para la transferencia web. Tambi\u00e9n admite extensiones como WebDAV (para edici\u00f3n remota de archivos) y FastCGI (para mejorar el rendimiento con aplicaciones din\u00e1micas). Aunque no est\u00e1 dise\u00f1ado para protocolos como FTP o SMTP, puede combinarse con otros servicios para cubrir esas necesidades. La configuraci\u00f3n de protocolos se realiza mediante directivas en sus archivos de configuraci\u00f3n.</p> Configuraci\u00f3n Flexible <p>Apache se configura mediante archivos como <code>httpd.conf</code> (configuraci\u00f3n principal) o <code>.htaccess</code> (reglas por directorio). Estos archivos permiten definir desde puertos de escucha hasta reglas complejas de redirecci\u00f3n. Las directivas como <code>Directory</code> (permisos de acceso) o <code>RewriteRule</code> (URLs amigables) ofrecen granularidad. La posibilidad de usar archivos <code>.htaccess</code> permite ajustes sin reiniciar el servidor, ideal para entornos compartidos donde los usuarios no tienen acceso ra\u00edz.</p> Entorno de Ejecuci\u00f3n <p>Para contenido din\u00e1mico, Apache se integra con lenguajes como PHP (v\u00eda <code>mod_php</code>), Python (con <code>mod_wsgi</code>) o Perl (<code>mod_perl</code>). Estos m\u00f3dulos permiten ejecutar scripts directamente en el servidor, generando HTML personalizado antes de enviarlo al cliente. Adem\u00e1s, puede conectarse a bases de datos (MySQL, PostgreSQL) para sitios con almacenamiento persistente. Esta capacidad lo hace apto para CMS como WordPress o frameworks como Laravel.</p> Proxy y Balanceador de Carga <p>Como proxy inverso, Apache redirige solicitudes a servidores internos (ej: una app Node.js en otro puerto), ocultando la infraestructura real. Para alta disponibilidad, m\u00f3dulos como <code>mod_proxy_balancer</code> distribuyen el tr\u00e1fico entre m\u00faltiples servidores (load balancing), mejorando la escalabilidad. Aunque no es tan eficiente como Nginx o HAProxy para esta tarea, su facilidad de configuraci\u00f3n lo hace viable para entornos peque\u00f1os o medianos.</p> Seguridad B\u00e1sica <p>Apache incluye herramientas para proteger sitios web: autenticaci\u00f3n b\u00e1sica/digest (<code>mod_auth</code>), restricciones por IP (<code>Require ip</code>), y cifrado SSL/TLS (v\u00eda <code>mod_ssl</code>). Configuraciones como <code>LimitRequestBody</code> (para evitar ataques DDoS) o <code>Header set X-Content-Type-Options</code> (para mitigar MIME sniffing) a\u00f1aden capas de seguridad. Sin embargo, muchas protecciones avanzadas (como WAFs) requieren m\u00f3dulos adicionales o software externo.</p> Virtual Host <p>Apache permite alojar m\u00faltiples sitios web en un mismo servidor f\u00edsico mediante Virtual Hosts. Cada virtual host tiene su propia configuraci\u00f3n independiente, como dominio, directorio ra\u00edz (<code>DocumentRoot</code>), reglas de acceso y SSL, simulando servidores separados.</p>"},{"location":"network/hosting/apache.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar Apache2, se emplea el siguiente comando:</p> <pre><code>sudo apt install apache2\n</code></pre> <p>Apache2 se configura mediante directivas en archivos de configuraci\u00f3n de texto plano en formato <code>/etc/apache2/</code>. Estas directivas se distribuyen entre los siguientes archivos y directorios:</p>  Archivos  <ul> <li>apache2.conf: El archivo de configuraci\u00f3n principal de Apache2. Contiene configuraciones globales para Apache2.</li> <li>envvars: Archivo donde se establecen las variables de entorno de Apache2.</li> <li>magic: Instrucciones para determinar el tipo MIME seg\u00fan los primeros bytes de un archivo.</li> <li>ports.conf: Contiene las directivas que determinan en qu\u00e9 puertos TCP est\u00e1 escuchando Apache2.</li> </ul>  Directorios  <ul> <li>conf-available: Este directorio contiene los archivos de configuraci\u00f3n disponibles. Todos los archivos que estaban previamente en <code>/etc/apache2/conf.d</code> deben trasladarse a <code>/etc/apache2/conf-available</code>.</li> <li>conf-enabled: Contiene enlaces simb\u00f3licos a los archivos en <code>/etc/apache2/conf-available</code>. Cuando se crea un enlace simb\u00f3lico en un archivo de configuraci\u00f3n, este se habilitar\u00e1 la pr\u00f3xima vez que se reinicie Apache2.</li> <li>mods-available: Este directorio contiene archivos de configuraci\u00f3n para cargar y configurar los m\u00f3dulos. Sin embargo, no todos los m\u00f3dulos tendr\u00e1n archivos de configuraci\u00f3n espec\u00edficos.</li> <li>mods-enabled: Contiene enlaces simb\u00f3licos a los archivos en <code>/etc/apache2/mods-available</code>. Cuando se crea un enlace simb\u00f3lico en un archivo de configuraci\u00f3n de m\u00f3dulo, este se habilitar\u00e1 la pr\u00f3xima vez que se reinicie Apache2.</li> <li>sites-available: Este directorio contiene los archivos de configuraci\u00f3n de los hosts virtuales de Apache2. Estos hosts permiten configurar Apache2 para varios sitios con configuraciones independientes.</li> <li>sites-enabled: Al igual que mods-enabled, sites-enabled contiene enlaces simb\u00f3licos al directorio <code>/etc/apache2/sites-available</code>. De igual forma, cuando se crea un enlace simb\u00f3lico en un archivo de configuraci\u00f3n, el sitio configurado por \u00e9l se activar\u00e1 al reiniciar Apache2.</li> </ul>  Directivas  <p>Para hacer las configuraciones se emplean las Directivas, estas son instrucciones al servidor Apache para controlar su funcionamiento. Una directiva consiste en un nombre seguido de uno o m\u00e1s argumentos. Se escriben en los archivos de configuraci\u00f3n como <code>httpd.conf</code>, <code>apache2.conf</code>, o dentro de bloques como <code>&lt;VirtualHost&gt;</code>, <code>&lt;Directory&gt;</code>, o incluso en archivos <code>.htaccess</code>.</p> <p>Ejemplo de directivas:</p> <pre><code>ServerAdmin webmaster@miweb.com\nDocumentRoot /var/www/html\nDirectoryIndex index.html index.php\nErrorLog ${APACHE_LOG_DIR}/error.log\n</code></pre> <p>Apache2 se entrega con una configuraci\u00f3n predeterminada \u201ccompatible con hosts virtuales\u201d: est\u00e1 configurado con un \u00fanico host virtual predeterminado (usando la directiva <code>VirtualHost</code>) que puede modificarse o usarse tal cual si tiene un solo sitio, o usarse como plantilla para hosts virtuales adicionales si tiene varios sitios.</p> <p>Si no se modifica, el host virtual predeterminado servir\u00e1 como su sitio predeterminado, o los usuarios del sitio ver\u00e1n si la URL que ingresan no coincide con la directiva <code>ServerName</code> de alguno de sus sitios personalizados. Para modificar el host virtual predeterminado, edite el archivo <code>/etc/apache2/sites-available/000-default.conf</code>.</p> <p>Las directivas establecidas para un host virtual solo se aplican a ese host virtual en particular.</p> <p>Para configurar un nuevo host o sitio virtual, se toma como plantilla el archivo <code>000-default.conf</code> en el mismo directorio con el nombre que elija. Por ejemplo: <pre><code>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/mynewsite.conf\n</code></pre></p>  M\u00f3dulos  <p>Los m\u00f3dulos de Apache2 son componentes que extienden las funcionalidades del servidor web Apache. Gracias a su arquitectura modular, Apache permite activar solo los m\u00f3dulos necesarios para cada proyecto, lo que mejora el rendimiento, la seguridad y la flexibilidad del servidor.</p> <p>Estos m\u00f3dulos pueden estar integrados de forma est\u00e1tica en el binario de Apache o cargarse din\u00e1micamente como objetos compartidos (DSO) durante la ejecuci\u00f3n. Cada m\u00f3dulo a\u00f1ade capacidades espec\u00edficas al servidor. Por ejemplo, algunos permiten ejecutar lenguajes como PHP (<code>mod_php</code>), habilitar HTTPS (<code>mod_ssl</code>), comprimir contenido (<code>mod_deflate</code>), o reescribir URLs (<code>mod_rewrite</code>). Otros se encargan de tareas como autenticaci\u00f3n (<code>mod_auth_basic</code>, <code>mod_auth_digest</code>), cach\u00e9 (<code>mod_cache</code>), control de acceso (<code>mod_access_compat</code>), o incluso convertir Apache en un proxy inverso (<code>mod_proxy</code>).</p> <p>Entre los m\u00f3dulos m\u00e1s importantes y com\u00fanmente utilizados est\u00e1n:</p> <ul> <li>mod_rewrite: permite reescribir URLs din\u00e1micamente, ideal para crear URLs amigables.</li> <li>mod_ssl: habilita el soporte para conexiones seguras HTTPS mediante SSL/TLS.</li> <li>mod_proxy: convierte Apache en un proxy o proxy inverso, \u00fatil para redirigir peticiones a otros servidores backend.</li> <li>mod_deflate: comprime el contenido antes de enviarlo al cliente, mejorando la velocidad de carga.</li> <li>mod_php: permite ejecutar scripts PHP directamente desde Apache.</li> <li>mod_auth_basic / mod_auth_digest: proporcionan autenticaci\u00f3n por usuario y contrase\u00f1a.</li> <li>mod_cache: mejora el rendimiento al almacenar contenido en cach\u00e9.</li> <li>mod_status: ofrece una vista en tiempo real del estado del servidor.</li> <li>mod_security: act\u00faa como firewall de aplicaciones web, protegiendo contra ataques como XSS o inyecciones SQL.</li> </ul> <p>La gesti\u00f3n de estos m\u00f3dulos se realiza mediante comandos como <code>a2enmod</code> (para habilitar) y <code>a2dismod</code> (para deshabilitar), y su configuraci\u00f3n se define en archivos como <code>apache2.conf</code>, <code>httpd.conf</code> o dentro de bloques.</p>"},{"location":"network/hosting/apache.html#servidor-web","title":"Servidor Web","text":"<p>Apache funciona como un intermediario entre los usuarios y los archivos almacenados en un servidor. Cuando un navegador solicita una p\u00e1gina web, Apache procesa esa petici\u00f3n (HTTP request), busca el recurso solicitado (HTML, im\u00e1genes, CSS, etc.) en el sistema de archivos y lo env\u00eda como respuesta (HTTP response).</p> <p>Apache2 puede servir tanto sitios web est\u00e1ticos (HTML, CSS, JS) como sitios din\u00e1micos, pero con una condici\u00f3n importante:</p> <ul> <li>Para sitios din\u00e1micos desarrollados en PHP o Python, Apache puede ejecutar el c\u00f3digo directamente mediante m\u00f3dulos como <code>mod_php</code> o <code>mod_wsgi</code>.</li> <li>En cambio, para aplicaciones desarrolladas en Node.js, Apache no puede ejecutarlas directamente. En estos casos, se utiliza Apache como proxy inverso, redirigiendo las peticiones HTTP al servidor Node.js que corre por separado (por ejemplo, en el puerto 3000).</li> </ul>  Servir un solo sitio web   Requisitos previos  <ul> <li>Tener instalado Apache2 en el servidor Ubuntu con <code>sudo apt install apache2</code>.</li> <li>Tener instalado git (para clonar repositorios de ser necesario).</li> <li>Tener acceso con permisos de superusuario (sudo).</li> <li>Tener listos los archivos est\u00e1ticos (HTML, CSS, JS, im\u00e1genes, etc.).</li> </ul> Paso 1: Crear el directorio donde se almacenar\u00e1n los archivos est\u00e1ticos <p>En este directorio se puede clonar el repositorio que contenga los archivos con <code>git clone &lt;link-repositorio&gt;</code>.</p> <pre><code>sudo mkdir -p /var/www/mynewsite.com\n</code></pre> Paso 2: Crear un archivo de configuraci\u00f3n para el virtual host <p>Siguiendo la sugerencia que propone la documentaci\u00f3n se realiza una copia del archivo que ya trae por defecto Apache y se emplea como plantilla:</p> <pre><code>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/mynewsite.conf\n</code></pre> Paso 3: Configurar apache para servir el directorio del sitio <p>El bloque <code>&lt;VirtualHost *:80&gt;</code> indica que Apache atender\u00e1 solicitudes HTTP (puerto 80) en cualquier IP disponible del servidor. Dentro de este bloque se definen todas las configuraciones espec\u00edficas para un sitio web.</p> <ul> <li><code>ServerAdmin</code> establece el correo del administrador del sitio. Este correo puede aparecer en p\u00e1ginas de error para que los usuarios lo contacten en caso de problemas.</li> <li><code>ServerName</code> define el nombre de dominio principal que Apache usar\u00e1 para identificar este sitio, por ejemplo, midominio.com. Por su parte, <code>ServerAlias</code> permite a\u00f1adir nombres alternativos, como www.midominio.com, para que tambi\u00e9n apunten al mismo sitio.</li> <li><code>DocumentRoot</code> indica la carpeta donde se encuentran los archivos del sitio (HTML, CSS, im\u00e1genes, etc.). Apache usar\u00e1 esta ruta para buscar el contenido que debe mostrar al usuario.</li> <li><code>ErrorLog</code> y <code>CustomLog</code> especifican d\u00f3nde se almacenar\u00e1n los registros de errores y accesos, respectivamente. Estos archivos ayudan a monitorear el funcionamiento del sitio y detectar problemas.</li> </ul> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerAdmin webmaster@mynewsite\n    ServerName mynewsite\n    ServerAlias www.mynewsite\n    DocumentRoot /var/www/mynewsite\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> Paso 4: Habilitar el sitio y reiniciar apache <pre><code>sudo a2ensite mynewsite\nsudo systemctl restart apache2.service\n</code></pre>  Servir m\u00e1s de un sitio web  <p>Apache utiliza los Virtual Hosts para manejar m\u00faltiples sitios web en un mismo servidor. Cada <code>&lt;VirtualHost&gt;</code> debe tener un <code>ServerName</code> \u00fanico (o combinado con <code>ServerAlias</code>) para evitar conflictos. Si dos VirtualHosts comparten el mismo <code>ServerName</code> y puerto, Apache usar\u00e1 el primero que encuentre en la configuraci\u00f3n, ignorando el segundo. Es fundamental que cada sitio web tenga su propia configuraci\u00f3n con dominios o subdominios distintos para que Apache pueda enrutar las peticiones correctamente.</p> <p>Adem\u00e1s, los VirtualHosts pueden diferenciarse por puertos (como <code>*:80</code> para HTTP y <code>*:443</code> para HTTPS) o direcciones IP (si el servidor tiene varias). Esto permite, por ejemplo, tener un mismo dominio respondiendo de forma distinta seg\u00fan el protocolo (HTTP vs. HTTPS) o la IP de acceso. Sin embargo, la forma m\u00e1s com\u00fan es usar el mismo puerto (generalmente el 80 o 443) y distinguir los sitios mediante el nombre de dominio en la cabecera Host de la petici\u00f3n HTTP.</p> <p>Cuando Apache recibe una solicitud, sigue este orden para decidir qu\u00e9 VirtualHost usar:</p> <ol> <li>Compara la cabecera Host de la petici\u00f3n con los <code>ServerName</code> y <code>ServerAlias</code> definidos en los VirtualHosts. Si coincide, sirve ese sitio.</li> <li>Si no hay coincidencia, usa el primer VirtualHost definido en la configuraci\u00f3n (por orden de carga en <code>sites-enabled/</code>). Este act\u00faa como \"VirtualHost por defecto\".</li> <li>Si no hay ning\u00fan VirtualHost configurado, Apache usa su configuraci\u00f3n global (generalmente el contenido de <code>/var/www/html</code>).</li> </ol> <p>Para la configuraci\u00f3n se repite el mismo proceso para servir 1 sitio web, es decir, se debe crear un directorio propio y el archivo de configuraci\u00f3n del virtual host. Todos los archivos de conf se deben alojar en <code>/etc/apache2/sites-available</code>.</p>"},{"location":"network/hosting/apache.html#proxy-inverso","title":"Proxy inverso Directivas Clave y su Configuraci\u00f3n  Configuraci\u00f3n B\u00e1sica de Proxy Inverso en Apache","text":"<p>Un proxy inverso es un servidor que recibe solicitudes de clientes y las redirige a uno o m\u00e1s servidores backend, ocultando la infraestructura real. A diferencia de un proxy tradicional (que protege a los clientes), un proxy inverso protege y gestiona los servidores backend.</p> <p>Casos de uso comunes:</p> <ul> <li>Balanceo de carga: Distribuir tr\u00e1fico entre m\u00faltiples servidores.</li> <li>Terminaci\u00f3n SSL: Manejar HTTPS en el proxy y comunicarse con backends en HTTP.</li> <li>Cach\u00e9 de contenido: Mejorar el rendimiento almacenando respuestas est\u00e1ticas.</li> <li>Seguridad: Ocultar servidores internos y filtrar ataques (DDoS, inyecciones).</li> <li>Enrutamiento basado en rutas: Redirigir <code>/app1</code> a un backend y <code>/app2</code> a otro.</li> </ul> Requisitos previos <ul> <li>Servidor con Apache instalado (versi\u00f3n 2.4 o superior recomendada)</li> <li>M\u00f3dulos <code>mod_proxy</code> y <code>mod_proxy_http</code> habilitados</li> <li>Acceso a la configuraci\u00f3n del servidor (generalmente requiere privilegios de root/sudo)</li> </ul>  M\u00f3dulos Requeridos y su Funci\u00f3n  M\u00f3dulos Principales M\u00f3dulo Descripci\u00f3n Uso T\u00edpico <code>mod_proxy</code> N\u00facleo de funcionalidad proxy Habilita capacidades b\u00e1sicas de proxy <code>mod_proxy_http</code> Soporte para HTTP/HTTPS Proxy para aplicaciones web (HTTP backends) <code>mod_proxy_balancer</code> Balanceo de carga Distribuci\u00f3n de tr\u00e1fico entre m\u00faltiples servidores <code>mod_lbmethod_byrequests</code> Algoritmos de balanceo Implementa round-robin y otros m\u00e9todos <code>mod_headers</code> Manipulaci\u00f3n de headers Modificar encabezados HTTP (X-Forwarded-For, etc.) <code>mod_ssl</code> Soporte SSL/TLS Terminaci\u00f3n SSL en el proxy <p>Comando para activarlos:</p> <pre><code>sudo a2enmod proxy proxy_http proxy_balancer lbmethod_byrequests headers ssl\nsudo systemctl restart apache2\n</code></pre>  Directivas Fundamentales  Directiva Par\u00e1metros Descripci\u00f3n Ejemplo <code>ProxyPass</code> <code>&lt;ruta&gt; &lt;url-backend&gt;</code> Mapea rutas a servidores backend <code>ProxyPass \"/app\" \"http://backend:8080\"</code> <code>ProxyPassReverse</code> <code>&lt;ruta&gt; &lt;url-backend&gt;</code> Corrige URLs en respuestas del backend <code>ProxyPassReverse \"/app\" \"http://backend:8080\"</code> <code>ProxyPreserveHost</code> <code>On\\|Off</code> Mantiene el header <code>Host</code> original <code>ProxyPreserveHost On</code> <code>ProxyRequests</code> <code>On\\|Off</code> No usar en proxy inverso (solo para proxy forward) <code>ProxyRequests Off</code> <code>ProxyVia</code> <code>On\\|Off\\|Full</code> Controla el header <code>Via</code> en solicitudes <code>ProxyVia On</code>  Directivas Avanzadas  Directiva Uso <code>ProxyTimeout</code> Define timeout para conexiones backend (ej: <code>ProxyTimeout 60</code>) <code>ProxyIOBufferSize</code> Tama\u00f1o del buffer para respuestas (ej: <code>ProxyIOBufferSize 8192</code>) <code>ProxyErrorOverride</code> Permite a Apache manejar errores HTTP del backend <code>RequestHeader</code> Modifica/agrega headers (ej: <code>RequestHeader set X-Forwarded-Proto \"https\"</code>) <p>Edita el archivo de configuraci\u00f3n (generalmente en <code>/etc/apache2/sites-available/000-default.conf</code> o similar):</p>  Ejemplo Completo (Archivo de VirtualHost)  <pre><code>&lt;VirtualHost *:80&gt;\n    # Dominio que recibir\u00e1 las peticiones\n    ServerName mi-app.com\n\n    # Activar funcionalidad de proxy\n    ProxyPreserveHost On\n\n    # Redirecci\u00f3n principal al backend\n    ProxyPass \"/\" \"http://localhost:3000/\"\n    ProxyPassReverse \"/\" \"http://localhost:3000/\"\n\n    # Configuraci\u00f3n de logs\n    ErrorLog ${APACHE_LOG_DIR}/mi-app-error.log\n    CustomLog ${APACHE_LOG_DIR}/mi-app-access.log combined\n&lt;/VirtualHost&gt;\n</code></pre>  Activaci\u00f3n del Proxy  <p><pre><code>ProxyPreserveHost On\n</code></pre> - Funci\u00f3n clave: Mantiene el header <code>Host</code> original de la solicitud del cliente al enviarla al backend.   - Sin esto, el backend recibir\u00eda <code>Host: localhost:3000</code> en lugar de <code>Host: mi-app.com</code>.   - Esencial para aplicaciones que usan host-based routing.</p>  Redirecci\u00f3n al Backend  <pre><code>ProxyPass \"/\" \"http://localhost:3000/\"\nProxyPassReverse \"/\" \"http://localhost:3000/\"\n</code></pre> Directiva Funci\u00f3n <code>ProxyPass</code> Redirige todas las peticiones (<code>/</code>) al servidor backend en <code>http://localhost:3000/</code>. <code>ProxyPassReverse</code> Corrige URLs en respuestas del backend (como redirecciones HTTP o headers <code>Location</code>). <p>Ejemplo pr\u00e1ctico: - Si el backend devuelve <code>Location: http://localhost:3000/login</code>, el proxy lo reescribir\u00e1 como <code>Location: http://mi-app.com/login</code>.</p>"},{"location":"network/hosting/apache.html#balanceador-de-carga","title":"Balanceador de carga","text":"<p>Un balanceador de carga distribuye peticiones entre m\u00faltiples servidores backend para:</p> <ul> <li>Aumentar disponibilidad: Si un servidor falla, otros siguen atendiendo.</li> <li>Mejorar rendimiento: Distribuye el tr\u00e1fico equitativamente.</li> <li>Escalar horizontalmente: A\u00f1adir m\u00e1s servidores bajo demanda.</li> </ul>  M\u00f3dulos Requeridos  <p>Para activarlos se emplea: </p> <pre><code>sudo a2enmod proxy proxy_http proxy_balancer lbmethod_byrequests\nsudo systemctl restart apache2\n</code></pre> M\u00f3dulo Funci\u00f3n <code>mod_proxy_balancer</code> Soporte para balanceo de carga <code>lbmethod_byrequests</code> Algoritmo de distribuci\u00f3n (round-robin)  Configuraci\u00f3n B\u00e1sica  Ejemplo: Balanceo Round-Robin (por peticiones) <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName mi-app.com\n\n    &lt;Proxy balancer://mycluster&gt;\n        # Servidores backend (m\u00ednimo 2)\n        BalancerMember http://192.168.1.10:8080\n        BalancerMember http://192.168.1.11:8080\n\n        # M\u00e9todo de balanceo (opcional, por defecto es byrequests)\n        ProxySet lbmethod=byrequests\n    &lt;/Proxy&gt;\n\n    ProxyPass \"/\" \"balancer://mycluster/\"\n    ProxyPassReverse \"/\" \"balancer://mycluster/\"\n&lt;/VirtualHost&gt;\n</code></pre> Par\u00e1metros Clave Directiva Descripci\u00f3n <code>BalancerMember</code> Define un servidor backend (IP:puerto). <code>lbmethod=byrequests</code> Distribuye peticiones en orden rotativo (round-robin). <code>ProxyPass</code> Enruta tr\u00e1fico al cluster definido.  Algoritmos de Balanceo  <p>Apache soporta varios m\u00e9todos:</p> A. Round-Robin (`byrequests`) <p><pre><code>ProxySet lbmethod=byrequests\n</code></pre> - C\u00f3mo funciona: Distribuye peticiones secuencialmente (1\u21922\u21923\u21921\u21922...). - Ideal para: Cargas homog\u00e9neas (servidores con igual capacidad).</p> B. Por Tr\u00e1fico (`bytraffic`) <p><pre><code>ProxySet lbmethod=bytraffic\n</code></pre> - C\u00f3mo funciona: Distribuye basado en el ancho de banda usado por cada backend. - Ideal para: Servidores con anchos de banda desiguales.</p> C. Por Ocupaci\u00f3n (`bybusyness`) <p><pre><code>ProxySet lbmethod=bybusyness\n</code></pre> - C\u00f3mo funciona: Prioriza servidores con menos conexiones activas. - Ideal para: Evitar sobrecarga en servidores lentos.</p> B. Ponderaci\u00f3n de Servidores <p><pre><code>BalancerMember http://backend1:8080 loadfactor=3\nBalancerMember http://backend2:8080 loadfactor=1\n</code></pre> - Efecto: <code>backend1</code> recibir\u00e1 3 veces m\u00e1s tr\u00e1fico que <code>backend2</code>. - Uso t\u00edpico: Servidores con capacidades diferentes.</p> C. Timeouts y Reintentos <pre><code>ProxySet timeout=30 retry=60\n</code></pre> Par\u00e1metro Descripci\u00f3n <code>timeout</code> Tiempo de espera (segundos) para conexi\u00f3n al backend. <code>retry</code> Tiempo (segundos) antes de reintentar con un backend ca\u00eddo.  Monitoreo del Balanceador   Interfaz de Estado (Requiere `mod_status`) <p><pre><code>&lt;Location \"/balancer-manager\"&gt;\n    SetHandler balancer-manager\n    Require host ejemplo.com  # Restringir acceso\n&lt;/Location&gt;\n</code></pre> - URL: <code>http://tuserver.com/balancer-manager</code> - Muestra:   - Estado de cada <code>BalancerMember</code>.   - Tr\u00e1fico asignado.   - Errores detectados.</p>"},{"location":"network/hosting/nginx.html","title":"Nginx","text":""},{"location":"network/hosting/nginx.html#que-es-nginx","title":"\u00bfQu\u00e9 es Nginx?","text":"Logo de Nginx <p>Nginx es un servidor web de alto rendimiento, de c\u00f3digo abierto, que tambi\u00e9n act\u00faa como:</p> <ul> <li>Proxy inverso</li> <li>Balanceador de carga</li> <li>Servidor de archivos est\u00e1ticos</li> <li>Terminador TLS/SSL</li> <li>Cach\u00e9 de contenido</li> <li>Gateway de aplicaciones</li> </ul> <p>Fue desarrollado por Igor Sysoev en 2004 y es ampliamente utilizado por su eficiencia en la gesti\u00f3n de m\u00faltiples conexiones concurrentes gracias a su arquitectura basada en eventos y no bloqueante.</p>"},{"location":"network/hosting/nginx.html#para-que-sirve-nginx","title":"\u00bfPara qu\u00e9 Sirve Nginx?","text":"Funcionalidad Descripci\u00f3n Servidor Web Sirve archivos est\u00e1ticos (HTML, CSS, JS, im\u00e1genes). Proxy Inverso Redirige solicitudes al backend (por ejemplo, Node.js, Python, etc.). Balanceador de Carga Distribuye tr\u00e1fico entre varios servidores para mejorar rendimiento. Terminador TLS/SSL Gestiona conexiones HTTPS y maneja certificados. Cach\u00e9 de contenido Guarda respuestas en memoria o disco para acelerar tiempos de carga. Redirecci\u00f3n y Reescritura Permite reescribir URLs o redirigir tr\u00e1fico seg\u00fan reglas. Protecci\u00f3n y Seguridad Controla acceso, oculta tecnolog\u00edas backend y limita el ancho de banda."},{"location":"network/hosting/nginx.html#arquitectura-de-nginx","title":"Arquitectura de Nginx","text":"<p>Nginx usa un modelo as\u00edncrono y basado en eventos con procesos worker. Esto permite manejar miles de conexiones simult\u00e1neas con pocos recursos:</p> <ul> <li>Proceso maestro: carga configuraci\u00f3n y gestiona procesos worker.</li> <li>Procesos worker: manejan las conexiones de red reales.</li> </ul>"},{"location":"network/hosting/nginx.html#casos-de-uso-comunes","title":"Casos de Uso Comunes","text":"<ol> <li> <p>Frontend + Backend: Nginx sirve los archivos frontend (React, Angular, Vue) y redirige <code>/api</code> al backend.</p> </li> <li> <p>Microservicios: Redirige peticiones a distintos contenedores o servidores seg\u00fan la ruta o subdominio.</p> </li> <li> <p>Certificados SSL: Nginx maneja TLS/SSL y se comunica con los backends en HTTP.</p> </li> <li> <p>Balanceo de carga: Distribuye tr\u00e1fico entre varios servidores (round-robin, least_conn, ip_hash).</p> </li> <li> <p>Gateway para contenedores: Punto de entrada para servicios en Docker o Kubernetes.</p> </li> </ol>"},{"location":"network/hosting/nginx.html#ejemplo-de-configuracion-basica-como-proxy-inverso","title":"Ejemplo de configuraci\u00f3n b\u00e1sica como proxy inverso","text":"<pre><code>server {\n    listen 80;\n    server_name midominio.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre>"},{"location":"network/hosting/nginx.html#balanceo-de-carga","title":"Balanceo de Carga","text":"<pre><code>upstream mi_cluster {\n    server backend1:3000;\n    server backend2:3000;\n}\n\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://mi_cluster;\n    }\n}\n</code></pre>"},{"location":"network/hosting/nginx.html#algoritmos-soportados","title":"Algoritmos Soportados","text":"<ul> <li><code>round-robin</code> (por defecto)</li> <li><code>least_conn</code></li> <li><code>ip_hash</code></li> </ul>"},{"location":"network/hosting/nginx.html#soporte-para-https-tls-ssl","title":"Soporte para HTTPS (TLS/SSL)","text":"<pre><code>server {\n    listen 443 ssl;\n    server_name midominio.com;\n\n    ssl_certificate /etc/nginx/ssl/fullchain.pem;\n    ssl_certificate_key /etc/nginx/ssl/privkey.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://localhost:3000;\n    }\n}\n</code></pre>"},{"location":"network/hosting/nginx.html#ventajas-de-nginx","title":"Ventajas de Nginx","text":"<ul> <li>Altamente eficiente y ligero</li> <li>Escalable con pocos recursos</li> <li>Compatible con HTTP/1.1, HTTP/2 y TLS</li> <li>Popular en entornos de alta demanda (empresas como Netflix, Dropbox, GitHub lo usan)</li> <li>Gran soporte para contenedores (Docker)</li> </ul>"},{"location":"network/hosting/nginx.html#diferencias-con-apache","title":"Diferencias con Apache","text":"Caracter\u00edstica Nginx Apache Modelo de procesos As\u00edncrono, basado en eventos Multiproceso o multiproceso-thread Rendimiento est\u00e1tico Muy alto Bueno, pero menor que Nginx Reescrituras Menos flexible Muy potente con <code>.htaccess</code> Uso de recursos Bajo Medio/alto"},{"location":"network/hosting/nginx.html#seguridad","title":"Seguridad","text":"<ul> <li>Compatible con encabezados de seguridad (<code>X-Frame-Options</code>, <code>Content-Security-Policy</code>)</li> <li>Puede limitar ancho de banda por IP o ruta</li> <li>Permite autenticaci\u00f3n b\u00e1sica o con JWT</li> <li>Se integra con firewalls de aplicaciones web (WAFs)</li> </ul>"},{"location":"network/hosting/virtual-host.html","title":"Virtual Host","text":""},{"location":"network/hosting/virtual-host.html#que-es-un-virtual-host","title":"\u00bfQu\u00e9 es un Virtual Host?","text":"<p>Un Virtual Host (Host Virtual) es una t\u00e9cnica que permite alojar m\u00faltiples sitios web o dominios en un \u00fanico servidor, utilizando una misma direcci\u00f3n IP. Esto se logra mediante la configuraci\u00f3n del servidor web (como Apache o Nginx) para que responda de manera diferente seg\u00fan el dominio o subdominio solicitado.</p> <p>Existen dos tipos principales de Virtual Hosts:</p>"},{"location":"network/hosting/virtual-host.html#virtual-host-basado-en-nombre-name-based-virtual-host","title":"Virtual Host Basado en Nombre (Name-based Virtual Host)","text":"<p>Este tipo de Virtual Host utiliza el campo Host en la cabecera HTTP para determinar qu\u00e9 sitio web debe servir el servidor. Esto significa que m\u00faltiples dominios pueden compartir una misma direcci\u00f3n IP, ya que el servidor distingue las solicitudes seg\u00fan el nombre de dominio. Por ejemplo, si un servidor tiene configurados sitio1.com y sitio2.com en la misma IP, cuando un usuario accede a sitio1.com, el servidor revisa la cabecera HTTP y sirve el contenido correspondiente.</p> <p>La principal ventaja de este m\u00e9todo es que ahorra direcciones IP, ya que no requiere una IP exclusiva para cada sitio. Adem\u00e1s, simplifica la administraci\u00f3n, especialmente en entornos con muchos dominios. Sin embargo, una limitaci\u00f3n es que no funciona con protocolos antiguos que no env\u00edan la cabecera Host, como algunas conexiones SSL/TLS muy antiguas (aunque hoy en d\u00eda esto es raro debido al uso de SNI - Server Name Indication).</p>"},{"location":"network/hosting/virtual-host.html#virtual-host-basado-en-ip-ip-based-virtual-host","title":"Virtual Host Basado en IP (IP-based Virtual Host)","text":"<p>En este caso, cada sitio web tiene asignada una direcci\u00f3n IP \u00fanica, y el servidor responde seg\u00fan la IP a la que se dirige la solicitud. Por ejemplo, si sitio1.com usa la IP 192.168.1.10 y sitio2.com usa 192.168.1.11, el servidor entrega el contenido correspondiente seg\u00fan la IP de destino.</p> <p>La principal ventaja de este enfoque es que es compatible con cualquier protocolo, incluso aquellos que no soportan la cabecera Host (como ciertas configuraciones antiguas de SSL). Sin embargo, su desventaja es que requiere m\u00faltiples direcciones IP, lo que puede ser costoso o complicado en entornos con IPv4 limitadas. Adem\u00e1s, su administraci\u00f3n es menos escalable cuando se manejan muchos dominios.</p>"},{"location":"network/hosting/virtual-host.html#casos-de-uso","title":"Casos de Uso","text":"<p>Los Virtual Hosts son \u00fatiles en escenarios como:</p> <ul> <li>Hospedar m\u00faltiples sitios en un solo servidor: Ideal para empresas de hosting o desarrolladores que gestionan varios proyectos.</li> <li>Separar entornos (producci\u00f3n, desarrollo, testing): Usando subdominios como <code>dev.misitio.com</code> o <code>test.misitio.com</code>.</li> <li>Optimizar recursos: Evita la necesidad de tener un servidor dedicado para cada sitio web.</li> <li>Sitios multi-idioma o regionales: Ejemplo: <code>es.misitio.com</code>, <code>en.misitio.com</code>.</li> </ul>"},{"location":"network/hosting/virtual-host.html#que-se-necesita-para-configurar-un-virtual-host","title":"\u00bfQu\u00e9 se necesita para configurar un Virtual Host?","text":"<p>Dependiendo del servidor web, los requisitos y pasos var\u00edan:</p>"},{"location":"network/hosting/virtual-host.html#en-apache-http-server","title":"En Apache HTTP Server","text":"<ul> <li>Tener Apache instalado.</li> <li>Acceso al archivo de configuraci\u00f3n (<code>httpd.conf</code> o <code>apache2.conf</code>).</li> <li>Permisos para editar archivos en <code>/etc/apache2/sites-available/</code> (en Linux).</li> </ul> <p>Ejemplo de configuraci\u00f3n:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName midominio.com\n    ServerAlias www.midominio.com\n    DocumentRoot /var/www/midominio\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <p>Luego, habilitar el sitio con:</p> <pre><code>sudo a2ensite midominio.conf\nsudo systemctl reload apache2\n</code></pre>"},{"location":"network/hosting/virtual-host.html#en-nginx","title":"En Nginx","text":"<ul> <li>Tener Nginx instalado.</li> <li>Acceso a <code>/etc/nginx/sites-available/</code>.</li> </ul> <p>Ejemplo de configuraci\u00f3n:</p> <pre><code>server {\n    listen 80;\n    server_name midominio.com www.midominio.com;\n    root /var/www/midominio;\n    index index.html;\n\n    access_log /var/log/nginx/midominio.access.log;\n    error_log /var/log/nginx/midominio.error.log;\n}\n</code></pre> <p>Luego, crear un enlace simb\u00f3lico y reiniciar Nginx:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/midominio /etc/nginx/sites-enabled/\nsudo systemctl restart nginx\n</code></pre>"},{"location":"network/security/firewall/ufw.html","title":"UFW (Uncomplicated Firewall)","text":""},{"location":"network/security/firewall/ufw.html#que-es-ufw","title":"\u00bfQu\u00e9 es UFW?","text":"<p>UFW (Uncomplicated Firewall) es una herramienta de firewall dise\u00f1ada para simplificar la configuraci\u00f3n de iptables, el sistema de filtrado de paquetes predeterminado en Linux. Est\u00e1 especialmente pensado para usuarios que no son expertos en seguridad pero necesitan proteger sus sistemas de manera eficiente.</p>"},{"location":"network/security/firewall/ufw.html#para-que-sirve","title":"\u00bfPara qu\u00e9 sirve?","text":"<ul> <li>Bloquear o permitir conexiones entrantes y salientes.</li> <li>Proteger el sistema contra accesos no autorizados.</li> <li>Configurar reglas b\u00e1sicas de red sin necesidad de manejar iptables directamente.</li> <li>Ideal para servidores y equipos personales con Linux.</li> </ul>"},{"location":"network/security/firewall/ufw.html#como-funciona","title":"\u00bfC\u00f3mo funciona?","text":"<p>UFW act\u00faa como una capa simplificada sobre iptables, permitiendo definir reglas de firewall con comandos sencillos. Trabaja con los siguientes conceptos b\u00e1sicos:</p> <ul> <li>Reglas de entrada (incoming): Controlan qu\u00e9 conexiones pueden acceder al sistema.</li> <li>Reglas de salida (outgoing): Definen qu\u00e9 conexiones pueden salir del sistema.</li> <li>Perfiles por aplicaci\u00f3n: Algunos servicios (como Apache o SSH) tienen reglas predefinidas.</li> </ul>"},{"location":"network/security/firewall/ufw.html#comandos-basicos-de-ufw","title":"Comandos B\u00e1sicos de UFW","text":""},{"location":"network/security/firewall/ufw.html#instalacion-y-activacion","title":"Instalaci\u00f3n y Activaci\u00f3n","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install ufw  # Instalar UFW (en Debian/Ubuntu)\nsudo ufw enable                         # Activar el firewall\nsudo ufw disable                        # Desactivar el firewall\n</code></pre>"},{"location":"network/security/firewall/ufw.html#ver-estado-del-firewall","title":"Ver estado del firewall","text":"<pre><code>sudo ufw status              # Muestra reglas activas\nsudo ufw status verbose      # Muestra detalles extendidos\n</code></pre>"},{"location":"network/security/firewall/ufw.html#politicas-por-defecto","title":"Pol\u00edticas por defecto","text":"<pre><code>sudo ufw default deny incoming   # Bloquear todo el tr\u00e1fico entrante\nsudo ufw default allow outgoing  # Permitir todo el tr\u00e1fico saliente\n</code></pre>"},{"location":"network/security/firewall/ufw.html#permitir-trafico-por-puerto-o-servicio","title":"Permitir tr\u00e1fico por puerto o servicio","text":"<pre><code>sudo ufw allow 22           # SSH\nsudo ufw allow 80           # HTTP\nsudo ufw allow 443          # HTTPS\nsudo ufw allow 3306         # MySQL\n</code></pre>"},{"location":"network/security/firewall/ufw.html#permitir-desde-una-ip-especifica","title":"Permitir desde una IP espec\u00edfica","text":"<pre><code>sudo ufw allow from 192.168.1.100\n</code></pre>"},{"location":"network/security/firewall/ufw.html#permitir-desde-una-ip-a-un-puerto-especifico","title":"Permitir desde una IP a un puerto espec\u00edfico","text":"<pre><code>sudo ufw allow from 192.168.1.100 to any port 22\n</code></pre>"},{"location":"network/security/firewall/ufw.html#permitir-un-rango-de-ip","title":"Permitir un rango de IP","text":"<pre><code>sudo ufw allow from 192.168.0.0/24\n</code></pre>"},{"location":"network/security/firewall/ufw.html#permitir-por-interfaz-de-red-ej-eth0","title":"Permitir por interfaz de red (ej: eth0)","text":"<pre><code>sudo ufw allow in on eth0 to any port 80\n</code></pre>"},{"location":"network/security/firewall/ufw.html#denegar-trafico","title":"Denegar tr\u00e1fico","text":"<pre><code>sudo ufw deny 3306                  # Bloquear MySQL\nsudo ufw deny from 192.168.1.10     # Bloquear una IP\n</code></pre>"},{"location":"network/security/firewall/ufw.html#borrar-reglas","title":"Borrar reglas","text":"<pre><code>sudo ufw delete allow 80            # Eliminar regla del puerto 80\n</code></pre>"},{"location":"network/security/firewall/ufw.html#limitar-conexiones-repetidas-proteccion-contra-fuerza-bruta","title":"Limitar conexiones repetidas (protecci\u00f3n contra fuerza bruta)","text":"<pre><code>sudo ufw limit ssh                  # Limita intentos de conexi\u00f3n SSH\n</code></pre>"},{"location":"network/security/firewall/ufw.html#activar-registro-de-actividad-del-firewall","title":"Activar registro de actividad del firewall","text":"<pre><code>sudo ufw logging on                 # Habilita logs (ubicaci\u00f3n: /var/log/ufw.log)\n</code></pre>"},{"location":"network/security/firewall/ufw.html#ver-aplicaciones-reconocidas-por-ufw","title":"Ver aplicaciones reconocidas por UFW","text":"<pre><code>sudo ufw app list                   # Muestra perfiles predefinidos\n</code></pre>"},{"location":"network/security/firewall/ufw.html#configuracion-para-servidores-web","title":"Configuraci\u00f3n para Servidores Web","text":""},{"location":"network/security/firewall/ufw.html#apache","title":"Apache","text":"<p>Perfiles disponibles: - Apache: Puerto 80 (HTTP) - Apache Secure: Puerto 443 (HTTPS) - Apache Full: Puertos 80 y 443 (HTTP + HTTPS)  </p> <p>Ejemplos de uso: <pre><code>sudo ufw allow 'Apache'          # Solo HTTP (puerto 80)\nsudo ufw allow 'Apache Secure'   # Solo HTTPS (puerto 443)\nsudo ufw allow 'Apache Full'     # HTTP y HTTPS (80 y 443)\n</code></pre></p>"},{"location":"network/security/firewall/ufw.html#nginx","title":"Nginx","text":"<p>Perfiles disponibles: - Nginx HTTP: Puerto 80 (HTTP) - Nginx HTTPS: Puerto 443 (HTTPS) - Nginx Full: Puertos 80 y 443 (HTTP + HTTPS)  </p> <p>Ejemplos de uso: <pre><code>sudo ufw allow 'Nginx HTTP'      # Solo HTTP (puerto 80)\nsudo ufw allow 'Nginx HTTPS'     # Solo HTTPS (puerto 443)\nsudo ufw allow 'Nginx Full'      # HTTP y HTTPS (80 y 443)\n</code></pre></p>"},{"location":"storage/raid.html","title":"RAID","text":"<p>RAID es un t\u00e9rmino utilizado en inform\u00e1tica, cuyas siglas vienen del ingl\u00e9s Redundant Array of Independent Disks o Matriz Redundante de Discos Independientes [1], es un proceso utilizado para combinar varios discos duros y que estos funcionen de manera coordinada para formar una \u00fanica unidad l\u00f3gica en la que almacenar los datos. El objetivo principal de RAID es mejorar el rendimiento, la disponibilidad y la seguridad de los datos almacenados.</p> <p>A nivel empresarial, es muy utilizado a la hora de configurar el almacenamiento de servidores NAS y aplicaciones. Ofrece mayor tolerancia a fallos y m\u00e1s altos niveles de rendimiento que un solo disco duro o un grupo de discos duros independientes.</p> Servidor configurado con RAID"},{"location":"storage/raid.html#tipos-de-raid","title":"Tipos de RAID","text":"<p>Algunos de los t\u00e9rminos importantes que conviene conocer son:</p> <ul> <li>Datos de paridad: Estos se distribuyen entre todos los discos f\u00edsicos en el sistema. Si un disco f\u00edsico falla, es posible reconstruirlo desde la paridad y los datos de los discos f\u00edsicos restantes. Los datos de paridad est\u00e1n presentes en RAID 5, 6, 50 y 60.</li> <li>Modo Degradado: Ocurre cuando uno de los discos del RAID se vuelve ilegible, el disco entonces es considerado corrupto y se extrae del RAID. Los datos y la paridad del disco son almacenados en los discos restantes. Este proceso degrada en gran medida el rendimiento del RAID.</li> </ul> <p>B\u00e1sicamente, tenemos dos tipos de configuraciones, como son las siguientes [2]:</p> <ul> <li>Disk mirroring: Es un tipo de configuraci\u00f3n RAID que busca redundancia de datos ante un posible fallo en una de las unidades de almacenamiento, duplicando los datos en dos o m\u00e1s discos. Si uno de los discos falla, el sistema puede seguir funcionando con el otro disco sin p\u00e9rdida de datos.</li> <li>Disk stripping: Esta configuraci\u00f3n RAID que no busca redundancia, sino conseguir mayores velocidades de transferencia de datos, repartiendo los datos entre varios discos.</li> </ul> <p>Note</p> <p>Los tipos de RAID m\u00e1s utilizados en servidores son el RAID1, RAID5, RAID 6 y RAID 10.</p>"},{"location":"storage/raid.html#raid0","title":"RAID 0","text":"RAID 0 <p>Se necesitan m\u00ednimo 2 discos. Cuenta la suma de tama\u00f1os de todos los discos duros. Un RAID 0, emplea striping y reparte los datos en bloques entre los discos, de forma que cada bloque se almacena en un disco diferente. Por ejemplo, si tenemos 4 discos de 1 TB cada uno, tendremos 4 TB disponibles.</p> <p>Important</p> <p>Se emplear\u00e1 como tama\u00f1o de bloque el m\u00e1s peque\u00f1o de los discos, por lo que si tenemos 4 discos de 1 TB, 2 de 500 GB y 1 de 250 GB, el tama\u00f1o de bloque ser\u00e1 de 250 GB.</p> <p>El inconveniente es que no hay redundancia y tolerancia a fallos, por lo que cualquier fallo o aver\u00eda en uno de los discos conlleva una p\u00e9rdida total de los datos.</p> <p>Sin embargo, ofrece un alto rendimiento en lectura y escritura, ya que los datos se distribuyen entre los discos, permitiendo que las operaciones de lectura y escritura se realicen en paralelo [1].</p>"},{"location":"storage/raid.html#raid1","title":"RAID 1","text":"RAID 1 <p>Se necesitan m\u00ednimo 2 discos. Es conocido como espejo o mirroring. Duplica todos los datos de la primera unidad de forma sincronizada a una segunda unidad de almacenamiento. De esta forma, si el primer disco se estropea, el sistema seguir\u00e1 funcionando y trabajando con el segundo disco sin problemas y sin perder datos.</p> <p>Important</p> <p>Al igual que en el RAID 0, se emplear\u00e1 como tama\u00f1o de bloque el m\u00e1s peque\u00f1o de los discos, por lo que si tenemos 4 discos de 1 TB, 2 de 500 GB y 1 de 250 GB, el tama\u00f1o de bloque ser\u00e1 de 250 GB.</p> <p>Ofrece una r\u00e1pida recuperaci\u00f3n tras un fallo de la unidad, por tanto, es una de las mejores configuraciones en cuanto a redundancia y tolerancia a fallos. Adem\u00e1s, disponemos de un mayor rendimiento de lectura/escritura, puesto que es posible escribir y leer de los dos discos al mismo tiempo.</p>"},{"location":"storage/raid.html#raid5","title":"RAID 5","text":"RAID 5 <p>Se necesitan como m\u00ednimo 3 discos, y se puede romper un disco sin perder los datos. Suele ser el RAID m\u00e1s usado en servidores, ya que aporta la velocidad y rendimiento del RAID 0 (uso eficiente de la unidad, alto rendimiento en escritura y lectura) y la seguridad del RAID 1 ante la p\u00e9rdida de datos.</p> <p>Important</p> <p>El espacio disponible ser\u00e1 de N-1, siendo N el n\u00famero de discos del raid. Si utilizamos 5 discos de 1 TB tendremos: <code>5 discos \u2013 1 = 4 discos -&gt; 4 TB disponibles.</code></p> <p>Utiliza la paridad para recuperar los datos. Se dividen los datos en bloques en los diferentes discos, de forma que si hay un fallo en uno de ellos, esa parte de los datos se subsana con los datos almacenados en el resto de los discos, permitiendo al usuario continuar (aunque funciona m\u00e1s lento) con su trabajo.</p>"},{"location":"storage/raid.html#raid6","title":"RAID 6","text":"RAID 6 <p>Se necesitan como m\u00ednimo 4 discos. Puede tolerar dos fallos de discos duros (N-2).</p> <p>Es similar al RAID 5 e incluye un disco de reserva que entra en funcionamiento una vez que uno de los discos se estropea (en este caso hasta que sustituimos el disco averiado, a todos los efectos tenemos un RAID 5). Proporciona, por tanto, una elevada redundancia de datos y rendimiento de lectura.</p>"},{"location":"storage/raid.html#raid10","title":"RAID 10 (RAID 1 + RAID 0)","text":"RAID 10 <p>RAID 10, tambi\u00e9n conocido como RAID 1 + 0, es una configuraci\u00f3n avanzada que combina espejo y distribuci\u00f3n de datos para ofrecer alta seguridad y rendimiento simult\u00e1neamente. Funciona agrupando discos duros en pares espejo (RAID 1), donde cada disco tiene una copia id\u00e9ntica del otro, y luego distribuyendo esos pares en paralelo (RAID 0) para acelerar las operaciones de lectura y escritura. Esto permite que el sistema siga funcionando incluso si falla un disco por cada par, lo cual brinda excelente tolerancia a fallos y tiempos de recuperaci\u00f3n r\u00e1pidos. Aunque solo se aprovecha la mitad del espacio total, debido al espejo, la velocidad es comparable a configuraciones enfocadas exclusivamente en rendimiento.</p>"},{"location":"storage/raid.html#raid50","title":"RAID 50 (RAID 5 + RAID 0)","text":"RAID 50 <p>Se necesitan como m\u00ednimo 6 discos, con la posibilidad de que se puedan estropear hasta 3 discos sin perder datos. Se hace un RAID 5 y sobre ellos un RAID 0. Con el RAID 50 conseguiremos un volumen muy robusto, un mayor rendimiento de lectura en comparaci\u00f3n con el RAID 5 est\u00e1ndar, y un rendimiento de escritura de medio a alto. Presenta las mismas desventajas que el RAID 5 (impacto medio ante los fallos de disco y tiempos de reconstrucci\u00f3n m\u00e1s largos al ser necesario volver a calcular la paridad), y un precio m\u00e1s elevado.</p> <p>Tiene como tolerancia a fallos de 1 disco por cada grupo de discos RAID 5, lo que significa que si se falla un disco en un grupo, el sistema puede seguir funcionando sin p\u00e9rdida de datos. Asimismo, el rendimiento de lectura es alto, ya que los datos se distribuyen entre m\u00faltiples discos, permitiendo que las operaciones de lectura se realicen en paralelo.</p>"},{"location":"storage/raid.html#raid60","title":"RAID 60 (RAID 6 + RAID 0)","text":"RAID 60 <p>Se necesitan como m\u00ednimo 8 discos, con la posibilidad de que se puedan estropear hasta 4 discos sin perder datos, 2 por cada grupo de discos RAID 6. Es una configuraci\u00f3n avanzada que combina la redundancia del RAID 6 con la velocidad del RAID 0, ofreciendo una alta tolerancia a fallos y un rendimiento optimizado. Se hace un RAID 6 y sobre ellos un RAID 0. Obtenemos un alto rendimiento sobre todo en tareas de lectura. Las desventajas son las mismas a las del RAID6 (rendimiento m\u00e1s bajo en escritura debido a los dos c\u00e1lculos de paridad, y mayor gasto en hardware).</p>"},{"location":"storage/raid.html#hot-swap","title":"Hot Swap","text":"<p>El Hot Swap es una t\u00e9cnica permite sustituir el disco averiado por uno nuevo, sin necesidad de desconectar o apagar el servidor, para luego poder reconstruir la informaci\u00f3n.</p> Hot Swap <p>Podemos dejarlo configurado de 2 formas:</p> <ol> <li>Tenemos el disco duro de reserva cargado en el RAID, aunque sin utilizar, de manera que si tenemos un fallo de disco duro autom\u00e1ticamente empieza a reconstruir los datos en el disco que ten\u00edamos preparado (RAID 6).</li> <li>No tenemos el disco insertado en el servidor, pero tenemos la capacidad de sustituci\u00f3n en caliente. Esta es una opci\u00f3n algo m\u00e1s arriesgada, que implica tener lo m\u00e1s cerca posible un disco de reserva y reemplazarlo lo antes posible antes de que falle una segunda unidad.</li> </ol>"},{"location":"storage/raid.html#controladoras-raid","title":"Controladoras RAID","text":"<p>Una controladora RAID es una tarjeta de hardware o una aplicaci\u00f3n de software que se utiliza con el objetivo de gestionar varios discos duros en un mismo servidor.</p>"},{"location":"storage/raid.html#por-software","title":"Por Software","text":"<p>Los discos se conectan a la placa o a una controladora, y es el procesador y el sistema operativo quienes hacen las operaciones necesarias para controlar el RAID y los discos. F\u00e1cilmente ampliable con la cantidad de discos que se necesiten, realmente la \u00fanica limitaci\u00f3n es la que ofrezca la placa base. Tambi\u00e9n es m\u00e1s f\u00e1cil de configurar. Para aquellos RAID que necesiten m\u00e1s recursos, el rendimiento general del sistema puede verse afectado. Adem\u00e1s, en el caso de que se degrade el RAID, es m\u00e1s complicado volver a recuperarlo y se puede perder informaci\u00f3n.</p>"},{"location":"storage/raid.html#por-hardware","title":"Por Hardware","text":"Controladora RAID X4TTX Dell PERC H730P <p>A diferencia del RAID por software (que usa los recursos del procesador y la memoria del sistema operativo para gestionar la matriz), la controladora RAID por hardware tiene su propio procesador (CPU), su propia memoria cach\u00e9 (RAM) y su propio firmware. Esto le permite realizar todas las operaciones de RAID (como la lectura/escritura de datos, el c\u00e1lculo de paridad, la reconstrucci\u00f3n de la matriz en caso de fallo de un disco, etc.) de forma independiente del sistema operativo principal y del procesador del servidor.</p>"},{"location":"storage/raid.html#referencias","title":"Referencias Bibliogr\u00e1ficas","text":"<ol> <li> <p>Fern\u00e1ndez, Y. (5 de junio de 2020). RAID de discos duros: qu\u00e9 son y sus principales tipos. Xataka. https://www.xataka.com/basics/raid-discos-duros-que-son-cuales-son-sus-principales-tipos</p> </li> <li> <p>Garc\u00eda, J. (2 de julio de 2025). Qu\u00e9 es un sistema RAID de discos duros y qu\u00e9 tipos hay. HardZone. https://hardzone.es/tutoriales/montaje/raid-discos-duros/</p> </li> </ol>"},{"location":"virtualization/virtual-machines.html","title":"M\u00e1quinas Virtuales (VM)","text":""},{"location":"virtualization/virtual-machines.html#definicion","title":"Definici\u00f3n","text":"Logo de Microsoft Hyper-V <p>Una m\u00e1quina virtual (VM) es una emulaci\u00f3n completa de un sistema operativo que se ejecuta dentro de un entorno virtualizado. Se comporta como un sistema inform\u00e1tico independiente, con hardware simulado por software, sobre una computadora f\u00edsica real (host).</p>"},{"location":"virtualization/virtual-machines.html#proposito-general","title":"Prop\u00f3sito General","text":"Logo de VMware <p>Las VM est\u00e1n dise\u00f1adas para ejecutar cualquier sistema operativo y software como si fuera un equipo f\u00edsico, con fines de:</p> <ul> <li>Laboratorio de pruebas</li> <li>Desarrollo de software</li> <li>Simulaci\u00f3n de redes</li> <li>Aislamiento de sistemas</li> <li>Seguridad y sandboxing</li> <li>Virtualizaci\u00f3n de escritorios (VDI)</li> </ul>"},{"location":"virtualization/virtual-machines.html#componentes-tecnicos","title":"Componentes T\u00e9cnicos","text":"<ul> <li>Hipervisor (tipo 1 o 2)</li> <li>Guest OS (sistema operativo invitado)</li> <li>Disco virtual (VMDK, VHD, QCOW2, etc.)</li> <li>CPU, RAM, y adaptadores de red virtuales</li> <li>Controladores de dispositivos virtuales</li> </ul>"},{"location":"virtualization/virtual-machines.html#tipos-de-hipervisores","title":"Tipos de Hipervisores","text":"Logo de VirtualBox Tipo Ejecutado sobre Ejemplos Tipo 1 Directamente en el hardware (bare metal) VMware ESXi, Microsoft Hyper-V, KVM Tipo 2 Sobre un sistema operativo anfitri\u00f3n VirtualBox, VMware Workstation"},{"location":"virtualization/virtual-machines.html#gestion-y-uso","title":"Gesti\u00f3n y Uso","text":"<ul> <li>Se pueden crear, modificar, duplicar, exportar</li> <li>Soportan snapshots, clonado, rollback</li> <li>Pueden instalar cualquier sistema operativo compatible</li> <li>Se administran desde una consola local o remota</li> </ul>"},{"location":"virtualization/virtual-machines.html#formatos-de-disco-virtual","title":"Formatos de Disco Virtual","text":"Formato Usado por Caracter\u00edsticas VMDK VMware Compatible con snapshots VHD/VHDX Hyper-V, Azure Respaldo incremental, cifrado QCOW2 KVM/QEMU Compresi\u00f3n, snapshots, cifrado RAW Gen\u00e9rico (m\u00e1ximo rendimiento) Sin metadatos, r\u00e1pido"},{"location":"virtualization/virtual-machines.html#casos-de-uso","title":"Casos de Uso","text":"<ul> <li>Laboratorios educativos (ej. redes, hacking \u00e9tico)</li> <li>Testing de m\u00faltiples sistemas operativos</li> <li>Aislamiento de entornos de desarrollo</li> <li>Configuraci\u00f3n de cl\u00fasteres virtualizados</li> <li>Simulaci\u00f3n de infraestructura compleja</li> </ul>"},{"location":"virtualization/virtual-servers.html","title":"Servidores Virtuales (VPS)","text":""},{"location":"virtualization/virtual-servers.html#que-es-un-servidor-virtual","title":"\u00bfQu\u00e9 es un Servidor Virtual?","text":"Logo de AWS <p>Un servidor virtual, o VPS (Virtual Private Server), es una instancia de servidor aislada que opera dentro de una m\u00e1quina f\u00edsica compartida mediante tecnolog\u00edas de virtualizaci\u00f3n. Aunque varios servidores virtuales pueden ejecutarse sobre el mismo hardware, cada VPS cuenta con su propio sistema operativo, recursos asignados (CPU, RAM, disco) y configuraciones, funcionando como si fuera un servidor independiente.</p> <p>Important</p> <p>A diferencia de una m\u00e1quina virtual gen\u00e9rica que se usa con fines t\u00e9cnicos o de laboratorio, el VPS est\u00e1 pensado para entornos de producci\u00f3n y servicios online.</p>"},{"location":"virtualization/virtual-servers.html#como-funciona-un-vps","title":"\u00bfC\u00f3mo Funciona un VPS?","text":"Logo de Linode <p>Un proveedor (como DigitalOcean, AWS o Linode) utiliza un hipervisor para dividir un servidor f\u00edsico en m\u00faltiples VPS. Cada VPS tiene acceso restringido a los recursos asignados, pero se comporta como un servidor completo.</p>"},{"location":"virtualization/virtual-servers.html#proceso-basico","title":"Proceso b\u00e1sico:","text":"<ol> <li>El hipervisor se instala sobre el hardware f\u00edsico (ESXi, KVM, etc.).</li> <li>Se crean m\u00faltiples VPS, cada uno con su propio sistema operativo.</li> <li>El cliente accede a su VPS mediante SSH o consola remota.</li> <li>Puede instalar software, configurar servicios, o desplegar aplicaciones.</li> <li>Cada VPS es independiente de los dem\u00e1s a nivel de software.</li> </ol>"},{"location":"virtualization/virtual-servers.html#tipos-de-servidores-virtuales","title":"Tipos de Servidores Virtuales","text":"Logo de Google Cloud"},{"location":"virtualization/virtual-servers.html#vps","title":"VPS (Virtual Private Server)","text":"<ul> <li>Aislado l\u00f3gicamente dentro de un nodo f\u00edsico.</li> <li>Uso com\u00fan en alojamiento web, API, servicios empresariales.</li> <li>Acceso root y configuraci\u00f3n personalizada.</li> </ul>"},{"location":"virtualization/virtual-servers.html#servidor-cloud","title":"Servidor Cloud","text":"<ul> <li>Similar al VPS, pero escalable din\u00e1micamente desde la nube.</li> <li>Ofrece alta disponibilidad, balanceo y facturaci\u00f3n por hora.</li> </ul>"},{"location":"virtualization/virtual-servers.html#servidor-dedicado-virtual","title":"Servidor Dedicado Virtual","text":"<ul> <li>Recursos garantizados m\u00e1s cercanos al servidor dedicado.</li> <li>Mayor rendimiento, ideal para tr\u00e1fico alto o aplicaciones cr\u00edticas.</li> </ul>"},{"location":"virtualization/virtual-servers.html#contenedores","title":"Contenedores (Docker, LXC)","text":"<ul> <li>Alternativa ligera a un VPS: no es una VM, comparte el kernel del host.</li> <li>Ideal para microservicios, CI/CD, aplicaciones desacopladas.</li> </ul>"},{"location":"virtualization/virtual-servers.html#hipervisores-utilizados-en-vps","title":"Hipervisores Utilizados en VPS","text":"Tipo Caracter\u00edsticas Ejemplos Tipo 1 Corre directamente sobre el hardware f\u00edsico. VMware ESXi, Hyper-V, KVM Tipo 2 Corre sobre un sistema operativo anfitri\u00f3n. Poco usado en VPS p\u00fablicos <p>Note</p> <p>En la mayor\u00eda de los VPS comerciales se usa KVM o Xen como hipervisor tipo 1.</p>"},{"location":"virtualization/virtual-servers.html#usos-comunes-del-vps","title":"Usos Comunes del VPS","text":"Logo de DigitalOcean <ul> <li>Alojamiento de sitios web con CMS (WordPress, Joomla, etc.)</li> <li>Servidores de bases de datos (MySQL, PostgreSQL, MongoDB)</li> <li>Servidores de aplicaciones (Node.js, Django, Laravel)</li> <li>Implementaci\u00f3n de API REST</li> <li>Automatizaci\u00f3n de tareas (bots, scrapers, jobs en cron)</li> <li>VPN, correo, DNS y otros servicios de red personalizados</li> </ul>"},{"location":"virtualization/virtual-servers.html#ventajas-del-vps","title":"Ventajas del VPS","text":"Ventaja Descripci\u00f3n Escalabilidad Se pueden aumentar recursos sin migrar Aislamiento Cada VPS es independiente del resto del sistema Ahorro de costos M\u00e1s econ\u00f3mico que un servidor f\u00edsico dedicado Acceso root Control total del sistema operativo y configuraciones Rendimiento Recursos garantizados frente a hosting compartido Versatilidad Compatible con casi cualquier software o stack"},{"location":"virtualization/virtual-servers.html#comparacion-con-otros-modelos-de-hosting","title":"Comparaci\u00f3n con Otros Modelos de Hosting","text":"Modelo Recursos Aislamiento Personalizaci\u00f3n Costo VPS Medio Medio-Alto Alto Medio Servidor dedicado Total Total Total Alto Hosting compartido Bajo Bajo Muy limitado Bajo"},{"location":"virtualization/virtual-servers.html#herramientas-de-gestion-y-paneles","title":"Herramientas de Gesti\u00f3n y Paneles","text":""},{"location":"virtualization/virtual-servers.html#paneles-de-administracion-opcionales","title":"Paneles de administraci\u00f3n opcionales:","text":"<ul> <li>Webmin / Virtualmin</li> <li>cPanel / WHM (licencia comercial)</li> <li>Plesk</li> <li>CyberPanel</li> <li>ISPConfig</li> </ul>"},{"location":"virtualization/virtual-servers.html#proveedores-populares-de-vps","title":"Proveedores populares de VPS:","text":"<ul> <li>DigitalOcean</li> <li>Linode</li> <li>Vultr</li> <li>Hetzner</li> <li>AWS Lightsail</li> <li>Google Cloud VM instances</li> <li>Azure Virtual Machines</li> </ul>"},{"location":"virtualization/virtual-servers.html#notas-tecnicas","title":"Notas T\u00e9cnicas","text":"<ul> <li>En un VPS no tienes acceso al hipervisor, solo al sistema operativo de tu instancia.</li> <li>El rendimiento puede depender de la carga general del nodo f\u00edsico, aunque est\u00e9 garantizado hasta cierto l\u00edmite.</li> <li>Los proveedores ofrecen backups, snapshots, balanceo de carga y monitoreo desde su panel.</li> </ul>"},{"location":"virtualization/containers/docker.html","title":"Docker","text":""},{"location":"virtualization/containers/docker.html#docker","title":"Docker","text":"Logo de Docker <p>Docker es una plataforma open-source (o de c\u00f3digo abierto), con el cual se puede empaquetar una aplicaci\u00f3n as\u00ed como todas las dependencias que esta requiere, en una unidad denominada contenedor [1]. Estas son ligeras en peso, lo cual permite su portabilidad. As\u00ed mismo, los contenedores est\u00e1n aislados de la infraestructura donde est\u00e1 siendo ejecutados, y por ende la imagen del contenedor puede ser ejecutada como un contenedor en cualquier sistema operativo donde est\u00e9 instalado Docker [1].</p> <p>Si su sistema operativo es Windows, Docker Desktop se puede instalar con facilidad desde la Microsoft Store.</p>"},{"location":"virtualization/containers/docker.html#dockerfile","title":"Dockerfile","text":"<p>Docker emplea archivos, denominados Dockerfile, los cuales usan DSL (Domain Specific Language) para describir todas las instrucciones necesarias para crear una imagen de forma r\u00e1pida [1].</p>"},{"location":"virtualization/containers/docker.html#docker-image","title":"Docker Image","text":"<p>Es un archivo compuesto de m\u00faltiples capas, empleado para ejecutar un contenedor Docker [1]. Es un paquete de software ejecutable que contiene todo lo necesario para correr la aplicaci\u00f3n. Esta imagen informa c\u00f3mo un contenedor debe inicializarse, determinando qu\u00e9 software debe ejecutarse y de qu\u00e9 forma.</p>"},{"location":"virtualization/containers/docker.html#docker-container","title":"Docker Container","text":"<p>Un contenedor Docker es una instancia runtime de una imagen Docker [1]. Contiene todo el kit requerido para una aplicaci\u00f3n, y permite ser ejecutada de forma aislada.</p>"},{"location":"virtualization/containers/docker.html#referencias-bibliograficas","title":"Referencias Bibliogr\u00e1ficas","text":"<ol> <li>What is Docker?. (22 de abril de 2025). Geeks for Geeks. https://www.geeksforgeeks.org/introduction-to-docker/</li> </ol>"}]}